
UTSMA_L476RG_STEERBYWIRE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009688  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000075c  08009818  08009818  00019818  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f74  08009f74  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  08009f74  08009f74  00019f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f7c  08009f7c  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f7c  08009f7c  00019f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f80  08009f80  00019f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08009f84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000484  200001d8  0800a15c  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000065c  0800a15c  0002065c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   000169fe  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bd1  00000000  00000000  00036c49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014e0  00000000  00000000  00039820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000104c  00000000  00000000  0003ad00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a295  00000000  00000000  0003bd4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016f8b  00000000  00000000  00065fe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010aa8c  00000000  00000000  0007cf6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006ab8  00000000  00000000  001879f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  0018e4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009800 	.word	0x08009800

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08009800 	.word	0x08009800

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <print_raw_data>:
/**
 * @brief Prints raw CAN data for debugging purposes.
 *
 * @param data The received 8-byte CAN data buffer.
 */
void print_raw_data(uint8_t data[8]) {
 8000ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ea6:	b089      	sub	sp, #36	; 0x24
 8000ea8:	af06      	add	r7, sp, #24
 8000eaa:	6078      	str	r0, [r7, #4]
    printf("RAW Data: %d %d %d %d %d %d %d %d\n", data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7]);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	461d      	mov	r5, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	461e      	mov	r6, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	3302      	adds	r3, #2
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	469c      	mov	ip, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3303      	adds	r3, #3
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	3304      	adds	r3, #4
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	3305      	adds	r3, #5
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	3306      	adds	r3, #6
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	461c      	mov	r4, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	3307      	adds	r3, #7
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	9304      	str	r3, [sp, #16]
 8000eea:	9403      	str	r4, [sp, #12]
 8000eec:	9002      	str	r0, [sp, #8]
 8000eee:	9101      	str	r1, [sp, #4]
 8000ef0:	9200      	str	r2, [sp, #0]
 8000ef2:	4663      	mov	r3, ip
 8000ef4:	4632      	mov	r2, r6
 8000ef6:	4629      	mov	r1, r5
 8000ef8:	4803      	ldr	r0, [pc, #12]	; (8000f08 <print_raw_data+0x64>)
 8000efa:	f006 fc7f 	bl	80077fc <iprintf>
}
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f06:	bf00      	nop
 8000f08:	08009880 	.word	0x08009880

08000f0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f12:	f001 f871 	bl	8001ff8 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f16:	f000 f8c1 	bl	800109c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f1a:	f000 fc21 	bl	8001760 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f1e:	f000 fbef 	bl	8001700 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8000f22:	f000 fa37 	bl	8001394 <MX_CAN1_Init>
  MX_ADC1_Init();
 8000f26:	f000 f90b 	bl	8001140 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000f2a:	f000 fa69 	bl	8001400 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f2e:	f000 fabb 	bl	80014a8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f32:	f000 fb0f 	bl	8001554 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000f36:	f000 fb63 	bl	8001600 <MX_TIM8_Init>
  MX_TIM16_Init();
 8000f3a:	f000 fbbb 	bl	80016b4 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */


  sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8000f3e:	4b4b      	ldr	r3, [pc, #300]	; (800106c <main+0x160>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	621a      	str	r2, [r3, #32]
  sFilterConfig.FilterBank = 10;  // anything between 0 to SlaveStartFilterBank
 8000f44:	4b49      	ldr	r3, [pc, #292]	; (800106c <main+0x160>)
 8000f46:	220a      	movs	r2, #10
 8000f48:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000f4a:	4b48      	ldr	r3, [pc, #288]	; (800106c <main+0x160>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterIdHigh = 0;
 8000f50:	4b46      	ldr	r3, [pc, #280]	; (800106c <main+0x160>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8000f56:	4b45      	ldr	r3, [pc, #276]	; (800106c <main+0x160>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0;
 8000f5c:	4b43      	ldr	r3, [pc, #268]	; (800106c <main+0x160>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000f62:	4b42      	ldr	r3, [pc, #264]	; (800106c <main+0x160>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000f68:	4b40      	ldr	r3, [pc, #256]	; (800106c <main+0x160>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000f6e:	4b3f      	ldr	r3, [pc, #252]	; (800106c <main+0x160>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	61da      	str	r2, [r3, #28]
  sFilterConfig.SlaveStartFilterBank = 0;  // 13 to 27 are assigned to slave CAN (CAN 2) OR 0 to 12 are assgned to CAN1
 8000f74:	4b3d      	ldr	r3, [pc, #244]	; (800106c <main+0x160>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	625a      	str	r2, [r3, #36]	; 0x24
//  sFilterConfig.FilterFIFOAssignment=CAN_RX_FIFO0;
//  sFilterConfig.FilterActivation=ENABLE;
//  sFilterConfig.SlaveStartFilterBank=14;


  if(HAL_CAN_ConfigFilter(&hcan1,&sFilterConfig)!=HAL_OK)
 8000f7a:	493c      	ldr	r1, [pc, #240]	; (800106c <main+0x160>)
 8000f7c:	483c      	ldr	r0, [pc, #240]	; (8001070 <main+0x164>)
 8000f7e:	f002 fbf8 	bl	8003772 <HAL_CAN_ConfigFilter>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <main+0x80>
  {
	  /* Filter configuration Error */ Error_Handler();
 8000f88:	f000 fcbc 	bl	8001904 <Error_Handler>

  }

  if(HAL_CAN_Start(&hcan1)!=HAL_OK)
 8000f8c:	4838      	ldr	r0, [pc, #224]	; (8001070 <main+0x164>)
 8000f8e:	f002 fcba 	bl	8003906 <HAL_CAN_Start>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <main+0x90>
  {
	  /* Start Error */ Error_Handler();
 8000f98:	f000 fcb4 	bl	8001904 <Error_Handler>
  }

  if(HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING |CAN_IT_TX_MAILBOX_EMPTY)!=HAL_OK)
 8000f9c:	2103      	movs	r1, #3
 8000f9e:	4834      	ldr	r0, [pc, #208]	; (8001070 <main+0x164>)
 8000fa0:	f002 fee7 	bl	8003d72 <HAL_CAN_ActivateNotification>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <main+0xa2>
  {
	  /* Notification Error */ Error_Handler();
 8000faa:	f000 fcab 	bl	8001904 <Error_Handler>
  }


  TxHeader.StdId=CAN_SENDER_ID; // 0x201
 8000fae:	4b31      	ldr	r3, [pc, #196]	; (8001074 <main+0x168>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a31      	ldr	r2, [pc, #196]	; (8001078 <main+0x16c>)
 8000fb4:	6013      	str	r3, [r2, #0]
  TxHeader.ExtId=0;
 8000fb6:	4b30      	ldr	r3, [pc, #192]	; (8001078 <main+0x16c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	605a      	str	r2, [r3, #4]
  TxHeader.RTR=CAN_RTR_DATA;
 8000fbc:	4b2e      	ldr	r3, [pc, #184]	; (8001078 <main+0x16c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
  TxHeader.IDE=CAN_ID_STD;
 8000fc2:	4b2d      	ldr	r3, [pc, #180]	; (8001078 <main+0x16c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
  TxHeader.DLC=8;
 8000fc8:	4b2b      	ldr	r3, [pc, #172]	; (8001078 <main+0x16c>)
 8000fca:	2208      	movs	r2, #8
 8000fcc:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime=DISABLE;
 8000fce:	4b2a      	ldr	r3, [pc, #168]	; (8001078 <main+0x16c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	751a      	strb	r2, [r3, #20]
  //TxData[0]=0; TxData[1]=0; TxData[2]=0; TxData[3]=0; TxData[4]=0; TxData[5]=1; TxData[6]=1; TxData[7]=1;
  //HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData,&TxMailbox);



  HAL_ADC_Start(&hadc1);
 8000fd4:	4829      	ldr	r0, [pc, #164]	; (800107c <main+0x170>)
 8000fd6:	f001 fbe3 	bl	80027a0 <HAL_ADC_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // /* Read potentiometer value
	  if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) { // Wait up to 100ms
 8000fda:	2164      	movs	r1, #100	; 0x64
 8000fdc:	4827      	ldr	r0, [pc, #156]	; (800107c <main+0x170>)
 8000fde:	f001 fc99 	bl	8002914 <HAL_ADC_PollForConversion>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d107      	bne.n	8000ff8 <main+0xec>
	      adcValue = HAL_ADC_GetValue(&hadc1);
 8000fe8:	4824      	ldr	r0, [pc, #144]	; (800107c <main+0x170>)
 8000fea:	f001 fd6b 	bl	8002ac4 <HAL_ADC_GetValue>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b23      	ldr	r3, [pc, #140]	; (8001080 <main+0x174>)
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	e002      	b.n	8000ffe <main+0xf2>
	      //printf("ADC Value: %d\n", adcValue);
	  } else {
	      printf("ADC Conversion Timeout or Error\n");
 8000ff8:	4822      	ldr	r0, [pc, #136]	; (8001084 <main+0x178>)
 8000ffa:	f006 fc65 	bl	80078c8 <puts>
	  }
	  HAL_ADC_Start(&hadc1); // Restart ADC to be ready for next measurement
 8000ffe:	481f      	ldr	r0, [pc, #124]	; (800107c <main+0x170>)
 8001000:	f001 fbce 	bl	80027a0 <HAL_ADC_Start>
	  // */

	  // Read state of blue button
	  buttonValue = HAL_GPIO_ReadPin(RES_BUTTON_GPIO_Port, RES_BUTTON_Pin);
 8001004:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001008:	481f      	ldr	r0, [pc, #124]	; (8001088 <main+0x17c>)
 800100a:	f003 fbb9 	bl	8004780 <HAL_GPIO_ReadPin>
 800100e:	4603      	mov	r3, r0
 8001010:	461a      	mov	r2, r3
 8001012:	4b1e      	ldr	r3, [pc, #120]	; (800108c <main+0x180>)
 8001014:	701a      	strb	r2, [r3, #0]

	  // /* Simple transmission to test connection between MCUs
	  adcValue = map(adcValue, 0, 4095, 0, 255);
 8001016:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <main+0x174>)
 8001018:	6818      	ldr	r0, [r3, #0]
 800101a:	23ff      	movs	r3, #255	; 0xff
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	2300      	movs	r3, #0
 8001020:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001024:	2100      	movs	r1, #0
 8001026:	f000 fc51 	bl	80018cc <map>
 800102a:	4603      	mov	r3, r0
 800102c:	4a14      	ldr	r2, [pc, #80]	; (8001080 <main+0x174>)
 800102e:	6013      	str	r3, [r2, #0]
	  TxData[0] = adcValue;
 8001030:	4b13      	ldr	r3, [pc, #76]	; (8001080 <main+0x174>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4b16      	ldr	r3, [pc, #88]	; (8001090 <main+0x184>)
 8001038:	701a      	strb	r2, [r3, #0]
	  TxData[1] = increment++;
 800103a:	4b16      	ldr	r3, [pc, #88]	; (8001094 <main+0x188>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	1c5a      	adds	r2, r3, #1
 8001040:	4914      	ldr	r1, [pc, #80]	; (8001094 <main+0x188>)
 8001042:	600a      	str	r2, [r1, #0]
 8001044:	b2da      	uxtb	r2, r3
 8001046:	4b12      	ldr	r3, [pc, #72]	; (8001090 <main+0x184>)
 8001048:	705a      	strb	r2, [r3, #1]
	  TxData[2] = 123;
 800104a:	4b11      	ldr	r3, [pc, #68]	; (8001090 <main+0x184>)
 800104c:	227b      	movs	r2, #123	; 0x7b
 800104e:	709a      	strb	r2, [r3, #2]
	  TxData[3] = buttonValue;
 8001050:	4b0e      	ldr	r3, [pc, #56]	; (800108c <main+0x180>)
 8001052:	781a      	ldrb	r2, [r3, #0]
 8001054:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <main+0x184>)
 8001056:	70da      	strb	r2, [r3, #3]
	  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8001058:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <main+0x18c>)
 800105a:	4a0d      	ldr	r2, [pc, #52]	; (8001090 <main+0x184>)
 800105c:	4906      	ldr	r1, [pc, #24]	; (8001078 <main+0x16c>)
 800105e:	4804      	ldr	r0, [pc, #16]	; (8001070 <main+0x164>)
 8001060:	f002 fc95 	bl	800398e <HAL_CAN_AddTxMessage>
	  Kd = 0.2;
	  Trq_ff = 0; // 2 * (float)!HAL_GPIO_ReadPin(RES_BUTTON_GPIO_Port, RES_BUTTON_Pin); // Optionally, give the motor a 2Nm feedforward torque when button is pressed
	  cubemars_send_can_cmd(&hcan1, &TxHeader, &TxMailbox, Pos_ref, Vel_ref, Kp, Kd, Trq_ff);
	  */

	  HAL_Delay(250);
 8001064:	20fa      	movs	r0, #250	; 0xfa
 8001066:	f001 f843 	bl	80020f0 <HAL_Delay>
	  if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) { // Wait up to 100ms
 800106a:	e7b6      	b.n	8000fda <main+0xce>
 800106c:	20000494 	.word	0x20000494
 8001070:	20000258 	.word	0x20000258
 8001074:	20000000 	.word	0x20000000
 8001078:	200004bc 	.word	0x200004bc
 800107c:	200001f4 	.word	0x200001f4
 8001080:	2000048c 	.word	0x2000048c
 8001084:	08009b9c 	.word	0x08009b9c
 8001088:	48000800 	.word	0x48000800
 800108c:	20000490 	.word	0x20000490
 8001090:	200004f0 	.word	0x200004f0
 8001094:	20000504 	.word	0x20000504
 8001098:	20000500 	.word	0x20000500

0800109c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b096      	sub	sp, #88	; 0x58
 80010a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	2244      	movs	r2, #68	; 0x44
 80010a8:	2100      	movs	r1, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f006 fc14 	bl	80078d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b0:	463b      	mov	r3, r7
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	60da      	str	r2, [r3, #12]
 80010bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010c2:	f003 fb9b 	bl	80047fc <HAL_PWREx_ControlVoltageScaling>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010cc:	f000 fc1a 	bl	8001904 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010d0:	2302      	movs	r3, #2
 80010d2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010da:	2310      	movs	r3, #16
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010de:	2302      	movs	r3, #2
 80010e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010e2:	2302      	movs	r3, #2
 80010e4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010e6:	2301      	movs	r3, #1
 80010e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80010ea:	230a      	movs	r3, #10
 80010ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010ee:	2307      	movs	r3, #7
 80010f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010f2:	2302      	movs	r3, #2
 80010f4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010f6:	2302      	movs	r3, #2
 80010f8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010fa:	f107 0314 	add.w	r3, r7, #20
 80010fe:	4618      	mov	r0, r3
 8001100:	f003 fbd2 	bl	80048a8 <HAL_RCC_OscConfig>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800110a:	f000 fbfb 	bl	8001904 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800110e:	230f      	movs	r3, #15
 8001110:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001112:	2303      	movs	r3, #3
 8001114:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001116:	2300      	movs	r3, #0
 8001118:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001122:	463b      	mov	r3, r7
 8001124:	2104      	movs	r1, #4
 8001126:	4618      	mov	r0, r3
 8001128:	f003 ff9a 	bl	8005060 <HAL_RCC_ClockConfig>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001132:	f000 fbe7 	bl	8001904 <Error_Handler>
  }
}
 8001136:	bf00      	nop
 8001138:	3758      	adds	r7, #88	; 0x58
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
	...

08001140 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	; 0x28
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001146:	f107 031c 	add.w	r3, r7, #28
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
 8001160:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001162:	4b89      	ldr	r3, [pc, #548]	; (8001388 <MX_ADC1_Init+0x248>)
 8001164:	4a89      	ldr	r2, [pc, #548]	; (800138c <MX_ADC1_Init+0x24c>)
 8001166:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001168:	4b87      	ldr	r3, [pc, #540]	; (8001388 <MX_ADC1_Init+0x248>)
 800116a:	2200      	movs	r2, #0
 800116c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800116e:	4b86      	ldr	r3, [pc, #536]	; (8001388 <MX_ADC1_Init+0x248>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001174:	4b84      	ldr	r3, [pc, #528]	; (8001388 <MX_ADC1_Init+0x248>)
 8001176:	2200      	movs	r2, #0
 8001178:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800117a:	4b83      	ldr	r3, [pc, #524]	; (8001388 <MX_ADC1_Init+0x248>)
 800117c:	2201      	movs	r2, #1
 800117e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001180:	4b81      	ldr	r3, [pc, #516]	; (8001388 <MX_ADC1_Init+0x248>)
 8001182:	2204      	movs	r2, #4
 8001184:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001186:	4b80      	ldr	r3, [pc, #512]	; (8001388 <MX_ADC1_Init+0x248>)
 8001188:	2200      	movs	r2, #0
 800118a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800118c:	4b7e      	ldr	r3, [pc, #504]	; (8001388 <MX_ADC1_Init+0x248>)
 800118e:	2200      	movs	r2, #0
 8001190:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 15;
 8001192:	4b7d      	ldr	r3, [pc, #500]	; (8001388 <MX_ADC1_Init+0x248>)
 8001194:	220f      	movs	r2, #15
 8001196:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001198:	4b7b      	ldr	r3, [pc, #492]	; (8001388 <MX_ADC1_Init+0x248>)
 800119a:	2200      	movs	r2, #0
 800119c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011a0:	4b79      	ldr	r3, [pc, #484]	; (8001388 <MX_ADC1_Init+0x248>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011a6:	4b78      	ldr	r3, [pc, #480]	; (8001388 <MX_ADC1_Init+0x248>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011ac:	4b76      	ldr	r3, [pc, #472]	; (8001388 <MX_ADC1_Init+0x248>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011b4:	4b74      	ldr	r3, [pc, #464]	; (8001388 <MX_ADC1_Init+0x248>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80011ba:	4b73      	ldr	r3, [pc, #460]	; (8001388 <MX_ADC1_Init+0x248>)
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011c2:	4871      	ldr	r0, [pc, #452]	; (8001388 <MX_ADC1_Init+0x248>)
 80011c4:	f001 f99c 	bl	8002500 <HAL_ADC_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80011ce:	f000 fb99 	bl	8001904 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011d6:	f107 031c 	add.w	r3, r7, #28
 80011da:	4619      	mov	r1, r3
 80011dc:	486a      	ldr	r0, [pc, #424]	; (8001388 <MX_ADC1_Init+0x248>)
 80011de:	f002 f91d 	bl	800341c <HAL_ADCEx_MultiModeConfigChannel>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80011e8:	f000 fb8c 	bl	8001904 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011ec:	4b68      	ldr	r3, [pc, #416]	; (8001390 <MX_ADC1_Init+0x250>)
 80011ee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011f0:	2306      	movs	r3, #6
 80011f2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011f4:	2300      	movs	r3, #0
 80011f6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011f8:	237f      	movs	r3, #127	; 0x7f
 80011fa:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011fc:	2304      	movs	r3, #4
 80011fe:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	4619      	mov	r1, r3
 8001208:	485f      	ldr	r0, [pc, #380]	; (8001388 <MX_ADC1_Init+0x248>)
 800120a:	f001 fc69 	bl	8002ae0 <HAL_ADC_ConfigChannel>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001214:	f000 fb76 	bl	8001904 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001218:	230c      	movs	r3, #12
 800121a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	4619      	mov	r1, r3
 8001220:	4859      	ldr	r0, [pc, #356]	; (8001388 <MX_ADC1_Init+0x248>)
 8001222:	f001 fc5d 	bl	8002ae0 <HAL_ADC_ConfigChannel>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 800122c:	f000 fb6a 	bl	8001904 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001230:	2312      	movs	r3, #18
 8001232:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	4619      	mov	r1, r3
 8001238:	4853      	ldr	r0, [pc, #332]	; (8001388 <MX_ADC1_Init+0x248>)
 800123a:	f001 fc51 	bl	8002ae0 <HAL_ADC_ConfigChannel>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8001244:	f000 fb5e 	bl	8001904 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001248:	2318      	movs	r3, #24
 800124a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	4619      	mov	r1, r3
 8001250:	484d      	ldr	r0, [pc, #308]	; (8001388 <MX_ADC1_Init+0x248>)
 8001252:	f001 fc45 	bl	8002ae0 <HAL_ADC_ConfigChannel>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 800125c:	f000 fb52 	bl	8001904 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001260:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001264:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	4619      	mov	r1, r3
 800126a:	4847      	ldr	r0, [pc, #284]	; (8001388 <MX_ADC1_Init+0x248>)
 800126c:	f001 fc38 	bl	8002ae0 <HAL_ADC_ConfigChannel>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_ADC1_Init+0x13a>
  {
    Error_Handler();
 8001276:	f000 fb45 	bl	8001904 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800127a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800127e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	4619      	mov	r1, r3
 8001284:	4840      	ldr	r0, [pc, #256]	; (8001388 <MX_ADC1_Init+0x248>)
 8001286:	f001 fc2b 	bl	8002ae0 <HAL_ADC_ConfigChannel>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8001290:	f000 fb38 	bl	8001904 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001294:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8001298:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	4619      	mov	r1, r3
 800129e:	483a      	ldr	r0, [pc, #232]	; (8001388 <MX_ADC1_Init+0x248>)
 80012a0:	f001 fc1e 	bl	8002ae0 <HAL_ADC_ConfigChannel>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 80012aa:	f000 fb2b 	bl	8001904 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80012ae:	f44f 7389 	mov.w	r3, #274	; 0x112
 80012b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	4619      	mov	r1, r3
 80012b8:	4833      	ldr	r0, [pc, #204]	; (8001388 <MX_ADC1_Init+0x248>)
 80012ba:	f001 fc11 	bl	8002ae0 <HAL_ADC_ConfigChannel>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_ADC1_Init+0x188>
  {
    Error_Handler();
 80012c4:	f000 fb1e 	bl	8001904 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80012c8:	f44f 738c 	mov.w	r3, #280	; 0x118
 80012cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	4619      	mov	r1, r3
 80012d2:	482d      	ldr	r0, [pc, #180]	; (8001388 <MX_ADC1_Init+0x248>)
 80012d4:	f001 fc04 	bl	8002ae0 <HAL_ADC_ConfigChannel>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_ADC1_Init+0x1a2>
  {
    Error_Handler();
 80012de:	f000 fb11 	bl	8001904 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80012e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	4619      	mov	r1, r3
 80012ec:	4826      	ldr	r0, [pc, #152]	; (8001388 <MX_ADC1_Init+0x248>)
 80012ee:	f001 fbf7 	bl	8002ae0 <HAL_ADC_ConfigChannel>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_ADC1_Init+0x1bc>
  {
    Error_Handler();
 80012f8:	f000 fb04 	bl	8001904 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80012fc:	f240 2306 	movw	r3, #518	; 0x206
 8001300:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	4619      	mov	r1, r3
 8001306:	4820      	ldr	r0, [pc, #128]	; (8001388 <MX_ADC1_Init+0x248>)
 8001308:	f001 fbea 	bl	8002ae0 <HAL_ADC_ConfigChannel>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_ADC1_Init+0x1d6>
  {
    Error_Handler();
 8001312:	f000 faf7 	bl	8001904 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8001316:	f44f 7303 	mov.w	r3, #524	; 0x20c
 800131a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	4619      	mov	r1, r3
 8001320:	4819      	ldr	r0, [pc, #100]	; (8001388 <MX_ADC1_Init+0x248>)
 8001322:	f001 fbdd 	bl	8002ae0 <HAL_ADC_ConfigChannel>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_ADC1_Init+0x1f0>
  {
    Error_Handler();
 800132c:	f000 faea 	bl	8001904 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8001330:	f240 2312 	movw	r3, #530	; 0x212
 8001334:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	4619      	mov	r1, r3
 800133a:	4813      	ldr	r0, [pc, #76]	; (8001388 <MX_ADC1_Init+0x248>)
 800133c:	f001 fbd0 	bl	8002ae0 <HAL_ADC_ConfigChannel>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_ADC1_Init+0x20a>
  {
    Error_Handler();
 8001346:	f000 fadd 	bl	8001904 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_14;
 800134a:	f44f 7306 	mov.w	r3, #536	; 0x218
 800134e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	4619      	mov	r1, r3
 8001354:	480c      	ldr	r0, [pc, #48]	; (8001388 <MX_ADC1_Init+0x248>)
 8001356:	f001 fbc3 	bl	8002ae0 <HAL_ADC_ConfigChannel>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_ADC1_Init+0x224>
  {
    Error_Handler();
 8001360:	f000 fad0 	bl	8001904 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_15;
 8001364:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001368:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	4619      	mov	r1, r3
 800136e:	4806      	ldr	r0, [pc, #24]	; (8001388 <MX_ADC1_Init+0x248>)
 8001370:	f001 fbb6 	bl	8002ae0 <HAL_ADC_ConfigChannel>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_ADC1_Init+0x23e>
  {
    Error_Handler();
 800137a:	f000 fac3 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800137e:	bf00      	nop
 8001380:	3728      	adds	r7, #40	; 0x28
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200001f4 	.word	0x200001f4
 800138c:	50040000 	.word	0x50040000
 8001390:	04300002 	.word	0x04300002

08001394 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001398:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <MX_CAN1_Init+0x64>)
 800139a:	4a18      	ldr	r2, [pc, #96]	; (80013fc <MX_CAN1_Init+0x68>)
 800139c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 800139e:	4b16      	ldr	r3, [pc, #88]	; (80013f8 <MX_CAN1_Init+0x64>)
 80013a0:	2205      	movs	r2, #5
 80013a2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80013a4:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <MX_CAN1_Init+0x64>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80013aa:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <MX_CAN1_Init+0x64>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <MX_CAN1_Init+0x64>)
 80013b2:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80013b6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80013b8:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <MX_CAN1_Init+0x64>)
 80013ba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80013be:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80013c0:	4b0d      	ldr	r3, [pc, #52]	; (80013f8 <MX_CAN1_Init+0x64>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80013c6:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <MX_CAN1_Init+0x64>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80013cc:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <MX_CAN1_Init+0x64>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <MX_CAN1_Init+0x64>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80013d8:	4b07      	ldr	r3, [pc, #28]	; (80013f8 <MX_CAN1_Init+0x64>)
 80013da:	2200      	movs	r2, #0
 80013dc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <MX_CAN1_Init+0x64>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80013e4:	4804      	ldr	r0, [pc, #16]	; (80013f8 <MX_CAN1_Init+0x64>)
 80013e6:	f002 f8c9 	bl	800357c <HAL_CAN_Init>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80013f0:	f000 fa88 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20000258 	.word	0x20000258
 80013fc:	40006400 	.word	0x40006400

08001400 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08c      	sub	sp, #48	; 0x30
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001406:	f107 030c 	add.w	r3, r7, #12
 800140a:	2224      	movs	r2, #36	; 0x24
 800140c:	2100      	movs	r1, #0
 800140e:	4618      	mov	r0, r3
 8001410:	f006 fa62 	bl	80078d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001414:	463b      	mov	r3, r7
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800141e:	4b21      	ldr	r3, [pc, #132]	; (80014a4 <MX_TIM2_Init+0xa4>)
 8001420:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001424:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001426:	4b1f      	ldr	r3, [pc, #124]	; (80014a4 <MX_TIM2_Init+0xa4>)
 8001428:	2200      	movs	r2, #0
 800142a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142c:	4b1d      	ldr	r3, [pc, #116]	; (80014a4 <MX_TIM2_Init+0xa4>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001432:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <MX_TIM2_Init+0xa4>)
 8001434:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001438:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800143a:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <MX_TIM2_Init+0xa4>)
 800143c:	2200      	movs	r2, #0
 800143e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001440:	4b18      	ldr	r3, [pc, #96]	; (80014a4 <MX_TIM2_Init+0xa4>)
 8001442:	2200      	movs	r2, #0
 8001444:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001446:	2301      	movs	r3, #1
 8001448:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800144a:	2300      	movs	r3, #0
 800144c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800144e:	2301      	movs	r3, #1
 8001450:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001452:	2300      	movs	r3, #0
 8001454:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800145a:	2300      	movs	r3, #0
 800145c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800145e:	2301      	movs	r3, #1
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001462:	2300      	movs	r3, #0
 8001464:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800146a:	f107 030c 	add.w	r3, r7, #12
 800146e:	4619      	mov	r1, r3
 8001470:	480c      	ldr	r0, [pc, #48]	; (80014a4 <MX_TIM2_Init+0xa4>)
 8001472:	f004 fd2c 	bl	8005ece <HAL_TIM_Encoder_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800147c:	f000 fa42 	bl	8001904 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001480:	2300      	movs	r3, #0
 8001482:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001484:	2300      	movs	r3, #0
 8001486:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001488:	463b      	mov	r3, r7
 800148a:	4619      	mov	r1, r3
 800148c:	4805      	ldr	r0, [pc, #20]	; (80014a4 <MX_TIM2_Init+0xa4>)
 800148e:	f004 fe5f 	bl	8006150 <HAL_TIMEx_MasterConfigSynchronization>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001498:	f000 fa34 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800149c:	bf00      	nop
 800149e:	3730      	adds	r7, #48	; 0x30
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20000280 	.word	0x20000280

080014a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08c      	sub	sp, #48	; 0x30
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014ae:	f107 030c 	add.w	r3, r7, #12
 80014b2:	2224      	movs	r2, #36	; 0x24
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f006 fa0e 	bl	80078d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014bc:	463b      	mov	r3, r7
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014c6:	4b21      	ldr	r3, [pc, #132]	; (800154c <MX_TIM3_Init+0xa4>)
 80014c8:	4a21      	ldr	r2, [pc, #132]	; (8001550 <MX_TIM3_Init+0xa8>)
 80014ca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80014cc:	4b1f      	ldr	r3, [pc, #124]	; (800154c <MX_TIM3_Init+0xa4>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d2:	4b1e      	ldr	r3, [pc, #120]	; (800154c <MX_TIM3_Init+0xa4>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80014d8:	4b1c      	ldr	r3, [pc, #112]	; (800154c <MX_TIM3_Init+0xa4>)
 80014da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e0:	4b1a      	ldr	r3, [pc, #104]	; (800154c <MX_TIM3_Init+0xa4>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e6:	4b19      	ldr	r3, [pc, #100]	; (800154c <MX_TIM3_Init+0xa4>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80014ec:	2301      	movs	r3, #1
 80014ee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014f0:	2300      	movs	r3, #0
 80014f2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014f4:	2301      	movs	r3, #1
 80014f6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001500:	2300      	movs	r3, #0
 8001502:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001504:	2301      	movs	r3, #1
 8001506:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001508:	2300      	movs	r3, #0
 800150a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001510:	f107 030c 	add.w	r3, r7, #12
 8001514:	4619      	mov	r1, r3
 8001516:	480d      	ldr	r0, [pc, #52]	; (800154c <MX_TIM3_Init+0xa4>)
 8001518:	f004 fcd9 	bl	8005ece <HAL_TIM_Encoder_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001522:	f000 f9ef 	bl	8001904 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001526:	2300      	movs	r3, #0
 8001528:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800152a:	2300      	movs	r3, #0
 800152c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800152e:	463b      	mov	r3, r7
 8001530:	4619      	mov	r1, r3
 8001532:	4806      	ldr	r0, [pc, #24]	; (800154c <MX_TIM3_Init+0xa4>)
 8001534:	f004 fe0c 	bl	8006150 <HAL_TIMEx_MasterConfigSynchronization>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800153e:	f000 f9e1 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001542:	bf00      	nop
 8001544:	3730      	adds	r7, #48	; 0x30
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	200002cc 	.word	0x200002cc
 8001550:	40000400 	.word	0x40000400

08001554 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08c      	sub	sp, #48	; 0x30
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800155a:	f107 030c 	add.w	r3, r7, #12
 800155e:	2224      	movs	r2, #36	; 0x24
 8001560:	2100      	movs	r1, #0
 8001562:	4618      	mov	r0, r3
 8001564:	f006 f9b8 	bl	80078d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001568:	463b      	mov	r3, r7
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001572:	4b21      	ldr	r3, [pc, #132]	; (80015f8 <MX_TIM4_Init+0xa4>)
 8001574:	4a21      	ldr	r2, [pc, #132]	; (80015fc <MX_TIM4_Init+0xa8>)
 8001576:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001578:	4b1f      	ldr	r3, [pc, #124]	; (80015f8 <MX_TIM4_Init+0xa4>)
 800157a:	2200      	movs	r2, #0
 800157c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800157e:	4b1e      	ldr	r3, [pc, #120]	; (80015f8 <MX_TIM4_Init+0xa4>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001584:	4b1c      	ldr	r3, [pc, #112]	; (80015f8 <MX_TIM4_Init+0xa4>)
 8001586:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800158a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800158c:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <MX_TIM4_Init+0xa4>)
 800158e:	2200      	movs	r2, #0
 8001590:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001592:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <MX_TIM4_Init+0xa4>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001598:	2301      	movs	r3, #1
 800159a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800159c:	2300      	movs	r3, #0
 800159e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015a0:	2301      	movs	r3, #1
 80015a2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015a4:	2300      	movs	r3, #0
 80015a6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015ac:	2300      	movs	r3, #0
 80015ae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015b0:	2301      	movs	r3, #1
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80015bc:	f107 030c 	add.w	r3, r7, #12
 80015c0:	4619      	mov	r1, r3
 80015c2:	480d      	ldr	r0, [pc, #52]	; (80015f8 <MX_TIM4_Init+0xa4>)
 80015c4:	f004 fc83 	bl	8005ece <HAL_TIM_Encoder_Init>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80015ce:	f000 f999 	bl	8001904 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d2:	2300      	movs	r3, #0
 80015d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015da:	463b      	mov	r3, r7
 80015dc:	4619      	mov	r1, r3
 80015de:	4806      	ldr	r0, [pc, #24]	; (80015f8 <MX_TIM4_Init+0xa4>)
 80015e0:	f004 fdb6 	bl	8006150 <HAL_TIMEx_MasterConfigSynchronization>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80015ea:	f000 f98b 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80015ee:	bf00      	nop
 80015f0:	3730      	adds	r7, #48	; 0x30
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000318 	.word	0x20000318
 80015fc:	40000800 	.word	0x40000800

08001600 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08c      	sub	sp, #48	; 0x30
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001606:	f107 030c 	add.w	r3, r7, #12
 800160a:	2224      	movs	r2, #36	; 0x24
 800160c:	2100      	movs	r1, #0
 800160e:	4618      	mov	r0, r3
 8001610:	f006 f962 	bl	80078d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001614:	463b      	mov	r3, r7
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800161e:	4b23      	ldr	r3, [pc, #140]	; (80016ac <MX_TIM8_Init+0xac>)
 8001620:	4a23      	ldr	r2, [pc, #140]	; (80016b0 <MX_TIM8_Init+0xb0>)
 8001622:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001624:	4b21      	ldr	r3, [pc, #132]	; (80016ac <MX_TIM8_Init+0xac>)
 8001626:	2200      	movs	r2, #0
 8001628:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162a:	4b20      	ldr	r3, [pc, #128]	; (80016ac <MX_TIM8_Init+0xac>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001630:	4b1e      	ldr	r3, [pc, #120]	; (80016ac <MX_TIM8_Init+0xac>)
 8001632:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001636:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001638:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <MX_TIM8_Init+0xac>)
 800163a:	2200      	movs	r2, #0
 800163c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800163e:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <MX_TIM8_Init+0xac>)
 8001640:	2200      	movs	r2, #0
 8001642:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001644:	4b19      	ldr	r3, [pc, #100]	; (80016ac <MX_TIM8_Init+0xac>)
 8001646:	2200      	movs	r2, #0
 8001648:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800164a:	2301      	movs	r3, #1
 800164c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001652:	2301      	movs	r3, #1
 8001654:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001656:	2300      	movs	r3, #0
 8001658:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800165e:	2300      	movs	r3, #0
 8001660:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001662:	2301      	movs	r3, #1
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001666:	2300      	movs	r3, #0
 8001668:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800166e:	f107 030c 	add.w	r3, r7, #12
 8001672:	4619      	mov	r1, r3
 8001674:	480d      	ldr	r0, [pc, #52]	; (80016ac <MX_TIM8_Init+0xac>)
 8001676:	f004 fc2a 	bl	8005ece <HAL_TIM_Encoder_Init>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001680:	f000 f940 	bl	8001904 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001684:	2300      	movs	r3, #0
 8001686:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001688:	2300      	movs	r3, #0
 800168a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800168c:	2300      	movs	r3, #0
 800168e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001690:	463b      	mov	r3, r7
 8001692:	4619      	mov	r1, r3
 8001694:	4805      	ldr	r0, [pc, #20]	; (80016ac <MX_TIM8_Init+0xac>)
 8001696:	f004 fd5b 	bl	8006150 <HAL_TIMEx_MasterConfigSynchronization>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80016a0:	f000 f930 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80016a4:	bf00      	nop
 80016a6:	3730      	adds	r7, #48	; 0x30
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20000364 	.word	0x20000364
 80016b0:	40013400 	.word	0x40013400

080016b4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80016b8:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <MX_TIM16_Init+0x44>)
 80016ba:	4a10      	ldr	r2, [pc, #64]	; (80016fc <MX_TIM16_Init+0x48>)
 80016bc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80016be:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <MX_TIM16_Init+0x44>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c4:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <MX_TIM16_Init+0x44>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80016ca:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <MX_TIM16_Init+0x44>)
 80016cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016d0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d2:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <MX_TIM16_Init+0x44>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80016d8:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <MX_TIM16_Init+0x44>)
 80016da:	2200      	movs	r2, #0
 80016dc:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <MX_TIM16_Init+0x44>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80016e4:	4804      	ldr	r0, [pc, #16]	; (80016f8 <MX_TIM16_Init+0x44>)
 80016e6:	f004 fb9b 	bl	8005e20 <HAL_TIM_Base_Init>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80016f0:	f000 f908 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	200003b0 	.word	0x200003b0
 80016fc:	40014400 	.word	0x40014400

08001700 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001704:	4b14      	ldr	r3, [pc, #80]	; (8001758 <MX_USART2_UART_Init+0x58>)
 8001706:	4a15      	ldr	r2, [pc, #84]	; (800175c <MX_USART2_UART_Init+0x5c>)
 8001708:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800170a:	4b13      	ldr	r3, [pc, #76]	; (8001758 <MX_USART2_UART_Init+0x58>)
 800170c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001710:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001712:	4b11      	ldr	r3, [pc, #68]	; (8001758 <MX_USART2_UART_Init+0x58>)
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001718:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <MX_USART2_UART_Init+0x58>)
 800171a:	2200      	movs	r2, #0
 800171c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <MX_USART2_UART_Init+0x58>)
 8001720:	2200      	movs	r2, #0
 8001722:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <MX_USART2_UART_Init+0x58>)
 8001726:	220c      	movs	r2, #12
 8001728:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800172a:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <MX_USART2_UART_Init+0x58>)
 800172c:	2200      	movs	r2, #0
 800172e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001730:	4b09      	ldr	r3, [pc, #36]	; (8001758 <MX_USART2_UART_Init+0x58>)
 8001732:	2200      	movs	r2, #0
 8001734:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001736:	4b08      	ldr	r3, [pc, #32]	; (8001758 <MX_USART2_UART_Init+0x58>)
 8001738:	2200      	movs	r2, #0
 800173a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <MX_USART2_UART_Init+0x58>)
 800173e:	2200      	movs	r2, #0
 8001740:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001742:	4805      	ldr	r0, [pc, #20]	; (8001758 <MX_USART2_UART_Init+0x58>)
 8001744:	f004 fd8c 	bl	8006260 <HAL_UART_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800174e:	f000 f8d9 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200003fc 	.word	0x200003fc
 800175c:	40004400 	.word	0x40004400

08001760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08a      	sub	sp, #40	; 0x28
 8001764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001766:	f107 0314 	add.w	r3, r7, #20
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	605a      	str	r2, [r3, #4]
 8001770:	609a      	str	r2, [r3, #8]
 8001772:	60da      	str	r2, [r3, #12]
 8001774:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001776:	4b2b      	ldr	r3, [pc, #172]	; (8001824 <MX_GPIO_Init+0xc4>)
 8001778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177a:	4a2a      	ldr	r2, [pc, #168]	; (8001824 <MX_GPIO_Init+0xc4>)
 800177c:	f043 0304 	orr.w	r3, r3, #4
 8001780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001782:	4b28      	ldr	r3, [pc, #160]	; (8001824 <MX_GPIO_Init+0xc4>)
 8001784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001786:	f003 0304 	and.w	r3, r3, #4
 800178a:	613b      	str	r3, [r7, #16]
 800178c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800178e:	4b25      	ldr	r3, [pc, #148]	; (8001824 <MX_GPIO_Init+0xc4>)
 8001790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001792:	4a24      	ldr	r2, [pc, #144]	; (8001824 <MX_GPIO_Init+0xc4>)
 8001794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800179a:	4b22      	ldr	r3, [pc, #136]	; (8001824 <MX_GPIO_Init+0xc4>)
 800179c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a6:	4b1f      	ldr	r3, [pc, #124]	; (8001824 <MX_GPIO_Init+0xc4>)
 80017a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017aa:	4a1e      	ldr	r2, [pc, #120]	; (8001824 <MX_GPIO_Init+0xc4>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017b2:	4b1c      	ldr	r3, [pc, #112]	; (8001824 <MX_GPIO_Init+0xc4>)
 80017b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017be:	4b19      	ldr	r3, [pc, #100]	; (8001824 <MX_GPIO_Init+0xc4>)
 80017c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c2:	4a18      	ldr	r2, [pc, #96]	; (8001824 <MX_GPIO_Init+0xc4>)
 80017c4:	f043 0302 	orr.w	r3, r3, #2
 80017c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ca:	4b16      	ldr	r3, [pc, #88]	; (8001824 <MX_GPIO_Init+0xc4>)
 80017cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2120      	movs	r1, #32
 80017da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017de:	f002 ffe7 	bl	80047b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RES_BUTTON_Pin */
  GPIO_InitStruct.Pin = RES_BUTTON_Pin;
 80017e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017e8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80017ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017ee:	2302      	movs	r3, #2
 80017f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RES_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80017f2:	f107 0314 	add.w	r3, r7, #20
 80017f6:	4619      	mov	r1, r3
 80017f8:	480b      	ldr	r0, [pc, #44]	; (8001828 <MX_GPIO_Init+0xc8>)
 80017fa:	f002 fe17 	bl	800442c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80017fe:	2320      	movs	r3, #32
 8001800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001802:	2301      	movs	r3, #1
 8001804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180a:	2300      	movs	r3, #0
 800180c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800180e:	f107 0314 	add.w	r3, r7, #20
 8001812:	4619      	mov	r1, r3
 8001814:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001818:	f002 fe08 	bl	800442c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800181c:	bf00      	nop
 800181e:	3728      	adds	r7, #40	; 0x28
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40021000 	.word	0x40021000
 8001828:	48000800 	.word	0x48000800

0800182c <HAL_CAN_TxMailbox0CompleteCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	value_2++;
 8001834:	4b05      	ldr	r3, [pc, #20]	; (800184c <HAL_CAN_TxMailbox0CompleteCallback+0x20>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	3301      	adds	r3, #1
 800183a:	4a04      	ldr	r2, [pc, #16]	; (800184c <HAL_CAN_TxMailbox0CompleteCallback+0x20>)
 800183c:	6013      	str	r3, [r2, #0]
	//printf("Tx %d \r\n", value);

}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	20000488 	.word	0x20000488

08001850 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(&hcan1,CAN_RX_FIFO0,&RxHeader,RxData);
 8001858:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 800185a:	4a10      	ldr	r2, [pc, #64]	; (800189c <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 800185c:	2100      	movs	r1, #0
 800185e:	4810      	ldr	r0, [pc, #64]	; (80018a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8001860:	f002 f965 	bl	8003b2e <HAL_CAN_GetRxMessage>

	// Print raw data
	print_raw_data(RxData);
 8001864:	480c      	ldr	r0, [pc, #48]	; (8001898 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8001866:	f7ff fb1d 	bl	8000ea4 <print_raw_data>

	// Process received command, emulating a motor receiving the command (for debugging purposes)
	//cubemars_get_can_cmd4debug(RxData);

	// Light LD2 based on received data (for confirming connection)
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, !RxData[3]);
 800186a:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 800186c:	78db      	ldrb	r3, [r3, #3]
 800186e:	2b00      	cmp	r3, #0
 8001870:	bf0c      	ite	eq
 8001872:	2301      	moveq	r3, #1
 8001874:	2300      	movne	r3, #0
 8001876:	b2db      	uxtb	r3, r3
 8001878:	461a      	mov	r2, r3
 800187a:	2120      	movs	r1, #32
 800187c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001880:	f002 ff96 	bl	80047b0 <HAL_GPIO_WritePin>

	value++;
 8001884:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	3301      	adds	r3, #1
 800188a:	4a06      	ldr	r2, [pc, #24]	; (80018a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 800188c:	6013      	str	r3, [r2, #0]
	//printf("Rx %d \r\n", value);
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	200004f8 	.word	0x200004f8
 800189c:	200004d4 	.word	0x200004d4
 80018a0:	20000258 	.word	0x20000258
 80018a4:	20000484 	.word	0x20000484

080018a8 <__io_putchar>:


PUTCHAR_PROTOTYPE
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80018b0:	1d39      	adds	r1, r7, #4
 80018b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018b6:	2201      	movs	r2, #1
 80018b8:	4803      	ldr	r0, [pc, #12]	; (80018c8 <__io_putchar+0x20>)
 80018ba:	f004 fd1f 	bl	80062fc <HAL_UART_Transmit>

  return ch;
 80018be:	687b      	ldr	r3, [r7, #4]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	200003fc 	.word	0x200003fc

080018cc <map>:

long map(long x, long in_min, long in_max, long out_min, long out_max) {
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
 80018d8:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	69b9      	ldr	r1, [r7, #24]
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	1a8a      	subs	r2, r1, r2
 80018e6:	fb03 f202 	mul.w	r2, r3, r2
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	1acb      	subs	r3, r1, r3
 80018f0:	fb92 f2f3 	sdiv	r2, r2, r3
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	4413      	add	r3, r2
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001908:	b672      	cpsid	i
}
 800190a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800190c:	e7fe      	b.n	800190c <Error_Handler+0x8>
	...

08001910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001916:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <HAL_MspInit+0x44>)
 8001918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800191a:	4a0e      	ldr	r2, [pc, #56]	; (8001954 <HAL_MspInit+0x44>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	6613      	str	r3, [r2, #96]	; 0x60
 8001922:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <HAL_MspInit+0x44>)
 8001924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	607b      	str	r3, [r7, #4]
 800192c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800192e:	4b09      	ldr	r3, [pc, #36]	; (8001954 <HAL_MspInit+0x44>)
 8001930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001932:	4a08      	ldr	r2, [pc, #32]	; (8001954 <HAL_MspInit+0x44>)
 8001934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001938:	6593      	str	r3, [r2, #88]	; 0x58
 800193a:	4b06      	ldr	r3, [pc, #24]	; (8001954 <HAL_MspInit+0x44>)
 800193c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001942:	603b      	str	r3, [r7, #0]
 8001944:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	40021000 	.word	0x40021000

08001958 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b0ac      	sub	sp, #176	; 0xb0
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	2288      	movs	r2, #136	; 0x88
 8001976:	2100      	movs	r1, #0
 8001978:	4618      	mov	r0, r3
 800197a:	f005 ffad 	bl	80078d8 <memset>
  if(hadc->Instance==ADC1)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a27      	ldr	r2, [pc, #156]	; (8001a20 <HAL_ADC_MspInit+0xc8>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d146      	bne.n	8001a16 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001988:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800198c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800198e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001992:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001996:	2302      	movs	r3, #2
 8001998:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800199a:	2301      	movs	r3, #1
 800199c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800199e:	2308      	movs	r3, #8
 80019a0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80019a2:	2307      	movs	r3, #7
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80019a6:	2302      	movs	r3, #2
 80019a8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80019aa:	2302      	movs	r3, #2
 80019ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80019ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019b2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	4618      	mov	r0, r3
 80019ba:	f003 fd75 	bl	80054a8 <HAL_RCCEx_PeriphCLKConfig>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80019c4:	f7ff ff9e 	bl	8001904 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80019c8:	4b16      	ldr	r3, [pc, #88]	; (8001a24 <HAL_ADC_MspInit+0xcc>)
 80019ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019cc:	4a15      	ldr	r2, [pc, #84]	; (8001a24 <HAL_ADC_MspInit+0xcc>)
 80019ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019d4:	4b13      	ldr	r3, [pc, #76]	; (8001a24 <HAL_ADC_MspInit+0xcc>)
 80019d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019dc:	613b      	str	r3, [r7, #16]
 80019de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e0:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <HAL_ADC_MspInit+0xcc>)
 80019e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e4:	4a0f      	ldr	r2, [pc, #60]	; (8001a24 <HAL_ADC_MspInit+0xcc>)
 80019e6:	f043 0304 	orr.w	r3, r3, #4
 80019ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ec:	4b0d      	ldr	r3, [pc, #52]	; (8001a24 <HAL_ADC_MspInit+0xcc>)
 80019ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = Potentiometer_Pin;
 80019f8:	2301      	movs	r3, #1
 80019fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80019fe:	230b      	movs	r3, #11
 8001a00:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(Potentiometer_GPIO_Port, &GPIO_InitStruct);
 8001a0a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4805      	ldr	r0, [pc, #20]	; (8001a28 <HAL_ADC_MspInit+0xd0>)
 8001a12:	f002 fd0b 	bl	800442c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a16:	bf00      	nop
 8001a18:	37b0      	adds	r7, #176	; 0xb0
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	50040000 	.word	0x50040000
 8001a24:	40021000 	.word	0x40021000
 8001a28:	48000800 	.word	0x48000800

08001a2c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08a      	sub	sp, #40	; 0x28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	f107 0314 	add.w	r3, r7, #20
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a1f      	ldr	r2, [pc, #124]	; (8001ac8 <HAL_CAN_MspInit+0x9c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d138      	bne.n	8001ac0 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001a4e:	4b1f      	ldr	r3, [pc, #124]	; (8001acc <HAL_CAN_MspInit+0xa0>)
 8001a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a52:	4a1e      	ldr	r2, [pc, #120]	; (8001acc <HAL_CAN_MspInit+0xa0>)
 8001a54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a58:	6593      	str	r3, [r2, #88]	; 0x58
 8001a5a:	4b1c      	ldr	r3, [pc, #112]	; (8001acc <HAL_CAN_MspInit+0xa0>)
 8001a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a66:	4b19      	ldr	r3, [pc, #100]	; (8001acc <HAL_CAN_MspInit+0xa0>)
 8001a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6a:	4a18      	ldr	r2, [pc, #96]	; (8001acc <HAL_CAN_MspInit+0xa0>)
 8001a6c:	f043 0302 	orr.w	r3, r3, #2
 8001a70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a72:	4b16      	ldr	r3, [pc, #88]	; (8001acc <HAL_CAN_MspInit+0xa0>)
 8001a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a84:	2302      	movs	r3, #2
 8001a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001a90:	2309      	movs	r3, #9
 8001a92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	4619      	mov	r1, r3
 8001a9a:	480d      	ldr	r0, [pc, #52]	; (8001ad0 <HAL_CAN_MspInit+0xa4>)
 8001a9c:	f002 fcc6 	bl	800442c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	2014      	movs	r0, #20
 8001aa6:	f002 fc8a 	bl	80043be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001aaa:	2014      	movs	r0, #20
 8001aac:	f002 fca3 	bl	80043f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	2015      	movs	r0, #21
 8001ab6:	f002 fc82 	bl	80043be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001aba:	2015      	movs	r0, #21
 8001abc:	f002 fc9b 	bl	80043f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001ac0:	bf00      	nop
 8001ac2:	3728      	adds	r7, #40	; 0x28
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40006400 	.word	0x40006400
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	48000400 	.word	0x48000400

08001ad4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b090      	sub	sp, #64	; 0x40
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001af4:	d129      	bne.n	8001b4a <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001af6:	4b5c      	ldr	r3, [pc, #368]	; (8001c68 <HAL_TIM_Encoder_MspInit+0x194>)
 8001af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afa:	4a5b      	ldr	r2, [pc, #364]	; (8001c68 <HAL_TIM_Encoder_MspInit+0x194>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	6593      	str	r3, [r2, #88]	; 0x58
 8001b02:	4b59      	ldr	r3, [pc, #356]	; (8001c68 <HAL_TIM_Encoder_MspInit+0x194>)
 8001b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0e:	4b56      	ldr	r3, [pc, #344]	; (8001c68 <HAL_TIM_Encoder_MspInit+0x194>)
 8001b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b12:	4a55      	ldr	r2, [pc, #340]	; (8001c68 <HAL_TIM_Encoder_MspInit+0x194>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b1a:	4b53      	ldr	r3, [pc, #332]	; (8001c68 <HAL_TIM_Encoder_MspInit+0x194>)
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b26:	2303      	movs	r3, #3
 8001b28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b32:	2300      	movs	r3, #0
 8001b34:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b36:	2301      	movs	r3, #1
 8001b38:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b3e:	4619      	mov	r1, r3
 8001b40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b44:	f002 fc72 	bl	800442c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001b48:	e089      	b.n	8001c5e <HAL_TIM_Encoder_MspInit+0x18a>
  else if(htim_encoder->Instance==TIM3)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a47      	ldr	r2, [pc, #284]	; (8001c6c <HAL_TIM_Encoder_MspInit+0x198>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d129      	bne.n	8001ba8 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b54:	4b44      	ldr	r3, [pc, #272]	; (8001c68 <HAL_TIM_Encoder_MspInit+0x194>)
 8001b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b58:	4a43      	ldr	r2, [pc, #268]	; (8001c68 <HAL_TIM_Encoder_MspInit+0x194>)
 8001b5a:	f043 0302 	orr.w	r3, r3, #2
 8001b5e:	6593      	str	r3, [r2, #88]	; 0x58
 8001b60:	4b41      	ldr	r3, [pc, #260]	; (8001c68 <HAL_TIM_Encoder_MspInit+0x194>)
 8001b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	623b      	str	r3, [r7, #32]
 8001b6a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6c:	4b3e      	ldr	r3, [pc, #248]	; (8001c68 <HAL_TIM_Encoder_MspInit+0x194>)
 8001b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b70:	4a3d      	ldr	r2, [pc, #244]	; (8001c68 <HAL_TIM_Encoder_MspInit+0x194>)
 8001b72:	f043 0301 	orr.w	r3, r3, #1
 8001b76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b78:	4b3b      	ldr	r3, [pc, #236]	; (8001c68 <HAL_TIM_Encoder_MspInit+0x194>)
 8001b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	61fb      	str	r3, [r7, #28]
 8001b82:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b84:	23c0      	movs	r3, #192	; 0xc0
 8001b86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b90:	2300      	movs	r3, #0
 8001b92:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b94:	2302      	movs	r3, #2
 8001b96:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ba2:	f002 fc43 	bl	800442c <HAL_GPIO_Init>
}
 8001ba6:	e05a      	b.n	8001c5e <HAL_TIM_Encoder_MspInit+0x18a>
  else if(htim_encoder->Instance==TIM4)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a30      	ldr	r2, [pc, #192]	; (8001c70 <HAL_TIM_Encoder_MspInit+0x19c>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d128      	bne.n	8001c04 <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001bb2:	4b2d      	ldr	r3, [pc, #180]	; (8001c68 <HAL_TIM_Encoder_MspInit+0x194>)
 8001bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb6:	4a2c      	ldr	r2, [pc, #176]	; (8001c68 <HAL_TIM_Encoder_MspInit+0x194>)
 8001bb8:	f043 0304 	orr.w	r3, r3, #4
 8001bbc:	6593      	str	r3, [r2, #88]	; 0x58
 8001bbe:	4b2a      	ldr	r3, [pc, #168]	; (8001c68 <HAL_TIM_Encoder_MspInit+0x194>)
 8001bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc2:	f003 0304 	and.w	r3, r3, #4
 8001bc6:	61bb      	str	r3, [r7, #24]
 8001bc8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bca:	4b27      	ldr	r3, [pc, #156]	; (8001c68 <HAL_TIM_Encoder_MspInit+0x194>)
 8001bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bce:	4a26      	ldr	r2, [pc, #152]	; (8001c68 <HAL_TIM_Encoder_MspInit+0x194>)
 8001bd0:	f043 0302 	orr.w	r3, r3, #2
 8001bd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bd6:	4b24      	ldr	r3, [pc, #144]	; (8001c68 <HAL_TIM_Encoder_MspInit+0x194>)
 8001bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	617b      	str	r3, [r7, #20]
 8001be0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001be2:	23c0      	movs	r3, #192	; 0xc0
 8001be4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be6:	2302      	movs	r3, #2
 8001be8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	481d      	ldr	r0, [pc, #116]	; (8001c74 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8001bfe:	f002 fc15 	bl	800442c <HAL_GPIO_Init>
}
 8001c02:	e02c      	b.n	8001c5e <HAL_TIM_Encoder_MspInit+0x18a>
  else if(htim_encoder->Instance==TIM8)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a1b      	ldr	r2, [pc, #108]	; (8001c78 <HAL_TIM_Encoder_MspInit+0x1a4>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d127      	bne.n	8001c5e <HAL_TIM_Encoder_MspInit+0x18a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001c0e:	4b16      	ldr	r3, [pc, #88]	; (8001c68 <HAL_TIM_Encoder_MspInit+0x194>)
 8001c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c12:	4a15      	ldr	r2, [pc, #84]	; (8001c68 <HAL_TIM_Encoder_MspInit+0x194>)
 8001c14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c18:	6613      	str	r3, [r2, #96]	; 0x60
 8001c1a:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <HAL_TIM_Encoder_MspInit+0x194>)
 8001c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c26:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <HAL_TIM_Encoder_MspInit+0x194>)
 8001c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2a:	4a0f      	ldr	r2, [pc, #60]	; (8001c68 <HAL_TIM_Encoder_MspInit+0x194>)
 8001c2c:	f043 0304 	orr.w	r3, r3, #4
 8001c30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c32:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <HAL_TIM_Encoder_MspInit+0x194>)
 8001c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c36:	f003 0304 	and.w	r3, r3, #4
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c3e:	23c0      	movs	r3, #192	; 0xc0
 8001c40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c42:	2302      	movs	r3, #2
 8001c44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c56:	4619      	mov	r1, r3
 8001c58:	4808      	ldr	r0, [pc, #32]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x1a8>)
 8001c5a:	f002 fbe7 	bl	800442c <HAL_GPIO_Init>
}
 8001c5e:	bf00      	nop
 8001c60:	3740      	adds	r7, #64	; 0x40
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	40000400 	.word	0x40000400
 8001c70:	40000800 	.word	0x40000800
 8001c74:	48000400 	.word	0x48000400
 8001c78:	40013400 	.word	0x40013400
 8001c7c:	48000800 	.word	0x48000800

08001c80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a0a      	ldr	r2, [pc, #40]	; (8001cb8 <HAL_TIM_Base_MspInit+0x38>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d10b      	bne.n	8001caa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001c92:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <HAL_TIM_Base_MspInit+0x3c>)
 8001c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c96:	4a09      	ldr	r2, [pc, #36]	; (8001cbc <HAL_TIM_Base_MspInit+0x3c>)
 8001c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c9c:	6613      	str	r3, [r2, #96]	; 0x60
 8001c9e:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <HAL_TIM_Base_MspInit+0x3c>)
 8001ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001caa:	bf00      	nop
 8001cac:	3714      	adds	r7, #20
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	40014400 	.word	0x40014400
 8001cbc:	40021000 	.word	0x40021000

08001cc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b0ac      	sub	sp, #176	; 0xb0
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cd8:	f107 0314 	add.w	r3, r7, #20
 8001cdc:	2288      	movs	r2, #136	; 0x88
 8001cde:	2100      	movs	r1, #0
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f005 fdf9 	bl	80078d8 <memset>
  if(huart->Instance==USART2)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a21      	ldr	r2, [pc, #132]	; (8001d70 <HAL_UART_MspInit+0xb0>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d13b      	bne.n	8001d68 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f003 fbd3 	bl	80054a8 <HAL_RCCEx_PeriphCLKConfig>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d08:	f7ff fdfc 	bl	8001904 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d0c:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <HAL_UART_MspInit+0xb4>)
 8001d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d10:	4a18      	ldr	r2, [pc, #96]	; (8001d74 <HAL_UART_MspInit+0xb4>)
 8001d12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d16:	6593      	str	r3, [r2, #88]	; 0x58
 8001d18:	4b16      	ldr	r3, [pc, #88]	; (8001d74 <HAL_UART_MspInit+0xb4>)
 8001d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d20:	613b      	str	r3, [r7, #16]
 8001d22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d24:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <HAL_UART_MspInit+0xb4>)
 8001d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d28:	4a12      	ldr	r2, [pc, #72]	; (8001d74 <HAL_UART_MspInit+0xb4>)
 8001d2a:	f043 0301 	orr.w	r3, r3, #1
 8001d2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d30:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <HAL_UART_MspInit+0xb4>)
 8001d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d3c:	230c      	movs	r3, #12
 8001d3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d42:	2302      	movs	r3, #2
 8001d44:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d54:	2307      	movs	r3, #7
 8001d56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d5e:	4619      	mov	r1, r3
 8001d60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d64:	f002 fb62 	bl	800442c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d68:	bf00      	nop
 8001d6a:	37b0      	adds	r7, #176	; 0xb0
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40004400 	.word	0x40004400
 8001d74:	40021000 	.word	0x40021000

08001d78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d7c:	e7fe      	b.n	8001d7c <NMI_Handler+0x4>

08001d7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d82:	e7fe      	b.n	8001d82 <HardFault_Handler+0x4>

08001d84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d88:	e7fe      	b.n	8001d88 <MemManage_Handler+0x4>

08001d8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d8e:	e7fe      	b.n	8001d8e <BusFault_Handler+0x4>

08001d90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d94:	e7fe      	b.n	8001d94 <UsageFault_Handler+0x4>

08001d96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001db2:	b480      	push	{r7}
 8001db4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dc4:	f000 f974 	bl	80020b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001dd0:	4802      	ldr	r0, [pc, #8]	; (8001ddc <CAN1_RX0_IRQHandler+0x10>)
 8001dd2:	f001 fff4 	bl	8003dbe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000258 	.word	0x20000258

08001de0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001de4:	4802      	ldr	r0, [pc, #8]	; (8001df0 <CAN1_RX1_IRQHandler+0x10>)
 8001de6:	f001 ffea 	bl	8003dbe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000258 	.word	0x20000258

08001df4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return 1;
 8001df8:	2301      	movs	r3, #1
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <_kill>:

int _kill(int pid, int sig)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e0e:	f005 fd6f 	bl	80078f0 <__errno>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2216      	movs	r2, #22
 8001e16:	601a      	str	r2, [r3, #0]
  return -1;
 8001e18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <_exit>:

void _exit (int status)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7ff ffe7 	bl	8001e04 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e36:	e7fe      	b.n	8001e36 <_exit+0x12>

08001e38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e44:	2300      	movs	r3, #0
 8001e46:	617b      	str	r3, [r7, #20]
 8001e48:	e00a      	b.n	8001e60 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e4a:	f3af 8000 	nop.w
 8001e4e:	4601      	mov	r1, r0
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	1c5a      	adds	r2, r3, #1
 8001e54:	60ba      	str	r2, [r7, #8]
 8001e56:	b2ca      	uxtb	r2, r1
 8001e58:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	617b      	str	r3, [r7, #20]
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	dbf0      	blt.n	8001e4a <_read+0x12>
  }

  return len;
 8001e68:	687b      	ldr	r3, [r7, #4]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b086      	sub	sp, #24
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	60f8      	str	r0, [r7, #12]
 8001e7a:	60b9      	str	r1, [r7, #8]
 8001e7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
 8001e82:	e009      	b.n	8001e98 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	1c5a      	adds	r2, r3, #1
 8001e88:	60ba      	str	r2, [r7, #8]
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff fd0b 	bl	80018a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	3301      	adds	r3, #1
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	dbf1      	blt.n	8001e84 <_write+0x12>
  }
  return len;
 8001ea0:	687b      	ldr	r3, [r7, #4]
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3718      	adds	r7, #24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <_close>:

int _close(int file)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b083      	sub	sp, #12
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001eb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
 8001eca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ed2:	605a      	str	r2, [r3, #4]
  return 0;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <_isatty>:

int _isatty(int file)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001eea:	2301      	movs	r3, #1
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
	...

08001f14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f1c:	4a14      	ldr	r2, [pc, #80]	; (8001f70 <_sbrk+0x5c>)
 8001f1e:	4b15      	ldr	r3, [pc, #84]	; (8001f74 <_sbrk+0x60>)
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f28:	4b13      	ldr	r3, [pc, #76]	; (8001f78 <_sbrk+0x64>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d102      	bne.n	8001f36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f30:	4b11      	ldr	r3, [pc, #68]	; (8001f78 <_sbrk+0x64>)
 8001f32:	4a12      	ldr	r2, [pc, #72]	; (8001f7c <_sbrk+0x68>)
 8001f34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f36:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <_sbrk+0x64>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d207      	bcs.n	8001f54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f44:	f005 fcd4 	bl	80078f0 <__errno>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	220c      	movs	r2, #12
 8001f4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f52:	e009      	b.n	8001f68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f54:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <_sbrk+0x64>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f5a:	4b07      	ldr	r3, [pc, #28]	; (8001f78 <_sbrk+0x64>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4413      	add	r3, r2
 8001f62:	4a05      	ldr	r2, [pc, #20]	; (8001f78 <_sbrk+0x64>)
 8001f64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f66:	68fb      	ldr	r3, [r7, #12]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	20018000 	.word	0x20018000
 8001f74:	00000400 	.word	0x00000400
 8001f78:	20000508 	.word	0x20000508
 8001f7c:	20000660 	.word	0x20000660

08001f80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f84:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <SystemInit+0x20>)
 8001f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f8a:	4a05      	ldr	r2, [pc, #20]	; (8001fa0 <SystemInit+0x20>)
 8001f8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001fa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fdc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fa8:	f7ff ffea 	bl	8001f80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fac:	480c      	ldr	r0, [pc, #48]	; (8001fe0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fae:	490d      	ldr	r1, [pc, #52]	; (8001fe4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fb0:	4a0d      	ldr	r2, [pc, #52]	; (8001fe8 <LoopForever+0xe>)
  movs r3, #0
 8001fb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fb4:	e002      	b.n	8001fbc <LoopCopyDataInit>

08001fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fba:	3304      	adds	r3, #4

08001fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fc0:	d3f9      	bcc.n	8001fb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fc2:	4a0a      	ldr	r2, [pc, #40]	; (8001fec <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fc4:	4c0a      	ldr	r4, [pc, #40]	; (8001ff0 <LoopForever+0x16>)
  movs r3, #0
 8001fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fc8:	e001      	b.n	8001fce <LoopFillZerobss>

08001fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fcc:	3204      	adds	r2, #4

08001fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fd0:	d3fb      	bcc.n	8001fca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fd2:	f005 fc93 	bl	80078fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fd6:	f7fe ff99 	bl	8000f0c <main>

08001fda <LoopForever>:

LoopForever:
    b LoopForever
 8001fda:	e7fe      	b.n	8001fda <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001fdc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001fe0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fe4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001fe8:	08009f84 	.word	0x08009f84
  ldr r2, =_sbss
 8001fec:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001ff0:	2000065c 	.word	0x2000065c

08001ff4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ff4:	e7fe      	b.n	8001ff4 <ADC1_2_IRQHandler>
	...

08001ff8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ffe:	2300      	movs	r3, #0
 8002000:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002002:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <HAL_Init+0x3c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a0b      	ldr	r2, [pc, #44]	; (8002034 <HAL_Init+0x3c>)
 8002008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800200c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800200e:	2003      	movs	r0, #3
 8002010:	f002 f9ca 	bl	80043a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002014:	2000      	movs	r0, #0
 8002016:	f000 f80f 	bl	8002038 <HAL_InitTick>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d002      	beq.n	8002026 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	71fb      	strb	r3, [r7, #7]
 8002024:	e001      	b.n	800202a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002026:	f7ff fc73 	bl	8001910 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800202a:	79fb      	ldrb	r3, [r7, #7]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40022000 	.word	0x40022000

08002038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002040:	2300      	movs	r3, #0
 8002042:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002044:	4b17      	ldr	r3, [pc, #92]	; (80020a4 <HAL_InitTick+0x6c>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d023      	beq.n	8002094 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800204c:	4b16      	ldr	r3, [pc, #88]	; (80020a8 <HAL_InitTick+0x70>)
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	4b14      	ldr	r3, [pc, #80]	; (80020a4 <HAL_InitTick+0x6c>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	4619      	mov	r1, r3
 8002056:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800205a:	fbb3 f3f1 	udiv	r3, r3, r1
 800205e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002062:	4618      	mov	r0, r3
 8002064:	f002 f9d5 	bl	8004412 <HAL_SYSTICK_Config>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d10f      	bne.n	800208e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b0f      	cmp	r3, #15
 8002072:	d809      	bhi.n	8002088 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002074:	2200      	movs	r2, #0
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800207c:	f002 f99f 	bl	80043be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002080:	4a0a      	ldr	r2, [pc, #40]	; (80020ac <HAL_InitTick+0x74>)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6013      	str	r3, [r2, #0]
 8002086:	e007      	b.n	8002098 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	73fb      	strb	r3, [r7, #15]
 800208c:	e004      	b.n	8002098 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	73fb      	strb	r3, [r7, #15]
 8002092:	e001      	b.n	8002098 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002098:	7bfb      	ldrb	r3, [r7, #15]
}
 800209a:	4618      	mov	r0, r3
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	2000000c 	.word	0x2000000c
 80020a8:	20000004 	.word	0x20000004
 80020ac:	20000008 	.word	0x20000008

080020b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020b4:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <HAL_IncTick+0x20>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	461a      	mov	r2, r3
 80020ba:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <HAL_IncTick+0x24>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4413      	add	r3, r2
 80020c0:	4a04      	ldr	r2, [pc, #16]	; (80020d4 <HAL_IncTick+0x24>)
 80020c2:	6013      	str	r3, [r2, #0]
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	2000000c 	.word	0x2000000c
 80020d4:	2000050c 	.word	0x2000050c

080020d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return uwTick;
 80020dc:	4b03      	ldr	r3, [pc, #12]	; (80020ec <HAL_GetTick+0x14>)
 80020de:	681b      	ldr	r3, [r3, #0]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	2000050c 	.word	0x2000050c

080020f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020f8:	f7ff ffee 	bl	80020d8 <HAL_GetTick>
 80020fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002108:	d005      	beq.n	8002116 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800210a:	4b0a      	ldr	r3, [pc, #40]	; (8002134 <HAL_Delay+0x44>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	461a      	mov	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4413      	add	r3, r2
 8002114:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002116:	bf00      	nop
 8002118:	f7ff ffde 	bl	80020d8 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	429a      	cmp	r2, r3
 8002126:	d8f7      	bhi.n	8002118 <HAL_Delay+0x28>
  {
  }
}
 8002128:	bf00      	nop
 800212a:	bf00      	nop
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	2000000c 	.word	0x2000000c

08002138 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	431a      	orrs	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	609a      	str	r2, [r3, #8]
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
 8002166:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	609a      	str	r2, [r3, #8]
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002194:	4618      	mov	r0, r3
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b087      	sub	sp, #28
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
 80021ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	3360      	adds	r3, #96	; 0x60
 80021b2:	461a      	mov	r2, r3
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	4b08      	ldr	r3, [pc, #32]	; (80021e4 <LL_ADC_SetOffset+0x44>)
 80021c2:	4013      	ands	r3, r2
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	4313      	orrs	r3, r2
 80021d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80021d8:	bf00      	nop
 80021da:	371c      	adds	r7, #28
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	03fff000 	.word	0x03fff000

080021e8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3360      	adds	r3, #96	; 0x60
 80021f6:	461a      	mov	r2, r3
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4413      	add	r3, r2
 80021fe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002208:	4618      	mov	r0, r3
 800220a:	3714      	adds	r7, #20
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002214:	b480      	push	{r7}
 8002216:	b087      	sub	sp, #28
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	3360      	adds	r3, #96	; 0x60
 8002224:	461a      	mov	r2, r3
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	431a      	orrs	r2, r3
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800223e:	bf00      	nop
 8002240:	371c      	adds	r7, #28
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800225e:	2301      	movs	r3, #1
 8002260:	e000      	b.n	8002264 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002270:	b480      	push	{r7}
 8002272:	b087      	sub	sp, #28
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	3330      	adds	r3, #48	; 0x30
 8002280:	461a      	mov	r2, r3
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	0a1b      	lsrs	r3, r3, #8
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	f003 030c 	and.w	r3, r3, #12
 800228c:	4413      	add	r3, r2
 800228e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	f003 031f 	and.w	r3, r3, #31
 800229a:	211f      	movs	r1, #31
 800229c:	fa01 f303 	lsl.w	r3, r1, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	401a      	ands	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	0e9b      	lsrs	r3, r3, #26
 80022a8:	f003 011f 	and.w	r1, r3, #31
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	f003 031f 	and.w	r3, r3, #31
 80022b2:	fa01 f303 	lsl.w	r3, r1, r3
 80022b6:	431a      	orrs	r2, r3
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80022bc:	bf00      	nop
 80022be:	371c      	adds	r7, #28
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b087      	sub	sp, #28
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	3314      	adds	r3, #20
 80022d8:	461a      	mov	r2, r3
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	0e5b      	lsrs	r3, r3, #25
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	4413      	add	r3, r2
 80022e6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	0d1b      	lsrs	r3, r3, #20
 80022f0:	f003 031f 	and.w	r3, r3, #31
 80022f4:	2107      	movs	r1, #7
 80022f6:	fa01 f303 	lsl.w	r3, r1, r3
 80022fa:	43db      	mvns	r3, r3
 80022fc:	401a      	ands	r2, r3
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	0d1b      	lsrs	r3, r3, #20
 8002302:	f003 031f 	and.w	r3, r3, #31
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	fa01 f303 	lsl.w	r3, r1, r3
 800230c:	431a      	orrs	r2, r3
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002312:	bf00      	nop
 8002314:	371c      	adds	r7, #28
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
	...

08002320 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002338:	43db      	mvns	r3, r3
 800233a:	401a      	ands	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f003 0318 	and.w	r3, r3, #24
 8002342:	4908      	ldr	r1, [pc, #32]	; (8002364 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002344:	40d9      	lsrs	r1, r3
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	400b      	ands	r3, r1
 800234a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800234e:	431a      	orrs	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002356:	bf00      	nop
 8002358:	3714      	adds	r7, #20
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	0007ffff 	.word	0x0007ffff

08002368 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 031f 	and.w	r3, r3, #31
}
 8002378:	4618      	mov	r0, r3
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002394:	4618      	mov	r0, r3
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80023b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	6093      	str	r3, [r2, #8]
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023d8:	d101      	bne.n	80023de <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80023da:	2301      	movs	r3, #1
 80023dc:	e000      	b.n	80023e0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80023fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002400:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002424:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002428:	d101      	bne.n	800242e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800242a:	2301      	movs	r3, #1
 800242c:	e000      	b.n	8002430 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800244c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002450:	f043 0201 	orr.w	r2, r3, #1
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	2b01      	cmp	r3, #1
 8002476:	d101      	bne.n	800247c <LL_ADC_IsEnabled+0x18>
 8002478:	2301      	movs	r3, #1
 800247a:	e000      	b.n	800247e <LL_ADC_IsEnabled+0x1a>
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800249a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800249e:	f043 0204 	orr.w	r2, r3, #4
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 0304 	and.w	r3, r3, #4
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d101      	bne.n	80024ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 0308 	and.w	r3, r3, #8
 80024e8:	2b08      	cmp	r3, #8
 80024ea:	d101      	bne.n	80024f0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80024ec:	2301      	movs	r3, #1
 80024ee:	e000      	b.n	80024f2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
	...

08002500 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002500:	b590      	push	{r4, r7, lr}
 8002502:	b089      	sub	sp, #36	; 0x24
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002508:	2300      	movs	r3, #0
 800250a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800250c:	2300      	movs	r3, #0
 800250e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e130      	b.n	800277c <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002524:	2b00      	cmp	r3, #0
 8002526:	d109      	bne.n	800253c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f7ff fa15 	bl	8001958 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff ff3f 	bl	80023c4 <LL_ADC_IsDeepPowerDownEnabled>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d004      	beq.n	8002556 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff ff25 	bl	80023a0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff ff5a 	bl	8002414 <LL_ADC_IsInternalRegulatorEnabled>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d115      	bne.n	8002592 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff ff3e 	bl	80023ec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002570:	4b84      	ldr	r3, [pc, #528]	; (8002784 <HAL_ADC_Init+0x284>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	099b      	lsrs	r3, r3, #6
 8002576:	4a84      	ldr	r2, [pc, #528]	; (8002788 <HAL_ADC_Init+0x288>)
 8002578:	fba2 2303 	umull	r2, r3, r2, r3
 800257c:	099b      	lsrs	r3, r3, #6
 800257e:	3301      	adds	r3, #1
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002584:	e002      	b.n	800258c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	3b01      	subs	r3, #1
 800258a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1f9      	bne.n	8002586 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff ff3c 	bl	8002414 <LL_ADC_IsInternalRegulatorEnabled>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10d      	bne.n	80025be <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a6:	f043 0210 	orr.w	r2, r3, #16
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b2:	f043 0201 	orr.w	r2, r3, #1
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff ff75 	bl	80024b2 <LL_ADC_REG_IsConversionOngoing>
 80025c8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ce:	f003 0310 	and.w	r3, r3, #16
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f040 80c9 	bne.w	800276a <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f040 80c5 	bne.w	800276a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80025e8:	f043 0202 	orr.w	r2, r3, #2
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff ff35 	bl	8002464 <LL_ADC_IsEnabled>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d115      	bne.n	800262c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002600:	4862      	ldr	r0, [pc, #392]	; (800278c <HAL_ADC_Init+0x28c>)
 8002602:	f7ff ff2f 	bl	8002464 <LL_ADC_IsEnabled>
 8002606:	4604      	mov	r4, r0
 8002608:	4861      	ldr	r0, [pc, #388]	; (8002790 <HAL_ADC_Init+0x290>)
 800260a:	f7ff ff2b 	bl	8002464 <LL_ADC_IsEnabled>
 800260e:	4603      	mov	r3, r0
 8002610:	431c      	orrs	r4, r3
 8002612:	4860      	ldr	r0, [pc, #384]	; (8002794 <HAL_ADC_Init+0x294>)
 8002614:	f7ff ff26 	bl	8002464 <LL_ADC_IsEnabled>
 8002618:	4603      	mov	r3, r0
 800261a:	4323      	orrs	r3, r4
 800261c:	2b00      	cmp	r3, #0
 800261e:	d105      	bne.n	800262c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	4619      	mov	r1, r3
 8002626:	485c      	ldr	r0, [pc, #368]	; (8002798 <HAL_ADC_Init+0x298>)
 8002628:	f7ff fd86 	bl	8002138 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	7e5b      	ldrb	r3, [r3, #25]
 8002630:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002636:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800263c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002642:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 3020 	ldrb.w	r3, [r3, #32]
 800264a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800264c:	4313      	orrs	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d106      	bne.n	8002668 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265e:	3b01      	subs	r3, #1
 8002660:	045b      	lsls	r3, r3, #17
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4313      	orrs	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266c:	2b00      	cmp	r3, #0
 800266e:	d009      	beq.n	8002684 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002674:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4313      	orrs	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68da      	ldr	r2, [r3, #12]
 800268a:	4b44      	ldr	r3, [pc, #272]	; (800279c <HAL_ADC_Init+0x29c>)
 800268c:	4013      	ands	r3, r2
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	6812      	ldr	r2, [r2, #0]
 8002692:	69b9      	ldr	r1, [r7, #24]
 8002694:	430b      	orrs	r3, r1
 8002696:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff ff1b 	bl	80024d8 <LL_ADC_INJ_IsConversionOngoing>
 80026a2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d13d      	bne.n	8002726 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d13a      	bne.n	8002726 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80026b4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026bc:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80026be:	4313      	orrs	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026cc:	f023 0302 	bic.w	r3, r3, #2
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	6812      	ldr	r2, [r2, #0]
 80026d4:	69b9      	ldr	r1, [r7, #24]
 80026d6:	430b      	orrs	r3, r1
 80026d8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d118      	bne.n	8002716 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80026ee:	f023 0304 	bic.w	r3, r3, #4
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026fa:	4311      	orrs	r1, r2
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002700:	4311      	orrs	r1, r2
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002706:	430a      	orrs	r2, r1
 8002708:	431a      	orrs	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f042 0201 	orr.w	r2, r2, #1
 8002712:	611a      	str	r2, [r3, #16]
 8002714:	e007      	b.n	8002726 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	691a      	ldr	r2, [r3, #16]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 0201 	bic.w	r2, r2, #1
 8002724:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d10c      	bne.n	8002748 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002734:	f023 010f 	bic.w	r1, r3, #15
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	69db      	ldr	r3, [r3, #28]
 800273c:	1e5a      	subs	r2, r3, #1
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	631a      	str	r2, [r3, #48]	; 0x30
 8002746:	e007      	b.n	8002758 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 020f 	bic.w	r2, r2, #15
 8002756:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275c:	f023 0303 	bic.w	r3, r3, #3
 8002760:	f043 0201 	orr.w	r2, r3, #1
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	655a      	str	r2, [r3, #84]	; 0x54
 8002768:	e007      	b.n	800277a <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276e:	f043 0210 	orr.w	r2, r3, #16
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800277a:	7ffb      	ldrb	r3, [r7, #31]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3724      	adds	r7, #36	; 0x24
 8002780:	46bd      	mov	sp, r7
 8002782:	bd90      	pop	{r4, r7, pc}
 8002784:	20000004 	.word	0x20000004
 8002788:	053e2d63 	.word	0x053e2d63
 800278c:	50040000 	.word	0x50040000
 8002790:	50040100 	.word	0x50040100
 8002794:	50040200 	.word	0x50040200
 8002798:	50040300 	.word	0x50040300
 800279c:	fff0c007 	.word	0xfff0c007

080027a0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027a8:	4857      	ldr	r0, [pc, #348]	; (8002908 <HAL_ADC_Start+0x168>)
 80027aa:	f7ff fddd 	bl	8002368 <LL_ADC_GetMultimode>
 80027ae:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff fe7c 	bl	80024b2 <LL_ADC_REG_IsConversionOngoing>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f040 809c 	bne.w	80028fa <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d101      	bne.n	80027d0 <HAL_ADC_Start+0x30>
 80027cc:	2302      	movs	r3, #2
 80027ce:	e097      	b.n	8002900 <HAL_ADC_Start+0x160>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 fd73 	bl	80032c4 <ADC_Enable>
 80027de:	4603      	mov	r3, r0
 80027e0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80027e2:	7dfb      	ldrb	r3, [r7, #23]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f040 8083 	bne.w	80028f0 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80027f2:	f023 0301 	bic.w	r3, r3, #1
 80027f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a42      	ldr	r2, [pc, #264]	; (800290c <HAL_ADC_Start+0x16c>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d002      	beq.n	800280e <HAL_ADC_Start+0x6e>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	e000      	b.n	8002810 <HAL_ADC_Start+0x70>
 800280e:	4b40      	ldr	r3, [pc, #256]	; (8002910 <HAL_ADC_Start+0x170>)
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6812      	ldr	r2, [r2, #0]
 8002814:	4293      	cmp	r3, r2
 8002816:	d002      	beq.n	800281e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d105      	bne.n	800282a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002822:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002836:	d106      	bne.n	8002846 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283c:	f023 0206 	bic.w	r2, r3, #6
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	659a      	str	r2, [r3, #88]	; 0x58
 8002844:	e002      	b.n	800284c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	221c      	movs	r2, #28
 8002852:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a2a      	ldr	r2, [pc, #168]	; (800290c <HAL_ADC_Start+0x16c>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d002      	beq.n	800286c <HAL_ADC_Start+0xcc>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	e000      	b.n	800286e <HAL_ADC_Start+0xce>
 800286c:	4b28      	ldr	r3, [pc, #160]	; (8002910 <HAL_ADC_Start+0x170>)
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6812      	ldr	r2, [r2, #0]
 8002872:	4293      	cmp	r3, r2
 8002874:	d008      	beq.n	8002888 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d005      	beq.n	8002888 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	2b05      	cmp	r3, #5
 8002880:	d002      	beq.n	8002888 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	2b09      	cmp	r3, #9
 8002886:	d114      	bne.n	80028b2 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d007      	beq.n	80028a6 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800289e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff fded 	bl	800248a <LL_ADC_REG_StartConversion>
 80028b0:	e025      	b.n	80028fe <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a12      	ldr	r2, [pc, #72]	; (800290c <HAL_ADC_Start+0x16c>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d002      	beq.n	80028ce <HAL_ADC_Start+0x12e>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	e000      	b.n	80028d0 <HAL_ADC_Start+0x130>
 80028ce:	4b10      	ldr	r3, [pc, #64]	; (8002910 <HAL_ADC_Start+0x170>)
 80028d0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00f      	beq.n	80028fe <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028e6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	655a      	str	r2, [r3, #84]	; 0x54
 80028ee:	e006      	b.n	80028fe <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80028f8:	e001      	b.n	80028fe <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80028fa:	2302      	movs	r3, #2
 80028fc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80028fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002900:	4618      	mov	r0, r3
 8002902:	3718      	adds	r7, #24
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	50040300 	.word	0x50040300
 800290c:	50040100 	.word	0x50040100
 8002910:	50040000 	.word	0x50040000

08002914 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b088      	sub	sp, #32
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800291e:	4866      	ldr	r0, [pc, #408]	; (8002ab8 <HAL_ADC_PollForConversion+0x1a4>)
 8002920:	f7ff fd22 	bl	8002368 <LL_ADC_GetMultimode>
 8002924:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	2b08      	cmp	r3, #8
 800292c:	d102      	bne.n	8002934 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800292e:	2308      	movs	r3, #8
 8002930:	61fb      	str	r3, [r7, #28]
 8002932:	e02a      	b.n	800298a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d005      	beq.n	8002946 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	2b05      	cmp	r3, #5
 800293e:	d002      	beq.n	8002946 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	2b09      	cmp	r3, #9
 8002944:	d111      	bne.n	800296a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	2b00      	cmp	r3, #0
 8002952:	d007      	beq.n	8002964 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002958:	f043 0220 	orr.w	r2, r3, #32
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e0a4      	b.n	8002aae <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002964:	2304      	movs	r3, #4
 8002966:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002968:	e00f      	b.n	800298a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800296a:	4853      	ldr	r0, [pc, #332]	; (8002ab8 <HAL_ADC_PollForConversion+0x1a4>)
 800296c:	f7ff fd0a 	bl	8002384 <LL_ADC_GetMultiDMATransfer>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d007      	beq.n	8002986 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297a:	f043 0220 	orr.w	r2, r3, #32
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e093      	b.n	8002aae <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002986:	2304      	movs	r3, #4
 8002988:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800298a:	f7ff fba5 	bl	80020d8 <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002990:	e021      	b.n	80029d6 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002998:	d01d      	beq.n	80029d6 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800299a:	f7ff fb9d 	bl	80020d8 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d302      	bcc.n	80029b0 <HAL_ADC_PollForConversion+0x9c>
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d112      	bne.n	80029d6 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	4013      	ands	r3, r2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10b      	bne.n	80029d6 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c2:	f043 0204 	orr.w	r2, r3, #4
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e06b      	b.n	8002aae <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	4013      	ands	r3, r2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0d6      	beq.n	8002992 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff fc28 	bl	800224a <LL_ADC_REG_IsTriggerSourceSWStart>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d01c      	beq.n	8002a3a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	7e5b      	ldrb	r3, [r3, #25]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d118      	bne.n	8002a3a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0308 	and.w	r3, r3, #8
 8002a12:	2b08      	cmp	r3, #8
 8002a14:	d111      	bne.n	8002a3a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d105      	bne.n	8002a3a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a32:	f043 0201 	orr.w	r2, r3, #1
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a1f      	ldr	r2, [pc, #124]	; (8002abc <HAL_ADC_PollForConversion+0x1a8>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d002      	beq.n	8002a4a <HAL_ADC_PollForConversion+0x136>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	e000      	b.n	8002a4c <HAL_ADC_PollForConversion+0x138>
 8002a4a:	4b1d      	ldr	r3, [pc, #116]	; (8002ac0 <HAL_ADC_PollForConversion+0x1ac>)
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	6812      	ldr	r2, [r2, #0]
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d008      	beq.n	8002a66 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d005      	beq.n	8002a66 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	2b05      	cmp	r3, #5
 8002a5e:	d002      	beq.n	8002a66 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	2b09      	cmp	r3, #9
 8002a64:	d104      	bne.n	8002a70 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	61bb      	str	r3, [r7, #24]
 8002a6e:	e00c      	b.n	8002a8a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a11      	ldr	r2, [pc, #68]	; (8002abc <HAL_ADC_PollForConversion+0x1a8>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d002      	beq.n	8002a80 <HAL_ADC_PollForConversion+0x16c>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	e000      	b.n	8002a82 <HAL_ADC_PollForConversion+0x16e>
 8002a80:	4b0f      	ldr	r3, [pc, #60]	; (8002ac0 <HAL_ADC_PollForConversion+0x1ac>)
 8002a82:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	2b08      	cmp	r3, #8
 8002a8e:	d104      	bne.n	8002a9a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2208      	movs	r2, #8
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	e008      	b.n	8002aac <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d103      	bne.n	8002aac <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	220c      	movs	r2, #12
 8002aaa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3720      	adds	r7, #32
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	50040300 	.word	0x50040300
 8002abc:	50040100 	.word	0x50040100
 8002ac0:	50040000 	.word	0x50040000

08002ac4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
	...

08002ae0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b0b6      	sub	sp, #216	; 0xd8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aea:	2300      	movs	r3, #0
 8002aec:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002af0:	2300      	movs	r3, #0
 8002af2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d101      	bne.n	8002b02 <HAL_ADC_ConfigChannel+0x22>
 8002afe:	2302      	movs	r3, #2
 8002b00:	e3c9      	b.n	8003296 <HAL_ADC_ConfigChannel+0x7b6>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff fccf 	bl	80024b2 <LL_ADC_REG_IsConversionOngoing>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f040 83aa 	bne.w	8003270 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	2b05      	cmp	r3, #5
 8002b2a:	d824      	bhi.n	8002b76 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	3b02      	subs	r3, #2
 8002b32:	2b03      	cmp	r3, #3
 8002b34:	d81b      	bhi.n	8002b6e <HAL_ADC_ConfigChannel+0x8e>
 8002b36:	a201      	add	r2, pc, #4	; (adr r2, 8002b3c <HAL_ADC_ConfigChannel+0x5c>)
 8002b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b3c:	08002b4d 	.word	0x08002b4d
 8002b40:	08002b55 	.word	0x08002b55
 8002b44:	08002b5d 	.word	0x08002b5d
 8002b48:	08002b65 	.word	0x08002b65
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002b4c:	230c      	movs	r3, #12
 8002b4e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002b52:	e010      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002b54:	2312      	movs	r3, #18
 8002b56:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002b5a:	e00c      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002b5c:	2318      	movs	r3, #24
 8002b5e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002b62:	e008      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002b64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002b6c:	e003      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002b6e:	2306      	movs	r3, #6
 8002b70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002b74:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6818      	ldr	r0, [r3, #0]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002b84:	f7ff fb74 	bl	8002270 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff fc90 	bl	80024b2 <LL_ADC_REG_IsConversionOngoing>
 8002b92:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff fc9c 	bl	80024d8 <LL_ADC_INJ_IsConversionOngoing>
 8002ba0:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ba4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f040 81a4 	bne.w	8002ef6 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002bae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f040 819f 	bne.w	8002ef6 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6818      	ldr	r0, [r3, #0]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	6819      	ldr	r1, [r3, #0]
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	f7ff fb7f 	bl	80022c8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	695a      	ldr	r2, [r3, #20]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	08db      	lsrs	r3, r3, #3
 8002bd6:	f003 0303 	and.w	r3, r3, #3
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	2b04      	cmp	r3, #4
 8002bea:	d00a      	beq.n	8002c02 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6818      	ldr	r0, [r3, #0]
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	6919      	ldr	r1, [r3, #16]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bfc:	f7ff fad0 	bl	80021a0 <LL_ADC_SetOffset>
 8002c00:	e179      	b.n	8002ef6 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2100      	movs	r1, #0
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff faed 	bl	80021e8 <LL_ADC_GetOffsetChannel>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d10a      	bne.n	8002c2e <HAL_ADC_ConfigChannel+0x14e>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff fae2 	bl	80021e8 <LL_ADC_GetOffsetChannel>
 8002c24:	4603      	mov	r3, r0
 8002c26:	0e9b      	lsrs	r3, r3, #26
 8002c28:	f003 021f 	and.w	r2, r3, #31
 8002c2c:	e01e      	b.n	8002c6c <HAL_ADC_ConfigChannel+0x18c>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2100      	movs	r1, #0
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff fad7 	bl	80021e8 <LL_ADC_GetOffsetChannel>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002c44:	fa93 f3a3 	rbit	r3, r3
 8002c48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002c54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d101      	bne.n	8002c60 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002c5c:	2320      	movs	r3, #32
 8002c5e:	e004      	b.n	8002c6a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002c60:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002c64:	fab3 f383 	clz	r3, r3
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d105      	bne.n	8002c84 <HAL_ADC_ConfigChannel+0x1a4>
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	0e9b      	lsrs	r3, r3, #26
 8002c7e:	f003 031f 	and.w	r3, r3, #31
 8002c82:	e018      	b.n	8002cb6 <HAL_ADC_ConfigChannel+0x1d6>
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c90:	fa93 f3a3 	rbit	r3, r3
 8002c94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002c98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002ca0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002ca8:	2320      	movs	r3, #32
 8002caa:	e004      	b.n	8002cb6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002cac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002cb0:	fab3 f383 	clz	r3, r3
 8002cb4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d106      	bne.n	8002cc8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff faa6 	bl	8002214 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2101      	movs	r1, #1
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff fa8a 	bl	80021e8 <LL_ADC_GetOffsetChannel>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10a      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x214>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff fa7f 	bl	80021e8 <LL_ADC_GetOffsetChannel>
 8002cea:	4603      	mov	r3, r0
 8002cec:	0e9b      	lsrs	r3, r3, #26
 8002cee:	f003 021f 	and.w	r2, r3, #31
 8002cf2:	e01e      	b.n	8002d32 <HAL_ADC_ConfigChannel+0x252>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff fa74 	bl	80021e8 <LL_ADC_GetOffsetChannel>
 8002d00:	4603      	mov	r3, r0
 8002d02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d0a:	fa93 f3a3 	rbit	r3, r3
 8002d0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002d12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002d1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002d22:	2320      	movs	r3, #32
 8002d24:	e004      	b.n	8002d30 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002d26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002d2a:	fab3 f383 	clz	r3, r3
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d105      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x26a>
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	0e9b      	lsrs	r3, r3, #26
 8002d44:	f003 031f 	and.w	r3, r3, #31
 8002d48:	e018      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x29c>
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002d56:	fa93 f3a3 	rbit	r3, r3
 8002d5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002d5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d62:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002d66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002d6e:	2320      	movs	r3, #32
 8002d70:	e004      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002d72:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d76:	fab3 f383 	clz	r3, r3
 8002d7a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d106      	bne.n	8002d8e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2200      	movs	r2, #0
 8002d86:	2101      	movs	r1, #1
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff fa43 	bl	8002214 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2102      	movs	r1, #2
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff fa27 	bl	80021e8 <LL_ADC_GetOffsetChannel>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10a      	bne.n	8002dba <HAL_ADC_ConfigChannel+0x2da>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2102      	movs	r1, #2
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff fa1c 	bl	80021e8 <LL_ADC_GetOffsetChannel>
 8002db0:	4603      	mov	r3, r0
 8002db2:	0e9b      	lsrs	r3, r3, #26
 8002db4:	f003 021f 	and.w	r2, r3, #31
 8002db8:	e01e      	b.n	8002df8 <HAL_ADC_ConfigChannel+0x318>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2102      	movs	r1, #2
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff fa11 	bl	80021e8 <LL_ADC_GetOffsetChannel>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002dd0:	fa93 f3a3 	rbit	r3, r3
 8002dd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002dd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ddc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002de0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002de8:	2320      	movs	r3, #32
 8002dea:	e004      	b.n	8002df6 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002dec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002df0:	fab3 f383 	clz	r3, r3
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d105      	bne.n	8002e10 <HAL_ADC_ConfigChannel+0x330>
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	0e9b      	lsrs	r3, r3, #26
 8002e0a:	f003 031f 	and.w	r3, r3, #31
 8002e0e:	e014      	b.n	8002e3a <HAL_ADC_ConfigChannel+0x35a>
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e18:	fa93 f3a3 	rbit	r3, r3
 8002e1c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002e1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002e24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d101      	bne.n	8002e30 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002e2c:	2320      	movs	r3, #32
 8002e2e:	e004      	b.n	8002e3a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002e30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e34:	fab3 f383 	clz	r3, r3
 8002e38:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d106      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2200      	movs	r2, #0
 8002e44:	2102      	movs	r1, #2
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff f9e4 	bl	8002214 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2103      	movs	r1, #3
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff f9c8 	bl	80021e8 <LL_ADC_GetOffsetChannel>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10a      	bne.n	8002e78 <HAL_ADC_ConfigChannel+0x398>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2103      	movs	r1, #3
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff f9bd 	bl	80021e8 <LL_ADC_GetOffsetChannel>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	0e9b      	lsrs	r3, r3, #26
 8002e72:	f003 021f 	and.w	r2, r3, #31
 8002e76:	e017      	b.n	8002ea8 <HAL_ADC_ConfigChannel+0x3c8>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2103      	movs	r1, #3
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff f9b2 	bl	80021e8 <LL_ADC_GetOffsetChannel>
 8002e84:	4603      	mov	r3, r0
 8002e86:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e8a:	fa93 f3a3 	rbit	r3, r3
 8002e8e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e92:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002e94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002e9a:	2320      	movs	r3, #32
 8002e9c:	e003      	b.n	8002ea6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002e9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ea0:	fab3 f383 	clz	r3, r3
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d105      	bne.n	8002ec0 <HAL_ADC_ConfigChannel+0x3e0>
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	0e9b      	lsrs	r3, r3, #26
 8002eba:	f003 031f 	and.w	r3, r3, #31
 8002ebe:	e011      	b.n	8002ee4 <HAL_ADC_ConfigChannel+0x404>
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ec8:	fa93 f3a3 	rbit	r3, r3
 8002ecc:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002ece:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ed0:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002ed2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002ed8:	2320      	movs	r3, #32
 8002eda:	e003      	b.n	8002ee4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002edc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ede:	fab3 f383 	clz	r3, r3
 8002ee2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d106      	bne.n	8002ef6 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2200      	movs	r2, #0
 8002eee:	2103      	movs	r1, #3
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff f98f 	bl	8002214 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7ff fab2 	bl	8002464 <LL_ADC_IsEnabled>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f040 8140 	bne.w	8003188 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6818      	ldr	r0, [r3, #0]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	6819      	ldr	r1, [r3, #0]
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	461a      	mov	r2, r3
 8002f16:	f7ff fa03 	bl	8002320 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	4a8f      	ldr	r2, [pc, #572]	; (800315c <HAL_ADC_ConfigChannel+0x67c>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	f040 8131 	bne.w	8003188 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10b      	bne.n	8002f4e <HAL_ADC_ConfigChannel+0x46e>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	0e9b      	lsrs	r3, r3, #26
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	f003 031f 	and.w	r3, r3, #31
 8002f42:	2b09      	cmp	r3, #9
 8002f44:	bf94      	ite	ls
 8002f46:	2301      	movls	r3, #1
 8002f48:	2300      	movhi	r3, #0
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	e019      	b.n	8002f82 <HAL_ADC_ConfigChannel+0x4a2>
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f56:	fa93 f3a3 	rbit	r3, r3
 8002f5a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002f5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f5e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002f60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002f66:	2320      	movs	r3, #32
 8002f68:	e003      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002f6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f6c:	fab3 f383 	clz	r3, r3
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	3301      	adds	r3, #1
 8002f74:	f003 031f 	and.w	r3, r3, #31
 8002f78:	2b09      	cmp	r3, #9
 8002f7a:	bf94      	ite	ls
 8002f7c:	2301      	movls	r3, #1
 8002f7e:	2300      	movhi	r3, #0
 8002f80:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d079      	beq.n	800307a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d107      	bne.n	8002fa2 <HAL_ADC_ConfigChannel+0x4c2>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	0e9b      	lsrs	r3, r3, #26
 8002f98:	3301      	adds	r3, #1
 8002f9a:	069b      	lsls	r3, r3, #26
 8002f9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fa0:	e015      	b.n	8002fce <HAL_ADC_ConfigChannel+0x4ee>
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002faa:	fa93 f3a3 	rbit	r3, r3
 8002fae:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002fb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fb2:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002fb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002fba:	2320      	movs	r3, #32
 8002fbc:	e003      	b.n	8002fc6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002fbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fc0:	fab3 f383 	clz	r3, r3
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	069b      	lsls	r3, r3, #26
 8002fca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d109      	bne.n	8002fee <HAL_ADC_ConfigChannel+0x50e>
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	0e9b      	lsrs	r3, r3, #26
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	f003 031f 	and.w	r3, r3, #31
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fec:	e017      	b.n	800301e <HAL_ADC_ConfigChannel+0x53e>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ff6:	fa93 f3a3 	rbit	r3, r3
 8002ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ffe:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003000:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003006:	2320      	movs	r3, #32
 8003008:	e003      	b.n	8003012 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800300a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800300c:	fab3 f383 	clz	r3, r3
 8003010:	b2db      	uxtb	r3, r3
 8003012:	3301      	adds	r3, #1
 8003014:	f003 031f 	and.w	r3, r3, #31
 8003018:	2101      	movs	r1, #1
 800301a:	fa01 f303 	lsl.w	r3, r1, r3
 800301e:	ea42 0103 	orr.w	r1, r2, r3
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10a      	bne.n	8003044 <HAL_ADC_ConfigChannel+0x564>
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	0e9b      	lsrs	r3, r3, #26
 8003034:	3301      	adds	r3, #1
 8003036:	f003 021f 	and.w	r2, r3, #31
 800303a:	4613      	mov	r3, r2
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	4413      	add	r3, r2
 8003040:	051b      	lsls	r3, r3, #20
 8003042:	e018      	b.n	8003076 <HAL_ADC_ConfigChannel+0x596>
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800304c:	fa93 f3a3 	rbit	r3, r3
 8003050:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003054:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003058:	2b00      	cmp	r3, #0
 800305a:	d101      	bne.n	8003060 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800305c:	2320      	movs	r3, #32
 800305e:	e003      	b.n	8003068 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003062:	fab3 f383 	clz	r3, r3
 8003066:	b2db      	uxtb	r3, r3
 8003068:	3301      	adds	r3, #1
 800306a:	f003 021f 	and.w	r2, r3, #31
 800306e:	4613      	mov	r3, r2
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	4413      	add	r3, r2
 8003074:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003076:	430b      	orrs	r3, r1
 8003078:	e081      	b.n	800317e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003082:	2b00      	cmp	r3, #0
 8003084:	d107      	bne.n	8003096 <HAL_ADC_ConfigChannel+0x5b6>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	0e9b      	lsrs	r3, r3, #26
 800308c:	3301      	adds	r3, #1
 800308e:	069b      	lsls	r3, r3, #26
 8003090:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003094:	e015      	b.n	80030c2 <HAL_ADC_ConfigChannel+0x5e2>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309e:	fa93 f3a3 	rbit	r3, r3
 80030a2:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80030a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80030a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80030ae:	2320      	movs	r3, #32
 80030b0:	e003      	b.n	80030ba <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80030b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b4:	fab3 f383 	clz	r3, r3
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	3301      	adds	r3, #1
 80030bc:	069b      	lsls	r3, r3, #26
 80030be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d109      	bne.n	80030e2 <HAL_ADC_ConfigChannel+0x602>
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	0e9b      	lsrs	r3, r3, #26
 80030d4:	3301      	adds	r3, #1
 80030d6:	f003 031f 	and.w	r3, r3, #31
 80030da:	2101      	movs	r1, #1
 80030dc:	fa01 f303 	lsl.w	r3, r1, r3
 80030e0:	e017      	b.n	8003112 <HAL_ADC_ConfigChannel+0x632>
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	fa93 f3a3 	rbit	r3, r3
 80030ee:	61bb      	str	r3, [r7, #24]
  return result;
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80030f4:	6a3b      	ldr	r3, [r7, #32]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80030fa:	2320      	movs	r3, #32
 80030fc:	e003      	b.n	8003106 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	fab3 f383 	clz	r3, r3
 8003104:	b2db      	uxtb	r3, r3
 8003106:	3301      	adds	r3, #1
 8003108:	f003 031f 	and.w	r3, r3, #31
 800310c:	2101      	movs	r1, #1
 800310e:	fa01 f303 	lsl.w	r3, r1, r3
 8003112:	ea42 0103 	orr.w	r1, r2, r3
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10d      	bne.n	800313e <HAL_ADC_ConfigChannel+0x65e>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	0e9b      	lsrs	r3, r3, #26
 8003128:	3301      	adds	r3, #1
 800312a:	f003 021f 	and.w	r2, r3, #31
 800312e:	4613      	mov	r3, r2
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	4413      	add	r3, r2
 8003134:	3b1e      	subs	r3, #30
 8003136:	051b      	lsls	r3, r3, #20
 8003138:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800313c:	e01e      	b.n	800317c <HAL_ADC_ConfigChannel+0x69c>
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	fa93 f3a3 	rbit	r3, r3
 800314a:	60fb      	str	r3, [r7, #12]
  return result;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d104      	bne.n	8003160 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003156:	2320      	movs	r3, #32
 8003158:	e006      	b.n	8003168 <HAL_ADC_ConfigChannel+0x688>
 800315a:	bf00      	nop
 800315c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	fab3 f383 	clz	r3, r3
 8003166:	b2db      	uxtb	r3, r3
 8003168:	3301      	adds	r3, #1
 800316a:	f003 021f 	and.w	r2, r3, #31
 800316e:	4613      	mov	r3, r2
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	4413      	add	r3, r2
 8003174:	3b1e      	subs	r3, #30
 8003176:	051b      	lsls	r3, r3, #20
 8003178:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800317c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003182:	4619      	mov	r1, r3
 8003184:	f7ff f8a0 	bl	80022c8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	4b44      	ldr	r3, [pc, #272]	; (80032a0 <HAL_ADC_ConfigChannel+0x7c0>)
 800318e:	4013      	ands	r3, r2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d07a      	beq.n	800328a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003194:	4843      	ldr	r0, [pc, #268]	; (80032a4 <HAL_ADC_ConfigChannel+0x7c4>)
 8003196:	f7fe fff5 	bl	8002184 <LL_ADC_GetCommonPathInternalCh>
 800319a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a41      	ldr	r2, [pc, #260]	; (80032a8 <HAL_ADC_ConfigChannel+0x7c8>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d12c      	bne.n	8003202 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80031a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80031ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d126      	bne.n	8003202 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a3c      	ldr	r2, [pc, #240]	; (80032ac <HAL_ADC_ConfigChannel+0x7cc>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d004      	beq.n	80031c8 <HAL_ADC_ConfigChannel+0x6e8>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a3b      	ldr	r2, [pc, #236]	; (80032b0 <HAL_ADC_ConfigChannel+0x7d0>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d15d      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80031cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031d0:	4619      	mov	r1, r3
 80031d2:	4834      	ldr	r0, [pc, #208]	; (80032a4 <HAL_ADC_ConfigChannel+0x7c4>)
 80031d4:	f7fe ffc3 	bl	800215e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031d8:	4b36      	ldr	r3, [pc, #216]	; (80032b4 <HAL_ADC_ConfigChannel+0x7d4>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	099b      	lsrs	r3, r3, #6
 80031de:	4a36      	ldr	r2, [pc, #216]	; (80032b8 <HAL_ADC_ConfigChannel+0x7d8>)
 80031e0:	fba2 2303 	umull	r2, r3, r2, r3
 80031e4:	099b      	lsrs	r3, r3, #6
 80031e6:	1c5a      	adds	r2, r3, #1
 80031e8:	4613      	mov	r3, r2
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	4413      	add	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80031f2:	e002      	b.n	80031fa <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	3b01      	subs	r3, #1
 80031f8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1f9      	bne.n	80031f4 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003200:	e040      	b.n	8003284 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a2d      	ldr	r2, [pc, #180]	; (80032bc <HAL_ADC_ConfigChannel+0x7dc>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d118      	bne.n	800323e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800320c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003210:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d112      	bne.n	800323e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a23      	ldr	r2, [pc, #140]	; (80032ac <HAL_ADC_ConfigChannel+0x7cc>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d004      	beq.n	800322c <HAL_ADC_ConfigChannel+0x74c>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a22      	ldr	r2, [pc, #136]	; (80032b0 <HAL_ADC_ConfigChannel+0x7d0>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d12d      	bne.n	8003288 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800322c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003230:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003234:	4619      	mov	r1, r3
 8003236:	481b      	ldr	r0, [pc, #108]	; (80032a4 <HAL_ADC_ConfigChannel+0x7c4>)
 8003238:	f7fe ff91 	bl	800215e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800323c:	e024      	b.n	8003288 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a1f      	ldr	r2, [pc, #124]	; (80032c0 <HAL_ADC_ConfigChannel+0x7e0>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d120      	bne.n	800328a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003248:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800324c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d11a      	bne.n	800328a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a14      	ldr	r2, [pc, #80]	; (80032ac <HAL_ADC_ConfigChannel+0x7cc>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d115      	bne.n	800328a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800325e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003262:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003266:	4619      	mov	r1, r3
 8003268:	480e      	ldr	r0, [pc, #56]	; (80032a4 <HAL_ADC_ConfigChannel+0x7c4>)
 800326a:	f7fe ff78 	bl	800215e <LL_ADC_SetCommonPathInternalCh>
 800326e:	e00c      	b.n	800328a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003274:	f043 0220 	orr.w	r2, r3, #32
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003282:	e002      	b.n	800328a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003284:	bf00      	nop
 8003286:	e000      	b.n	800328a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003288:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003292:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003296:	4618      	mov	r0, r3
 8003298:	37d8      	adds	r7, #216	; 0xd8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	80080000 	.word	0x80080000
 80032a4:	50040300 	.word	0x50040300
 80032a8:	c7520000 	.word	0xc7520000
 80032ac:	50040000 	.word	0x50040000
 80032b0:	50040200 	.word	0x50040200
 80032b4:	20000004 	.word	0x20000004
 80032b8:	053e2d63 	.word	0x053e2d63
 80032bc:	cb840000 	.word	0xcb840000
 80032c0:	80000001 	.word	0x80000001

080032c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80032cc:	2300      	movs	r3, #0
 80032ce:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff f8c5 	bl	8002464 <LL_ADC_IsEnabled>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d169      	bne.n	80033b4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689a      	ldr	r2, [r3, #8]
 80032e6:	4b36      	ldr	r3, [pc, #216]	; (80033c0 <ADC_Enable+0xfc>)
 80032e8:	4013      	ands	r3, r2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00d      	beq.n	800330a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f2:	f043 0210 	orr.w	r2, r3, #16
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032fe:	f043 0201 	orr.w	r2, r3, #1
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e055      	b.n	80033b6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f7ff f894 	bl	800243c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003314:	482b      	ldr	r0, [pc, #172]	; (80033c4 <ADC_Enable+0x100>)
 8003316:	f7fe ff35 	bl	8002184 <LL_ADC_GetCommonPathInternalCh>
 800331a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800331c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003320:	2b00      	cmp	r3, #0
 8003322:	d013      	beq.n	800334c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003324:	4b28      	ldr	r3, [pc, #160]	; (80033c8 <ADC_Enable+0x104>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	099b      	lsrs	r3, r3, #6
 800332a:	4a28      	ldr	r2, [pc, #160]	; (80033cc <ADC_Enable+0x108>)
 800332c:	fba2 2303 	umull	r2, r3, r2, r3
 8003330:	099b      	lsrs	r3, r3, #6
 8003332:	1c5a      	adds	r2, r3, #1
 8003334:	4613      	mov	r3, r2
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	4413      	add	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800333e:	e002      	b.n	8003346 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	3b01      	subs	r3, #1
 8003344:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1f9      	bne.n	8003340 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800334c:	f7fe fec4 	bl	80020d8 <HAL_GetTick>
 8003350:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003352:	e028      	b.n	80033a6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4618      	mov	r0, r3
 800335a:	f7ff f883 	bl	8002464 <LL_ADC_IsEnabled>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d104      	bne.n	800336e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff f867 	bl	800243c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800336e:	f7fe feb3 	bl	80020d8 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d914      	bls.n	80033a6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b01      	cmp	r3, #1
 8003388:	d00d      	beq.n	80033a6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800338e:	f043 0210 	orr.w	r2, r3, #16
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800339a:	f043 0201 	orr.w	r2, r3, #1
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e007      	b.n	80033b6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d1cf      	bne.n	8003354 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	8000003f 	.word	0x8000003f
 80033c4:	50040300 	.word	0x50040300
 80033c8:	20000004 	.word	0x20000004
 80033cc:	053e2d63 	.word	0x053e2d63

080033d0 <LL_ADC_IsEnabled>:
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d101      	bne.n	80033e8 <LL_ADC_IsEnabled+0x18>
 80033e4:	2301      	movs	r3, #1
 80033e6:	e000      	b.n	80033ea <LL_ADC_IsEnabled+0x1a>
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <LL_ADC_REG_IsConversionOngoing>:
{
 80033f6:	b480      	push	{r7}
 80033f8:	b083      	sub	sp, #12
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 0304 	and.w	r3, r3, #4
 8003406:	2b04      	cmp	r3, #4
 8003408:	d101      	bne.n	800340e <LL_ADC_REG_IsConversionOngoing+0x18>
 800340a:	2301      	movs	r3, #1
 800340c:	e000      	b.n	8003410 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800341c:	b590      	push	{r4, r7, lr}
 800341e:	b09f      	sub	sp, #124	; 0x7c
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003426:	2300      	movs	r3, #0
 8003428:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003432:	2b01      	cmp	r3, #1
 8003434:	d101      	bne.n	800343a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003436:	2302      	movs	r3, #2
 8003438:	e093      	b.n	8003562 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003442:	2300      	movs	r3, #0
 8003444:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003446:	2300      	movs	r3, #0
 8003448:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a47      	ldr	r2, [pc, #284]	; (800356c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d102      	bne.n	800345a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003454:	4b46      	ldr	r3, [pc, #280]	; (8003570 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003456:	60bb      	str	r3, [r7, #8]
 8003458:	e001      	b.n	800345e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800345a:	2300      	movs	r3, #0
 800345c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d10b      	bne.n	800347c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003468:	f043 0220 	orr.w	r2, r3, #32
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e072      	b.n	8003562 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	4618      	mov	r0, r3
 8003480:	f7ff ffb9 	bl	80033f6 <LL_ADC_REG_IsConversionOngoing>
 8003484:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f7ff ffb3 	bl	80033f6 <LL_ADC_REG_IsConversionOngoing>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d154      	bne.n	8003540 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003496:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003498:	2b00      	cmp	r3, #0
 800349a:	d151      	bne.n	8003540 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800349c:	4b35      	ldr	r3, [pc, #212]	; (8003574 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800349e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d02c      	beq.n	8003502 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80034a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	6859      	ldr	r1, [r3, #4]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80034ba:	035b      	lsls	r3, r3, #13
 80034bc:	430b      	orrs	r3, r1
 80034be:	431a      	orrs	r2, r3
 80034c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034c2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034c4:	4829      	ldr	r0, [pc, #164]	; (800356c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80034c6:	f7ff ff83 	bl	80033d0 <LL_ADC_IsEnabled>
 80034ca:	4604      	mov	r4, r0
 80034cc:	4828      	ldr	r0, [pc, #160]	; (8003570 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80034ce:	f7ff ff7f 	bl	80033d0 <LL_ADC_IsEnabled>
 80034d2:	4603      	mov	r3, r0
 80034d4:	431c      	orrs	r4, r3
 80034d6:	4828      	ldr	r0, [pc, #160]	; (8003578 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80034d8:	f7ff ff7a 	bl	80033d0 <LL_ADC_IsEnabled>
 80034dc:	4603      	mov	r3, r0
 80034de:	4323      	orrs	r3, r4
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d137      	bne.n	8003554 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80034e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80034ec:	f023 030f 	bic.w	r3, r3, #15
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	6811      	ldr	r1, [r2, #0]
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	6892      	ldr	r2, [r2, #8]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	431a      	orrs	r2, r3
 80034fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034fe:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003500:	e028      	b.n	8003554 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800350a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800350c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800350e:	4817      	ldr	r0, [pc, #92]	; (800356c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003510:	f7ff ff5e 	bl	80033d0 <LL_ADC_IsEnabled>
 8003514:	4604      	mov	r4, r0
 8003516:	4816      	ldr	r0, [pc, #88]	; (8003570 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003518:	f7ff ff5a 	bl	80033d0 <LL_ADC_IsEnabled>
 800351c:	4603      	mov	r3, r0
 800351e:	431c      	orrs	r4, r3
 8003520:	4815      	ldr	r0, [pc, #84]	; (8003578 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003522:	f7ff ff55 	bl	80033d0 <LL_ADC_IsEnabled>
 8003526:	4603      	mov	r3, r0
 8003528:	4323      	orrs	r3, r4
 800352a:	2b00      	cmp	r3, #0
 800352c:	d112      	bne.n	8003554 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800352e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003536:	f023 030f 	bic.w	r3, r3, #15
 800353a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800353c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800353e:	e009      	b.n	8003554 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003544:	f043 0220 	orr.w	r2, r3, #32
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003552:	e000      	b.n	8003556 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003554:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800355e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003562:	4618      	mov	r0, r3
 8003564:	377c      	adds	r7, #124	; 0x7c
 8003566:	46bd      	mov	sp, r7
 8003568:	bd90      	pop	{r4, r7, pc}
 800356a:	bf00      	nop
 800356c:	50040000 	.word	0x50040000
 8003570:	50040100 	.word	0x50040100
 8003574:	50040300 	.word	0x50040300
 8003578:	50040200 	.word	0x50040200

0800357c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e0ed      	b.n	800376a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d102      	bne.n	80035a0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7fe fa46 	bl	8001a2c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f042 0201 	orr.w	r2, r2, #1
 80035ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035b0:	f7fe fd92 	bl	80020d8 <HAL_GetTick>
 80035b4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80035b6:	e012      	b.n	80035de <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80035b8:	f7fe fd8e 	bl	80020d8 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b0a      	cmp	r3, #10
 80035c4:	d90b      	bls.n	80035de <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2205      	movs	r2, #5
 80035d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e0c5      	b.n	800376a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d0e5      	beq.n	80035b8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 0202 	bic.w	r2, r2, #2
 80035fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035fc:	f7fe fd6c 	bl	80020d8 <HAL_GetTick>
 8003600:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003602:	e012      	b.n	800362a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003604:	f7fe fd68 	bl	80020d8 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b0a      	cmp	r3, #10
 8003610:	d90b      	bls.n	800362a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003616:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2205      	movs	r2, #5
 8003622:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e09f      	b.n	800376a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1e5      	bne.n	8003604 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	7e1b      	ldrb	r3, [r3, #24]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d108      	bne.n	8003652 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800364e:	601a      	str	r2, [r3, #0]
 8003650:	e007      	b.n	8003662 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003660:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	7e5b      	ldrb	r3, [r3, #25]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d108      	bne.n	800367c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	e007      	b.n	800368c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800368a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	7e9b      	ldrb	r3, [r3, #26]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d108      	bne.n	80036a6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f042 0220 	orr.w	r2, r2, #32
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	e007      	b.n	80036b6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 0220 	bic.w	r2, r2, #32
 80036b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	7edb      	ldrb	r3, [r3, #27]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d108      	bne.n	80036d0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 0210 	bic.w	r2, r2, #16
 80036cc:	601a      	str	r2, [r3, #0]
 80036ce:	e007      	b.n	80036e0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0210 	orr.w	r2, r2, #16
 80036de:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	7f1b      	ldrb	r3, [r3, #28]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d108      	bne.n	80036fa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f042 0208 	orr.w	r2, r2, #8
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	e007      	b.n	800370a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 0208 	bic.w	r2, r2, #8
 8003708:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	7f5b      	ldrb	r3, [r3, #29]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d108      	bne.n	8003724 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f042 0204 	orr.w	r2, r2, #4
 8003720:	601a      	str	r2, [r3, #0]
 8003722:	e007      	b.n	8003734 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f022 0204 	bic.w	r2, r2, #4
 8003732:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689a      	ldr	r2, [r3, #8]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	431a      	orrs	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	431a      	orrs	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	ea42 0103 	orr.w	r1, r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	1e5a      	subs	r2, r3, #1
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	430a      	orrs	r2, r1
 8003758:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003772:	b480      	push	{r7}
 8003774:	b087      	sub	sp, #28
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
 800377a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003788:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800378a:	7cfb      	ldrb	r3, [r7, #19]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d003      	beq.n	8003798 <HAL_CAN_ConfigFilter+0x26>
 8003790:	7cfb      	ldrb	r3, [r7, #19]
 8003792:	2b02      	cmp	r3, #2
 8003794:	f040 80aa 	bne.w	80038ec <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800379e:	f043 0201 	orr.w	r2, r3, #1
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	f003 031f 	and.w	r3, r3, #31
 80037b0:	2201      	movs	r2, #1
 80037b2:	fa02 f303 	lsl.w	r3, r2, r3
 80037b6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	43db      	mvns	r3, r3
 80037c2:	401a      	ands	r2, r3
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d123      	bne.n	800381a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	43db      	mvns	r3, r3
 80037dc:	401a      	ands	r2, r3
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80037f4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	3248      	adds	r2, #72	; 0x48
 80037fa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800380e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003810:	6979      	ldr	r1, [r7, #20]
 8003812:	3348      	adds	r3, #72	; 0x48
 8003814:	00db      	lsls	r3, r3, #3
 8003816:	440b      	add	r3, r1
 8003818:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d122      	bne.n	8003868 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	431a      	orrs	r2, r3
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003842:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	3248      	adds	r2, #72	; 0x48
 8003848:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800385c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800385e:	6979      	ldr	r1, [r7, #20]
 8003860:	3348      	adds	r3, #72	; 0x48
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	440b      	add	r3, r1
 8003866:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d109      	bne.n	8003884 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	43db      	mvns	r3, r3
 800387a:	401a      	ands	r2, r3
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003882:	e007      	b.n	8003894 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	431a      	orrs	r2, r3
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d109      	bne.n	80038b0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	43db      	mvns	r3, r3
 80038a6:	401a      	ands	r2, r3
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80038ae:	e007      	b.n	80038c0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	431a      	orrs	r2, r3
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	6a1b      	ldr	r3, [r3, #32]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d107      	bne.n	80038d8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	431a      	orrs	r2, r3
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80038de:	f023 0201 	bic.w	r2, r3, #1
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80038e8:	2300      	movs	r3, #0
 80038ea:	e006      	b.n	80038fa <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
  }
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	371c      	adds	r7, #28
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr

08003906 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b084      	sub	sp, #16
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b01      	cmp	r3, #1
 8003918:	d12e      	bne.n	8003978 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2202      	movs	r2, #2
 800391e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 0201 	bic.w	r2, r2, #1
 8003930:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003932:	f7fe fbd1 	bl	80020d8 <HAL_GetTick>
 8003936:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003938:	e012      	b.n	8003960 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800393a:	f7fe fbcd 	bl	80020d8 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b0a      	cmp	r3, #10
 8003946:	d90b      	bls.n	8003960 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2205      	movs	r2, #5
 8003958:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e012      	b.n	8003986 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1e5      	bne.n	800393a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003974:	2300      	movs	r3, #0
 8003976:	e006      	b.n	8003986 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
  }
}
 8003986:	4618      	mov	r0, r3
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800398e:	b480      	push	{r7}
 8003990:	b089      	sub	sp, #36	; 0x24
 8003992:	af00      	add	r7, sp, #0
 8003994:	60f8      	str	r0, [r7, #12]
 8003996:	60b9      	str	r1, [r7, #8]
 8003998:	607a      	str	r2, [r7, #4]
 800399a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80039ac:	7ffb      	ldrb	r3, [r7, #31]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d003      	beq.n	80039ba <HAL_CAN_AddTxMessage+0x2c>
 80039b2:	7ffb      	ldrb	r3, [r7, #31]
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	f040 80ad 	bne.w	8003b14 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10a      	bne.n	80039da <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d105      	bne.n	80039da <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f000 8095 	beq.w	8003b04 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	0e1b      	lsrs	r3, r3, #24
 80039de:	f003 0303 	and.w	r3, r3, #3
 80039e2:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80039e4:	2201      	movs	r2, #1
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	409a      	lsls	r2, r3
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10d      	bne.n	8003a12 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003a00:	68f9      	ldr	r1, [r7, #12]
 8003a02:	6809      	ldr	r1, [r1, #0]
 8003a04:	431a      	orrs	r2, r3
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	3318      	adds	r3, #24
 8003a0a:	011b      	lsls	r3, r3, #4
 8003a0c:	440b      	add	r3, r1
 8003a0e:	601a      	str	r2, [r3, #0]
 8003a10:	e00f      	b.n	8003a32 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003a1c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003a22:	68f9      	ldr	r1, [r7, #12]
 8003a24:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003a26:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	3318      	adds	r3, #24
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	440b      	add	r3, r1
 8003a30:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6819      	ldr	r1, [r3, #0]
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	691a      	ldr	r2, [r3, #16]
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	3318      	adds	r3, #24
 8003a3e:	011b      	lsls	r3, r3, #4
 8003a40:	440b      	add	r3, r1
 8003a42:	3304      	adds	r3, #4
 8003a44:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	7d1b      	ldrb	r3, [r3, #20]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d111      	bne.n	8003a72 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	3318      	adds	r3, #24
 8003a56:	011b      	lsls	r3, r3, #4
 8003a58:	4413      	add	r3, r2
 8003a5a:	3304      	adds	r3, #4
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	6811      	ldr	r1, [r2, #0]
 8003a62:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	3318      	adds	r3, #24
 8003a6a:	011b      	lsls	r3, r3, #4
 8003a6c:	440b      	add	r3, r1
 8003a6e:	3304      	adds	r3, #4
 8003a70:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	3307      	adds	r3, #7
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	061a      	lsls	r2, r3, #24
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	3306      	adds	r3, #6
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	041b      	lsls	r3, r3, #16
 8003a82:	431a      	orrs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	3305      	adds	r3, #5
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	021b      	lsls	r3, r3, #8
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	3204      	adds	r2, #4
 8003a92:	7812      	ldrb	r2, [r2, #0]
 8003a94:	4610      	mov	r0, r2
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	6811      	ldr	r1, [r2, #0]
 8003a9a:	ea43 0200 	orr.w	r2, r3, r0
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	011b      	lsls	r3, r3, #4
 8003aa2:	440b      	add	r3, r1
 8003aa4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003aa8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	3303      	adds	r3, #3
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	061a      	lsls	r2, r3, #24
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	3302      	adds	r3, #2
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	041b      	lsls	r3, r3, #16
 8003aba:	431a      	orrs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	021b      	lsls	r3, r3, #8
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	7812      	ldrb	r2, [r2, #0]
 8003aca:	4610      	mov	r0, r2
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	6811      	ldr	r1, [r2, #0]
 8003ad0:	ea43 0200 	orr.w	r2, r3, r0
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	011b      	lsls	r3, r3, #4
 8003ad8:	440b      	add	r3, r1
 8003ada:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003ade:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	3318      	adds	r3, #24
 8003ae8:	011b      	lsls	r3, r3, #4
 8003aea:	4413      	add	r3, r2
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	6811      	ldr	r1, [r2, #0]
 8003af2:	f043 0201 	orr.w	r2, r3, #1
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	3318      	adds	r3, #24
 8003afa:	011b      	lsls	r3, r3, #4
 8003afc:	440b      	add	r3, r1
 8003afe:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003b00:	2300      	movs	r3, #0
 8003b02:	e00e      	b.n	8003b22 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b08:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e006      	b.n	8003b22 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b18:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
  }
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3724      	adds	r7, #36	; 0x24
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr

08003b2e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b087      	sub	sp, #28
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	60f8      	str	r0, [r7, #12]
 8003b36:	60b9      	str	r1, [r7, #8]
 8003b38:	607a      	str	r2, [r7, #4]
 8003b3a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b42:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003b44:	7dfb      	ldrb	r3, [r7, #23]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d003      	beq.n	8003b52 <HAL_CAN_GetRxMessage+0x24>
 8003b4a:	7dfb      	ldrb	r3, [r7, #23]
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	f040 8103 	bne.w	8003d58 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d10e      	bne.n	8003b76 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d116      	bne.n	8003b94 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e0f7      	b.n	8003d66 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	f003 0303 	and.w	r3, r3, #3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d107      	bne.n	8003b94 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e0e8      	b.n	8003d66 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	331b      	adds	r3, #27
 8003b9c:	011b      	lsls	r3, r3, #4
 8003b9e:	4413      	add	r3, r2
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0204 	and.w	r2, r3, #4
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10c      	bne.n	8003bcc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	331b      	adds	r3, #27
 8003bba:	011b      	lsls	r3, r3, #4
 8003bbc:	4413      	add	r3, r2
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	0d5b      	lsrs	r3, r3, #21
 8003bc2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	601a      	str	r2, [r3, #0]
 8003bca:	e00b      	b.n	8003be4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	331b      	adds	r3, #27
 8003bd4:	011b      	lsls	r3, r3, #4
 8003bd6:	4413      	add	r3, r2
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	08db      	lsrs	r3, r3, #3
 8003bdc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	331b      	adds	r3, #27
 8003bec:	011b      	lsls	r3, r3, #4
 8003bee:	4413      	add	r3, r2
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0202 	and.w	r2, r3, #2
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	331b      	adds	r3, #27
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	4413      	add	r3, r2
 8003c06:	3304      	adds	r3, #4
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0308 	and.w	r3, r3, #8
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2208      	movs	r2, #8
 8003c16:	611a      	str	r2, [r3, #16]
 8003c18:	e00b      	b.n	8003c32 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	331b      	adds	r3, #27
 8003c22:	011b      	lsls	r3, r3, #4
 8003c24:	4413      	add	r3, r2
 8003c26:	3304      	adds	r3, #4
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 020f 	and.w	r2, r3, #15
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	331b      	adds	r3, #27
 8003c3a:	011b      	lsls	r3, r3, #4
 8003c3c:	4413      	add	r3, r2
 8003c3e:	3304      	adds	r3, #4
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	0a1b      	lsrs	r3, r3, #8
 8003c44:	b2da      	uxtb	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	331b      	adds	r3, #27
 8003c52:	011b      	lsls	r3, r3, #4
 8003c54:	4413      	add	r3, r2
 8003c56:	3304      	adds	r3, #4
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	0c1b      	lsrs	r3, r3, #16
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	011b      	lsls	r3, r3, #4
 8003c80:	4413      	add	r3, r2
 8003c82:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	0a1a      	lsrs	r2, r3, #8
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	b2d2      	uxtb	r2, r2
 8003c90:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	011b      	lsls	r3, r3, #4
 8003c9a:	4413      	add	r3, r2
 8003c9c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	0c1a      	lsrs	r2, r3, #16
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	3302      	adds	r3, #2
 8003ca8:	b2d2      	uxtb	r2, r2
 8003caa:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	011b      	lsls	r3, r3, #4
 8003cb4:	4413      	add	r3, r2
 8003cb6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	0e1a      	lsrs	r2, r3, #24
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	3303      	adds	r3, #3
 8003cc2:	b2d2      	uxtb	r2, r2
 8003cc4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	011b      	lsls	r3, r3, #4
 8003cce:	4413      	add	r3, r2
 8003cd0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	3304      	adds	r3, #4
 8003cda:	b2d2      	uxtb	r2, r2
 8003cdc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	011b      	lsls	r3, r3, #4
 8003ce6:	4413      	add	r3, r2
 8003ce8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	0a1a      	lsrs	r2, r3, #8
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	3305      	adds	r3, #5
 8003cf4:	b2d2      	uxtb	r2, r2
 8003cf6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	4413      	add	r3, r2
 8003d02:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	0c1a      	lsrs	r2, r3, #16
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	3306      	adds	r3, #6
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	011b      	lsls	r3, r3, #4
 8003d1a:	4413      	add	r3, r2
 8003d1c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	0e1a      	lsrs	r2, r3, #24
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	3307      	adds	r3, #7
 8003d28:	b2d2      	uxtb	r2, r2
 8003d2a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d108      	bne.n	8003d44 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68da      	ldr	r2, [r3, #12]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f042 0220 	orr.w	r2, r2, #32
 8003d40:	60da      	str	r2, [r3, #12]
 8003d42:	e007      	b.n	8003d54 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	691a      	ldr	r2, [r3, #16]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f042 0220 	orr.w	r2, r2, #32
 8003d52:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003d54:	2300      	movs	r3, #0
 8003d56:	e006      	b.n	8003d66 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
  }
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	371c      	adds	r7, #28
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003d72:	b480      	push	{r7}
 8003d74:	b085      	sub	sp, #20
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
 8003d7a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d82:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003d84:	7bfb      	ldrb	r3, [r7, #15]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d002      	beq.n	8003d90 <HAL_CAN_ActivateNotification+0x1e>
 8003d8a:	7bfb      	ldrb	r3, [r7, #15]
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d109      	bne.n	8003da4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	6959      	ldr	r1, [r3, #20]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003da0:	2300      	movs	r3, #0
 8003da2:	e006      	b.n	8003db2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
  }
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3714      	adds	r7, #20
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b08a      	sub	sp, #40	; 0x28
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003dfa:	6a3b      	ldr	r3, [r7, #32]
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d07c      	beq.n	8003efe <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d023      	beq.n	8003e56 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2201      	movs	r2, #1
 8003e14:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d003      	beq.n	8003e28 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f7fd fd03 	bl	800182c <HAL_CAN_TxMailbox0CompleteCallback>
 8003e26:	e016      	b.n	8003e56 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	f003 0304 	and.w	r3, r3, #4
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d004      	beq.n	8003e3c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e38:	627b      	str	r3, [r7, #36]	; 0x24
 8003e3a:	e00c      	b.n	8003e56 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	f003 0308 	and.w	r3, r3, #8
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d004      	beq.n	8003e50 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e4e:	e002      	b.n	8003e56 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 f97f 	bl	8004154 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d024      	beq.n	8003eaa <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e68:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d003      	beq.n	8003e7c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 f959 	bl	800412c <HAL_CAN_TxMailbox1CompleteCallback>
 8003e7a:	e016      	b.n	8003eaa <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d004      	beq.n	8003e90 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e8e:	e00c      	b.n	8003eaa <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d004      	beq.n	8003ea4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea2:	e002      	b.n	8003eaa <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 f95f 	bl	8004168 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d024      	beq.n	8003efe <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003ebc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d003      	beq.n	8003ed0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 f939 	bl	8004140 <HAL_CAN_TxMailbox2CompleteCallback>
 8003ece:	e016      	b.n	8003efe <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d004      	beq.n	8003ee4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003edc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ee2:	e00c      	b.n	8003efe <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d004      	beq.n	8003ef8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ef6:	e002      	b.n	8003efe <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 f93f 	bl	800417c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003efe:	6a3b      	ldr	r3, [r7, #32]
 8003f00:	f003 0308 	and.w	r3, r3, #8
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00c      	beq.n	8003f22 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	f003 0310 	and.w	r3, r3, #16
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d007      	beq.n	8003f22 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f18:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2210      	movs	r2, #16
 8003f20:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003f22:	6a3b      	ldr	r3, [r7, #32]
 8003f24:	f003 0304 	and.w	r3, r3, #4
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00b      	beq.n	8003f44 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f003 0308 	and.w	r3, r3, #8
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d006      	beq.n	8003f44 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2208      	movs	r2, #8
 8003f3c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f926 	bl	8004190 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003f44:	6a3b      	ldr	r3, [r7, #32]
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d009      	beq.n	8003f62 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	f003 0303 	and.w	r3, r3, #3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d002      	beq.n	8003f62 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7fd fc77 	bl	8001850 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00c      	beq.n	8003f86 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	f003 0310 	and.w	r3, r3, #16
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d007      	beq.n	8003f86 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f7c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2210      	movs	r2, #16
 8003f84:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003f86:	6a3b      	ldr	r3, [r7, #32]
 8003f88:	f003 0320 	and.w	r3, r3, #32
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00b      	beq.n	8003fa8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	f003 0308 	and.w	r3, r3, #8
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d006      	beq.n	8003fa8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2208      	movs	r2, #8
 8003fa0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f908 	bl	80041b8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003fa8:	6a3b      	ldr	r3, [r7, #32]
 8003faa:	f003 0310 	and.w	r3, r3, #16
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d009      	beq.n	8003fc6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	f003 0303 	and.w	r3, r3, #3
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d002      	beq.n	8003fc6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 f8ef 	bl	80041a4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00b      	beq.n	8003fe8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	f003 0310 	and.w	r3, r3, #16
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d006      	beq.n	8003fe8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2210      	movs	r2, #16
 8003fe0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f8f2 	bl	80041cc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003fe8:	6a3b      	ldr	r3, [r7, #32]
 8003fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00b      	beq.n	800400a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	f003 0308 	and.w	r3, r3, #8
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d006      	beq.n	800400a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2208      	movs	r2, #8
 8004002:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 f8eb 	bl	80041e0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800400a:	6a3b      	ldr	r3, [r7, #32]
 800400c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d07b      	beq.n	800410c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	f003 0304 	and.w	r3, r3, #4
 800401a:	2b00      	cmp	r3, #0
 800401c:	d072      	beq.n	8004104 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800401e:	6a3b      	ldr	r3, [r7, #32]
 8004020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004024:	2b00      	cmp	r3, #0
 8004026:	d008      	beq.n	800403a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800402e:	2b00      	cmp	r3, #0
 8004030:	d003      	beq.n	800403a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004034:	f043 0301 	orr.w	r3, r3, #1
 8004038:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800403a:	6a3b      	ldr	r3, [r7, #32]
 800403c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004040:	2b00      	cmp	r3, #0
 8004042:	d008      	beq.n	8004056 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800404a:	2b00      	cmp	r3, #0
 800404c:	d003      	beq.n	8004056 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800404e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004050:	f043 0302 	orr.w	r3, r3, #2
 8004054:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004056:	6a3b      	ldr	r3, [r7, #32]
 8004058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800405c:	2b00      	cmp	r3, #0
 800405e:	d008      	beq.n	8004072 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800406a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406c:	f043 0304 	orr.w	r3, r3, #4
 8004070:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004072:	6a3b      	ldr	r3, [r7, #32]
 8004074:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004078:	2b00      	cmp	r3, #0
 800407a:	d043      	beq.n	8004104 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004082:	2b00      	cmp	r3, #0
 8004084:	d03e      	beq.n	8004104 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800408c:	2b60      	cmp	r3, #96	; 0x60
 800408e:	d02b      	beq.n	80040e8 <HAL_CAN_IRQHandler+0x32a>
 8004090:	2b60      	cmp	r3, #96	; 0x60
 8004092:	d82e      	bhi.n	80040f2 <HAL_CAN_IRQHandler+0x334>
 8004094:	2b50      	cmp	r3, #80	; 0x50
 8004096:	d022      	beq.n	80040de <HAL_CAN_IRQHandler+0x320>
 8004098:	2b50      	cmp	r3, #80	; 0x50
 800409a:	d82a      	bhi.n	80040f2 <HAL_CAN_IRQHandler+0x334>
 800409c:	2b40      	cmp	r3, #64	; 0x40
 800409e:	d019      	beq.n	80040d4 <HAL_CAN_IRQHandler+0x316>
 80040a0:	2b40      	cmp	r3, #64	; 0x40
 80040a2:	d826      	bhi.n	80040f2 <HAL_CAN_IRQHandler+0x334>
 80040a4:	2b30      	cmp	r3, #48	; 0x30
 80040a6:	d010      	beq.n	80040ca <HAL_CAN_IRQHandler+0x30c>
 80040a8:	2b30      	cmp	r3, #48	; 0x30
 80040aa:	d822      	bhi.n	80040f2 <HAL_CAN_IRQHandler+0x334>
 80040ac:	2b10      	cmp	r3, #16
 80040ae:	d002      	beq.n	80040b6 <HAL_CAN_IRQHandler+0x2f8>
 80040b0:	2b20      	cmp	r3, #32
 80040b2:	d005      	beq.n	80040c0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80040b4:	e01d      	b.n	80040f2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80040b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b8:	f043 0308 	orr.w	r3, r3, #8
 80040bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040be:	e019      	b.n	80040f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80040c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c2:	f043 0310 	orr.w	r3, r3, #16
 80040c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040c8:	e014      	b.n	80040f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	f043 0320 	orr.w	r3, r3, #32
 80040d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040d2:	e00f      	b.n	80040f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80040d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040dc:	e00a      	b.n	80040f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80040de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040e4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040e6:	e005      	b.n	80040f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80040e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040f0:	e000      	b.n	80040f4 <HAL_CAN_IRQHandler+0x336>
            break;
 80040f2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	699a      	ldr	r2, [r3, #24]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004102:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2204      	movs	r2, #4
 800410a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410e:	2b00      	cmp	r3, #0
 8004110:	d008      	beq.n	8004124 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004118:	431a      	orrs	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f868 	bl	80041f4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004124:	bf00      	nop
 8004126:	3728      	adds	r7, #40	; 0x28
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f003 0307 	and.w	r3, r3, #7
 8004216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004218:	4b0c      	ldr	r3, [pc, #48]	; (800424c <__NVIC_SetPriorityGrouping+0x44>)
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004224:	4013      	ands	r3, r2
 8004226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004230:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004238:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800423a:	4a04      	ldr	r2, [pc, #16]	; (800424c <__NVIC_SetPriorityGrouping+0x44>)
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	60d3      	str	r3, [r2, #12]
}
 8004240:	bf00      	nop
 8004242:	3714      	adds	r7, #20
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	e000ed00 	.word	0xe000ed00

08004250 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004250:	b480      	push	{r7}
 8004252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004254:	4b04      	ldr	r3, [pc, #16]	; (8004268 <__NVIC_GetPriorityGrouping+0x18>)
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	0a1b      	lsrs	r3, r3, #8
 800425a:	f003 0307 	and.w	r3, r3, #7
}
 800425e:	4618      	mov	r0, r3
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr
 8004268:	e000ed00 	.word	0xe000ed00

0800426c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	4603      	mov	r3, r0
 8004274:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800427a:	2b00      	cmp	r3, #0
 800427c:	db0b      	blt.n	8004296 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800427e:	79fb      	ldrb	r3, [r7, #7]
 8004280:	f003 021f 	and.w	r2, r3, #31
 8004284:	4907      	ldr	r1, [pc, #28]	; (80042a4 <__NVIC_EnableIRQ+0x38>)
 8004286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800428a:	095b      	lsrs	r3, r3, #5
 800428c:	2001      	movs	r0, #1
 800428e:	fa00 f202 	lsl.w	r2, r0, r2
 8004292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	e000e100 	.word	0xe000e100

080042a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	4603      	mov	r3, r0
 80042b0:	6039      	str	r1, [r7, #0]
 80042b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	db0a      	blt.n	80042d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	b2da      	uxtb	r2, r3
 80042c0:	490c      	ldr	r1, [pc, #48]	; (80042f4 <__NVIC_SetPriority+0x4c>)
 80042c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c6:	0112      	lsls	r2, r2, #4
 80042c8:	b2d2      	uxtb	r2, r2
 80042ca:	440b      	add	r3, r1
 80042cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042d0:	e00a      	b.n	80042e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	4908      	ldr	r1, [pc, #32]	; (80042f8 <__NVIC_SetPriority+0x50>)
 80042d8:	79fb      	ldrb	r3, [r7, #7]
 80042da:	f003 030f 	and.w	r3, r3, #15
 80042de:	3b04      	subs	r3, #4
 80042e0:	0112      	lsls	r2, r2, #4
 80042e2:	b2d2      	uxtb	r2, r2
 80042e4:	440b      	add	r3, r1
 80042e6:	761a      	strb	r2, [r3, #24]
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr
 80042f4:	e000e100 	.word	0xe000e100
 80042f8:	e000ed00 	.word	0xe000ed00

080042fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b089      	sub	sp, #36	; 0x24
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f003 0307 	and.w	r3, r3, #7
 800430e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	f1c3 0307 	rsb	r3, r3, #7
 8004316:	2b04      	cmp	r3, #4
 8004318:	bf28      	it	cs
 800431a:	2304      	movcs	r3, #4
 800431c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	3304      	adds	r3, #4
 8004322:	2b06      	cmp	r3, #6
 8004324:	d902      	bls.n	800432c <NVIC_EncodePriority+0x30>
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	3b03      	subs	r3, #3
 800432a:	e000      	b.n	800432e <NVIC_EncodePriority+0x32>
 800432c:	2300      	movs	r3, #0
 800432e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004330:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	fa02 f303 	lsl.w	r3, r2, r3
 800433a:	43da      	mvns	r2, r3
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	401a      	ands	r2, r3
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004344:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	fa01 f303 	lsl.w	r3, r1, r3
 800434e:	43d9      	mvns	r1, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004354:	4313      	orrs	r3, r2
         );
}
 8004356:	4618      	mov	r0, r3
 8004358:	3724      	adds	r7, #36	; 0x24
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
	...

08004364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	3b01      	subs	r3, #1
 8004370:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004374:	d301      	bcc.n	800437a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004376:	2301      	movs	r3, #1
 8004378:	e00f      	b.n	800439a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800437a:	4a0a      	ldr	r2, [pc, #40]	; (80043a4 <SysTick_Config+0x40>)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3b01      	subs	r3, #1
 8004380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004382:	210f      	movs	r1, #15
 8004384:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004388:	f7ff ff8e 	bl	80042a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800438c:	4b05      	ldr	r3, [pc, #20]	; (80043a4 <SysTick_Config+0x40>)
 800438e:	2200      	movs	r2, #0
 8004390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004392:	4b04      	ldr	r3, [pc, #16]	; (80043a4 <SysTick_Config+0x40>)
 8004394:	2207      	movs	r2, #7
 8004396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	e000e010 	.word	0xe000e010

080043a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f7ff ff29 	bl	8004208 <__NVIC_SetPriorityGrouping>
}
 80043b6:	bf00      	nop
 80043b8:	3708      	adds	r7, #8
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b086      	sub	sp, #24
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	4603      	mov	r3, r0
 80043c6:	60b9      	str	r1, [r7, #8]
 80043c8:	607a      	str	r2, [r7, #4]
 80043ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80043cc:	2300      	movs	r3, #0
 80043ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80043d0:	f7ff ff3e 	bl	8004250 <__NVIC_GetPriorityGrouping>
 80043d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	68b9      	ldr	r1, [r7, #8]
 80043da:	6978      	ldr	r0, [r7, #20]
 80043dc:	f7ff ff8e 	bl	80042fc <NVIC_EncodePriority>
 80043e0:	4602      	mov	r2, r0
 80043e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043e6:	4611      	mov	r1, r2
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7ff ff5d 	bl	80042a8 <__NVIC_SetPriority>
}
 80043ee:	bf00      	nop
 80043f0:	3718      	adds	r7, #24
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b082      	sub	sp, #8
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	4603      	mov	r3, r0
 80043fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004404:	4618      	mov	r0, r3
 8004406:	f7ff ff31 	bl	800426c <__NVIC_EnableIRQ>
}
 800440a:	bf00      	nop
 800440c:	3708      	adds	r7, #8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b082      	sub	sp, #8
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f7ff ffa2 	bl	8004364 <SysTick_Config>
 8004420:	4603      	mov	r3, r0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
	...

0800442c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800442c:	b480      	push	{r7}
 800442e:	b087      	sub	sp, #28
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004436:	2300      	movs	r3, #0
 8004438:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800443a:	e17f      	b.n	800473c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	2101      	movs	r1, #1
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	fa01 f303 	lsl.w	r3, r1, r3
 8004448:	4013      	ands	r3, r2
 800444a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2b00      	cmp	r3, #0
 8004450:	f000 8171 	beq.w	8004736 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f003 0303 	and.w	r3, r3, #3
 800445c:	2b01      	cmp	r3, #1
 800445e:	d005      	beq.n	800446c <HAL_GPIO_Init+0x40>
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f003 0303 	and.w	r3, r3, #3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d130      	bne.n	80044ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	2203      	movs	r2, #3
 8004478:	fa02 f303 	lsl.w	r3, r2, r3
 800447c:	43db      	mvns	r3, r3
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	4013      	ands	r3, r2
 8004482:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	68da      	ldr	r2, [r3, #12]
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	005b      	lsls	r3, r3, #1
 800448c:	fa02 f303 	lsl.w	r3, r2, r3
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	4313      	orrs	r3, r2
 8004494:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044a2:	2201      	movs	r2, #1
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	fa02 f303 	lsl.w	r3, r2, r3
 80044aa:	43db      	mvns	r3, r3
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	4013      	ands	r3, r2
 80044b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	091b      	lsrs	r3, r3, #4
 80044b8:	f003 0201 	and.w	r2, r3, #1
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	fa02 f303 	lsl.w	r3, r2, r3
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f003 0303 	and.w	r3, r3, #3
 80044d6:	2b03      	cmp	r3, #3
 80044d8:	d118      	bne.n	800450c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80044e0:	2201      	movs	r2, #1
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	fa02 f303 	lsl.w	r3, r2, r3
 80044e8:	43db      	mvns	r3, r3
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	4013      	ands	r3, r2
 80044ee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	08db      	lsrs	r3, r3, #3
 80044f6:	f003 0201 	and.w	r2, r3, #1
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	4313      	orrs	r3, r2
 8004504:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f003 0303 	and.w	r3, r3, #3
 8004514:	2b03      	cmp	r3, #3
 8004516:	d017      	beq.n	8004548 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	2203      	movs	r2, #3
 8004524:	fa02 f303 	lsl.w	r3, r2, r3
 8004528:	43db      	mvns	r3, r3
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	4013      	ands	r3, r2
 800452e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	689a      	ldr	r2, [r3, #8]
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	005b      	lsls	r3, r3, #1
 8004538:	fa02 f303 	lsl.w	r3, r2, r3
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	4313      	orrs	r3, r2
 8004540:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f003 0303 	and.w	r3, r3, #3
 8004550:	2b02      	cmp	r3, #2
 8004552:	d123      	bne.n	800459c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	08da      	lsrs	r2, r3, #3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3208      	adds	r2, #8
 800455c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004560:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	220f      	movs	r2, #15
 800456c:	fa02 f303 	lsl.w	r3, r2, r3
 8004570:	43db      	mvns	r3, r3
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	4013      	ands	r3, r2
 8004576:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	691a      	ldr	r2, [r3, #16]
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	f003 0307 	and.w	r3, r3, #7
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	fa02 f303 	lsl.w	r3, r2, r3
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	4313      	orrs	r3, r2
 800458c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	08da      	lsrs	r2, r3, #3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	3208      	adds	r2, #8
 8004596:	6939      	ldr	r1, [r7, #16]
 8004598:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	005b      	lsls	r3, r3, #1
 80045a6:	2203      	movs	r2, #3
 80045a8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ac:	43db      	mvns	r3, r3
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	4013      	ands	r3, r2
 80045b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f003 0203 	and.w	r2, r3, #3
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	005b      	lsls	r3, r3, #1
 80045c0:	fa02 f303 	lsl.w	r3, r2, r3
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f000 80ac 	beq.w	8004736 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045de:	4b5f      	ldr	r3, [pc, #380]	; (800475c <HAL_GPIO_Init+0x330>)
 80045e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045e2:	4a5e      	ldr	r2, [pc, #376]	; (800475c <HAL_GPIO_Init+0x330>)
 80045e4:	f043 0301 	orr.w	r3, r3, #1
 80045e8:	6613      	str	r3, [r2, #96]	; 0x60
 80045ea:	4b5c      	ldr	r3, [pc, #368]	; (800475c <HAL_GPIO_Init+0x330>)
 80045ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	60bb      	str	r3, [r7, #8]
 80045f4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80045f6:	4a5a      	ldr	r2, [pc, #360]	; (8004760 <HAL_GPIO_Init+0x334>)
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	089b      	lsrs	r3, r3, #2
 80045fc:	3302      	adds	r3, #2
 80045fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004602:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	f003 0303 	and.w	r3, r3, #3
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	220f      	movs	r2, #15
 800460e:	fa02 f303 	lsl.w	r3, r2, r3
 8004612:	43db      	mvns	r3, r3
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	4013      	ands	r3, r2
 8004618:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004620:	d025      	beq.n	800466e <HAL_GPIO_Init+0x242>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a4f      	ldr	r2, [pc, #316]	; (8004764 <HAL_GPIO_Init+0x338>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d01f      	beq.n	800466a <HAL_GPIO_Init+0x23e>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a4e      	ldr	r2, [pc, #312]	; (8004768 <HAL_GPIO_Init+0x33c>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d019      	beq.n	8004666 <HAL_GPIO_Init+0x23a>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a4d      	ldr	r2, [pc, #308]	; (800476c <HAL_GPIO_Init+0x340>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d013      	beq.n	8004662 <HAL_GPIO_Init+0x236>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a4c      	ldr	r2, [pc, #304]	; (8004770 <HAL_GPIO_Init+0x344>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d00d      	beq.n	800465e <HAL_GPIO_Init+0x232>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a4b      	ldr	r2, [pc, #300]	; (8004774 <HAL_GPIO_Init+0x348>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d007      	beq.n	800465a <HAL_GPIO_Init+0x22e>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a4a      	ldr	r2, [pc, #296]	; (8004778 <HAL_GPIO_Init+0x34c>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d101      	bne.n	8004656 <HAL_GPIO_Init+0x22a>
 8004652:	2306      	movs	r3, #6
 8004654:	e00c      	b.n	8004670 <HAL_GPIO_Init+0x244>
 8004656:	2307      	movs	r3, #7
 8004658:	e00a      	b.n	8004670 <HAL_GPIO_Init+0x244>
 800465a:	2305      	movs	r3, #5
 800465c:	e008      	b.n	8004670 <HAL_GPIO_Init+0x244>
 800465e:	2304      	movs	r3, #4
 8004660:	e006      	b.n	8004670 <HAL_GPIO_Init+0x244>
 8004662:	2303      	movs	r3, #3
 8004664:	e004      	b.n	8004670 <HAL_GPIO_Init+0x244>
 8004666:	2302      	movs	r3, #2
 8004668:	e002      	b.n	8004670 <HAL_GPIO_Init+0x244>
 800466a:	2301      	movs	r3, #1
 800466c:	e000      	b.n	8004670 <HAL_GPIO_Init+0x244>
 800466e:	2300      	movs	r3, #0
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	f002 0203 	and.w	r2, r2, #3
 8004676:	0092      	lsls	r2, r2, #2
 8004678:	4093      	lsls	r3, r2
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	4313      	orrs	r3, r2
 800467e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004680:	4937      	ldr	r1, [pc, #220]	; (8004760 <HAL_GPIO_Init+0x334>)
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	089b      	lsrs	r3, r3, #2
 8004686:	3302      	adds	r3, #2
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800468e:	4b3b      	ldr	r3, [pc, #236]	; (800477c <HAL_GPIO_Init+0x350>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	43db      	mvns	r3, r3
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	4013      	ands	r3, r2
 800469c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d003      	beq.n	80046b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80046b2:	4a32      	ldr	r2, [pc, #200]	; (800477c <HAL_GPIO_Init+0x350>)
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80046b8:	4b30      	ldr	r3, [pc, #192]	; (800477c <HAL_GPIO_Init+0x350>)
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	43db      	mvns	r3, r3
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	4013      	ands	r3, r2
 80046c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d003      	beq.n	80046dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	4313      	orrs	r3, r2
 80046da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80046dc:	4a27      	ldr	r2, [pc, #156]	; (800477c <HAL_GPIO_Init+0x350>)
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80046e2:	4b26      	ldr	r3, [pc, #152]	; (800477c <HAL_GPIO_Init+0x350>)
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	43db      	mvns	r3, r3
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	4013      	ands	r3, r2
 80046f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d003      	beq.n	8004706 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	4313      	orrs	r3, r2
 8004704:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004706:	4a1d      	ldr	r2, [pc, #116]	; (800477c <HAL_GPIO_Init+0x350>)
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800470c:	4b1b      	ldr	r3, [pc, #108]	; (800477c <HAL_GPIO_Init+0x350>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	43db      	mvns	r3, r3
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	4013      	ands	r3, r2
 800471a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d003      	beq.n	8004730 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	4313      	orrs	r3, r2
 800472e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004730:	4a12      	ldr	r2, [pc, #72]	; (800477c <HAL_GPIO_Init+0x350>)
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	3301      	adds	r3, #1
 800473a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	fa22 f303 	lsr.w	r3, r2, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	f47f ae78 	bne.w	800443c <HAL_GPIO_Init+0x10>
  }
}
 800474c:	bf00      	nop
 800474e:	bf00      	nop
 8004750:	371c      	adds	r7, #28
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	40021000 	.word	0x40021000
 8004760:	40010000 	.word	0x40010000
 8004764:	48000400 	.word	0x48000400
 8004768:	48000800 	.word	0x48000800
 800476c:	48000c00 	.word	0x48000c00
 8004770:	48001000 	.word	0x48001000
 8004774:	48001400 	.word	0x48001400
 8004778:	48001800 	.word	0x48001800
 800477c:	40010400 	.word	0x40010400

08004780 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	460b      	mov	r3, r1
 800478a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	691a      	ldr	r2, [r3, #16]
 8004790:	887b      	ldrh	r3, [r7, #2]
 8004792:	4013      	ands	r3, r2
 8004794:	2b00      	cmp	r3, #0
 8004796:	d002      	beq.n	800479e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004798:	2301      	movs	r3, #1
 800479a:	73fb      	strb	r3, [r7, #15]
 800479c:	e001      	b.n	80047a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800479e:	2300      	movs	r3, #0
 80047a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80047a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3714      	adds	r7, #20
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	460b      	mov	r3, r1
 80047ba:	807b      	strh	r3, [r7, #2]
 80047bc:	4613      	mov	r3, r2
 80047be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047c0:	787b      	ldrb	r3, [r7, #1]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d003      	beq.n	80047ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80047c6:	887a      	ldrh	r2, [r7, #2]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80047cc:	e002      	b.n	80047d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80047ce:	887a      	ldrh	r2, [r7, #2]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80047e0:	b480      	push	{r7}
 80047e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80047e4:	4b04      	ldr	r3, [pc, #16]	; (80047f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	40007000 	.word	0x40007000

080047fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800480a:	d130      	bne.n	800486e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800480c:	4b23      	ldr	r3, [pc, #140]	; (800489c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004818:	d038      	beq.n	800488c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800481a:	4b20      	ldr	r3, [pc, #128]	; (800489c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004822:	4a1e      	ldr	r2, [pc, #120]	; (800489c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004824:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004828:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800482a:	4b1d      	ldr	r3, [pc, #116]	; (80048a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2232      	movs	r2, #50	; 0x32
 8004830:	fb02 f303 	mul.w	r3, r2, r3
 8004834:	4a1b      	ldr	r2, [pc, #108]	; (80048a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004836:	fba2 2303 	umull	r2, r3, r2, r3
 800483a:	0c9b      	lsrs	r3, r3, #18
 800483c:	3301      	adds	r3, #1
 800483e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004840:	e002      	b.n	8004848 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	3b01      	subs	r3, #1
 8004846:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004848:	4b14      	ldr	r3, [pc, #80]	; (800489c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004850:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004854:	d102      	bne.n	800485c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d1f2      	bne.n	8004842 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800485c:	4b0f      	ldr	r3, [pc, #60]	; (800489c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800485e:	695b      	ldr	r3, [r3, #20]
 8004860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004864:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004868:	d110      	bne.n	800488c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e00f      	b.n	800488e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800486e:	4b0b      	ldr	r3, [pc, #44]	; (800489c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004876:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800487a:	d007      	beq.n	800488c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800487c:	4b07      	ldr	r3, [pc, #28]	; (800489c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004884:	4a05      	ldr	r2, [pc, #20]	; (800489c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004886:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800488a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3714      	adds	r7, #20
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	40007000 	.word	0x40007000
 80048a0:	20000004 	.word	0x20000004
 80048a4:	431bde83 	.word	0x431bde83

080048a8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b088      	sub	sp, #32
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e3ca      	b.n	8005050 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048ba:	4b97      	ldr	r3, [pc, #604]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f003 030c 	and.w	r3, r3, #12
 80048c2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048c4:	4b94      	ldr	r3, [pc, #592]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	f003 0303 	and.w	r3, r3, #3
 80048cc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0310 	and.w	r3, r3, #16
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f000 80e4 	beq.w	8004aa4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d007      	beq.n	80048f2 <HAL_RCC_OscConfig+0x4a>
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	2b0c      	cmp	r3, #12
 80048e6:	f040 808b 	bne.w	8004a00 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	f040 8087 	bne.w	8004a00 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80048f2:	4b89      	ldr	r3, [pc, #548]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d005      	beq.n	800490a <HAL_RCC_OscConfig+0x62>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e3a2      	b.n	8005050 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a1a      	ldr	r2, [r3, #32]
 800490e:	4b82      	ldr	r3, [pc, #520]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0308 	and.w	r3, r3, #8
 8004916:	2b00      	cmp	r3, #0
 8004918:	d004      	beq.n	8004924 <HAL_RCC_OscConfig+0x7c>
 800491a:	4b7f      	ldr	r3, [pc, #508]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004922:	e005      	b.n	8004930 <HAL_RCC_OscConfig+0x88>
 8004924:	4b7c      	ldr	r3, [pc, #496]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 8004926:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800492a:	091b      	lsrs	r3, r3, #4
 800492c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004930:	4293      	cmp	r3, r2
 8004932:	d223      	bcs.n	800497c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a1b      	ldr	r3, [r3, #32]
 8004938:	4618      	mov	r0, r3
 800493a:	f000 fd55 	bl	80053e8 <RCC_SetFlashLatencyFromMSIRange>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d001      	beq.n	8004948 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e383      	b.n	8005050 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004948:	4b73      	ldr	r3, [pc, #460]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a72      	ldr	r2, [pc, #456]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 800494e:	f043 0308 	orr.w	r3, r3, #8
 8004952:	6013      	str	r3, [r2, #0]
 8004954:	4b70      	ldr	r3, [pc, #448]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a1b      	ldr	r3, [r3, #32]
 8004960:	496d      	ldr	r1, [pc, #436]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 8004962:	4313      	orrs	r3, r2
 8004964:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004966:	4b6c      	ldr	r3, [pc, #432]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	69db      	ldr	r3, [r3, #28]
 8004972:	021b      	lsls	r3, r3, #8
 8004974:	4968      	ldr	r1, [pc, #416]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 8004976:	4313      	orrs	r3, r2
 8004978:	604b      	str	r3, [r1, #4]
 800497a:	e025      	b.n	80049c8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800497c:	4b66      	ldr	r3, [pc, #408]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a65      	ldr	r2, [pc, #404]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 8004982:	f043 0308 	orr.w	r3, r3, #8
 8004986:	6013      	str	r3, [r2, #0]
 8004988:	4b63      	ldr	r3, [pc, #396]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a1b      	ldr	r3, [r3, #32]
 8004994:	4960      	ldr	r1, [pc, #384]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 8004996:	4313      	orrs	r3, r2
 8004998:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800499a:	4b5f      	ldr	r3, [pc, #380]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	021b      	lsls	r3, r3, #8
 80049a8:	495b      	ldr	r1, [pc, #364]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d109      	bne.n	80049c8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a1b      	ldr	r3, [r3, #32]
 80049b8:	4618      	mov	r0, r3
 80049ba:	f000 fd15 	bl	80053e8 <RCC_SetFlashLatencyFromMSIRange>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d001      	beq.n	80049c8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e343      	b.n	8005050 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049c8:	f000 fc4a 	bl	8005260 <HAL_RCC_GetSysClockFreq>
 80049cc:	4602      	mov	r2, r0
 80049ce:	4b52      	ldr	r3, [pc, #328]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	091b      	lsrs	r3, r3, #4
 80049d4:	f003 030f 	and.w	r3, r3, #15
 80049d8:	4950      	ldr	r1, [pc, #320]	; (8004b1c <HAL_RCC_OscConfig+0x274>)
 80049da:	5ccb      	ldrb	r3, [r1, r3]
 80049dc:	f003 031f 	and.w	r3, r3, #31
 80049e0:	fa22 f303 	lsr.w	r3, r2, r3
 80049e4:	4a4e      	ldr	r2, [pc, #312]	; (8004b20 <HAL_RCC_OscConfig+0x278>)
 80049e6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80049e8:	4b4e      	ldr	r3, [pc, #312]	; (8004b24 <HAL_RCC_OscConfig+0x27c>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7fd fb23 	bl	8002038 <HAL_InitTick>
 80049f2:	4603      	mov	r3, r0
 80049f4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80049f6:	7bfb      	ldrb	r3, [r7, #15]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d052      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80049fc:	7bfb      	ldrb	r3, [r7, #15]
 80049fe:	e327      	b.n	8005050 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d032      	beq.n	8004a6e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004a08:	4b43      	ldr	r3, [pc, #268]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a42      	ldr	r2, [pc, #264]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 8004a0e:	f043 0301 	orr.w	r3, r3, #1
 8004a12:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a14:	f7fd fb60 	bl	80020d8 <HAL_GetTick>
 8004a18:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a1c:	f7fd fb5c 	bl	80020d8 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e310      	b.n	8005050 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a2e:	4b3a      	ldr	r3, [pc, #232]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0f0      	beq.n	8004a1c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a3a:	4b37      	ldr	r3, [pc, #220]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a36      	ldr	r2, [pc, #216]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 8004a40:	f043 0308 	orr.w	r3, r3, #8
 8004a44:	6013      	str	r3, [r2, #0]
 8004a46:	4b34      	ldr	r3, [pc, #208]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	4931      	ldr	r1, [pc, #196]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a58:	4b2f      	ldr	r3, [pc, #188]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	69db      	ldr	r3, [r3, #28]
 8004a64:	021b      	lsls	r3, r3, #8
 8004a66:	492c      	ldr	r1, [pc, #176]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	604b      	str	r3, [r1, #4]
 8004a6c:	e01a      	b.n	8004aa4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004a6e:	4b2a      	ldr	r3, [pc, #168]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a29      	ldr	r2, [pc, #164]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 8004a74:	f023 0301 	bic.w	r3, r3, #1
 8004a78:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a7a:	f7fd fb2d 	bl	80020d8 <HAL_GetTick>
 8004a7e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a80:	e008      	b.n	8004a94 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a82:	f7fd fb29 	bl	80020d8 <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d901      	bls.n	8004a94 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e2dd      	b.n	8005050 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a94:	4b20      	ldr	r3, [pc, #128]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0302 	and.w	r3, r3, #2
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d1f0      	bne.n	8004a82 <HAL_RCC_OscConfig+0x1da>
 8004aa0:	e000      	b.n	8004aa4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004aa2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0301 	and.w	r3, r3, #1
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d074      	beq.n	8004b9a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	2b08      	cmp	r3, #8
 8004ab4:	d005      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x21a>
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	2b0c      	cmp	r3, #12
 8004aba:	d10e      	bne.n	8004ada <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	2b03      	cmp	r3, #3
 8004ac0:	d10b      	bne.n	8004ada <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ac2:	4b15      	ldr	r3, [pc, #84]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d064      	beq.n	8004b98 <HAL_RCC_OscConfig+0x2f0>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d160      	bne.n	8004b98 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e2ba      	b.n	8005050 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ae2:	d106      	bne.n	8004af2 <HAL_RCC_OscConfig+0x24a>
 8004ae4:	4b0c      	ldr	r3, [pc, #48]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a0b      	ldr	r2, [pc, #44]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 8004aea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aee:	6013      	str	r3, [r2, #0]
 8004af0:	e026      	b.n	8004b40 <HAL_RCC_OscConfig+0x298>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004afa:	d115      	bne.n	8004b28 <HAL_RCC_OscConfig+0x280>
 8004afc:	4b06      	ldr	r3, [pc, #24]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a05      	ldr	r2, [pc, #20]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 8004b02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b06:	6013      	str	r3, [r2, #0]
 8004b08:	4b03      	ldr	r3, [pc, #12]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a02      	ldr	r2, [pc, #8]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 8004b0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b12:	6013      	str	r3, [r2, #0]
 8004b14:	e014      	b.n	8004b40 <HAL_RCC_OscConfig+0x298>
 8004b16:	bf00      	nop
 8004b18:	40021000 	.word	0x40021000
 8004b1c:	08009bbc 	.word	0x08009bbc
 8004b20:	20000004 	.word	0x20000004
 8004b24:	20000008 	.word	0x20000008
 8004b28:	4ba0      	ldr	r3, [pc, #640]	; (8004dac <HAL_RCC_OscConfig+0x504>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a9f      	ldr	r2, [pc, #636]	; (8004dac <HAL_RCC_OscConfig+0x504>)
 8004b2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b32:	6013      	str	r3, [r2, #0]
 8004b34:	4b9d      	ldr	r3, [pc, #628]	; (8004dac <HAL_RCC_OscConfig+0x504>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a9c      	ldr	r2, [pc, #624]	; (8004dac <HAL_RCC_OscConfig+0x504>)
 8004b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d013      	beq.n	8004b70 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b48:	f7fd fac6 	bl	80020d8 <HAL_GetTick>
 8004b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b50:	f7fd fac2 	bl	80020d8 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b64      	cmp	r3, #100	; 0x64
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e276      	b.n	8005050 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b62:	4b92      	ldr	r3, [pc, #584]	; (8004dac <HAL_RCC_OscConfig+0x504>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d0f0      	beq.n	8004b50 <HAL_RCC_OscConfig+0x2a8>
 8004b6e:	e014      	b.n	8004b9a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b70:	f7fd fab2 	bl	80020d8 <HAL_GetTick>
 8004b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b76:	e008      	b.n	8004b8a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b78:	f7fd faae 	bl	80020d8 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2b64      	cmp	r3, #100	; 0x64
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e262      	b.n	8005050 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b8a:	4b88      	ldr	r3, [pc, #544]	; (8004dac <HAL_RCC_OscConfig+0x504>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1f0      	bne.n	8004b78 <HAL_RCC_OscConfig+0x2d0>
 8004b96:	e000      	b.n	8004b9a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d060      	beq.n	8004c68 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	2b04      	cmp	r3, #4
 8004baa:	d005      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x310>
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	2b0c      	cmp	r3, #12
 8004bb0:	d119      	bne.n	8004be6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d116      	bne.n	8004be6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bb8:	4b7c      	ldr	r3, [pc, #496]	; (8004dac <HAL_RCC_OscConfig+0x504>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d005      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x328>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d101      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e23f      	b.n	8005050 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bd0:	4b76      	ldr	r3, [pc, #472]	; (8004dac <HAL_RCC_OscConfig+0x504>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	061b      	lsls	r3, r3, #24
 8004bde:	4973      	ldr	r1, [pc, #460]	; (8004dac <HAL_RCC_OscConfig+0x504>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004be4:	e040      	b.n	8004c68 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d023      	beq.n	8004c36 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bee:	4b6f      	ldr	r3, [pc, #444]	; (8004dac <HAL_RCC_OscConfig+0x504>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a6e      	ldr	r2, [pc, #440]	; (8004dac <HAL_RCC_OscConfig+0x504>)
 8004bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bfa:	f7fd fa6d 	bl	80020d8 <HAL_GetTick>
 8004bfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c00:	e008      	b.n	8004c14 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c02:	f7fd fa69 	bl	80020d8 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d901      	bls.n	8004c14 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e21d      	b.n	8005050 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c14:	4b65      	ldr	r3, [pc, #404]	; (8004dac <HAL_RCC_OscConfig+0x504>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d0f0      	beq.n	8004c02 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c20:	4b62      	ldr	r3, [pc, #392]	; (8004dac <HAL_RCC_OscConfig+0x504>)
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	061b      	lsls	r3, r3, #24
 8004c2e:	495f      	ldr	r1, [pc, #380]	; (8004dac <HAL_RCC_OscConfig+0x504>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	604b      	str	r3, [r1, #4]
 8004c34:	e018      	b.n	8004c68 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c36:	4b5d      	ldr	r3, [pc, #372]	; (8004dac <HAL_RCC_OscConfig+0x504>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a5c      	ldr	r2, [pc, #368]	; (8004dac <HAL_RCC_OscConfig+0x504>)
 8004c3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c42:	f7fd fa49 	bl	80020d8 <HAL_GetTick>
 8004c46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c48:	e008      	b.n	8004c5c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c4a:	f7fd fa45 	bl	80020d8 <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d901      	bls.n	8004c5c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e1f9      	b.n	8005050 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c5c:	4b53      	ldr	r3, [pc, #332]	; (8004dac <HAL_RCC_OscConfig+0x504>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1f0      	bne.n	8004c4a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0308 	and.w	r3, r3, #8
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d03c      	beq.n	8004cee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	695b      	ldr	r3, [r3, #20]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d01c      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c7c:	4b4b      	ldr	r3, [pc, #300]	; (8004dac <HAL_RCC_OscConfig+0x504>)
 8004c7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c82:	4a4a      	ldr	r2, [pc, #296]	; (8004dac <HAL_RCC_OscConfig+0x504>)
 8004c84:	f043 0301 	orr.w	r3, r3, #1
 8004c88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c8c:	f7fd fa24 	bl	80020d8 <HAL_GetTick>
 8004c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c92:	e008      	b.n	8004ca6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c94:	f7fd fa20 	bl	80020d8 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e1d4      	b.n	8005050 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ca6:	4b41      	ldr	r3, [pc, #260]	; (8004dac <HAL_RCC_OscConfig+0x504>)
 8004ca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cac:	f003 0302 	and.w	r3, r3, #2
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d0ef      	beq.n	8004c94 <HAL_RCC_OscConfig+0x3ec>
 8004cb4:	e01b      	b.n	8004cee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cb6:	4b3d      	ldr	r3, [pc, #244]	; (8004dac <HAL_RCC_OscConfig+0x504>)
 8004cb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cbc:	4a3b      	ldr	r2, [pc, #236]	; (8004dac <HAL_RCC_OscConfig+0x504>)
 8004cbe:	f023 0301 	bic.w	r3, r3, #1
 8004cc2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc6:	f7fd fa07 	bl	80020d8 <HAL_GetTick>
 8004cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ccc:	e008      	b.n	8004ce0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cce:	f7fd fa03 	bl	80020d8 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d901      	bls.n	8004ce0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e1b7      	b.n	8005050 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ce0:	4b32      	ldr	r3, [pc, #200]	; (8004dac <HAL_RCC_OscConfig+0x504>)
 8004ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1ef      	bne.n	8004cce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0304 	and.w	r3, r3, #4
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	f000 80a6 	beq.w	8004e48 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004d00:	4b2a      	ldr	r3, [pc, #168]	; (8004dac <HAL_RCC_OscConfig+0x504>)
 8004d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10d      	bne.n	8004d28 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d0c:	4b27      	ldr	r3, [pc, #156]	; (8004dac <HAL_RCC_OscConfig+0x504>)
 8004d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d10:	4a26      	ldr	r2, [pc, #152]	; (8004dac <HAL_RCC_OscConfig+0x504>)
 8004d12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d16:	6593      	str	r3, [r2, #88]	; 0x58
 8004d18:	4b24      	ldr	r3, [pc, #144]	; (8004dac <HAL_RCC_OscConfig+0x504>)
 8004d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d20:	60bb      	str	r3, [r7, #8]
 8004d22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d24:	2301      	movs	r3, #1
 8004d26:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d28:	4b21      	ldr	r3, [pc, #132]	; (8004db0 <HAL_RCC_OscConfig+0x508>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d118      	bne.n	8004d66 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d34:	4b1e      	ldr	r3, [pc, #120]	; (8004db0 <HAL_RCC_OscConfig+0x508>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a1d      	ldr	r2, [pc, #116]	; (8004db0 <HAL_RCC_OscConfig+0x508>)
 8004d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d40:	f7fd f9ca 	bl	80020d8 <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d48:	f7fd f9c6 	bl	80020d8 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e17a      	b.n	8005050 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d5a:	4b15      	ldr	r3, [pc, #84]	; (8004db0 <HAL_RCC_OscConfig+0x508>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0f0      	beq.n	8004d48 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d108      	bne.n	8004d80 <HAL_RCC_OscConfig+0x4d8>
 8004d6e:	4b0f      	ldr	r3, [pc, #60]	; (8004dac <HAL_RCC_OscConfig+0x504>)
 8004d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d74:	4a0d      	ldr	r2, [pc, #52]	; (8004dac <HAL_RCC_OscConfig+0x504>)
 8004d76:	f043 0301 	orr.w	r3, r3, #1
 8004d7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d7e:	e029      	b.n	8004dd4 <HAL_RCC_OscConfig+0x52c>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	2b05      	cmp	r3, #5
 8004d86:	d115      	bne.n	8004db4 <HAL_RCC_OscConfig+0x50c>
 8004d88:	4b08      	ldr	r3, [pc, #32]	; (8004dac <HAL_RCC_OscConfig+0x504>)
 8004d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d8e:	4a07      	ldr	r2, [pc, #28]	; (8004dac <HAL_RCC_OscConfig+0x504>)
 8004d90:	f043 0304 	orr.w	r3, r3, #4
 8004d94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d98:	4b04      	ldr	r3, [pc, #16]	; (8004dac <HAL_RCC_OscConfig+0x504>)
 8004d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d9e:	4a03      	ldr	r2, [pc, #12]	; (8004dac <HAL_RCC_OscConfig+0x504>)
 8004da0:	f043 0301 	orr.w	r3, r3, #1
 8004da4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004da8:	e014      	b.n	8004dd4 <HAL_RCC_OscConfig+0x52c>
 8004daa:	bf00      	nop
 8004dac:	40021000 	.word	0x40021000
 8004db0:	40007000 	.word	0x40007000
 8004db4:	4b9c      	ldr	r3, [pc, #624]	; (8005028 <HAL_RCC_OscConfig+0x780>)
 8004db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dba:	4a9b      	ldr	r2, [pc, #620]	; (8005028 <HAL_RCC_OscConfig+0x780>)
 8004dbc:	f023 0301 	bic.w	r3, r3, #1
 8004dc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004dc4:	4b98      	ldr	r3, [pc, #608]	; (8005028 <HAL_RCC_OscConfig+0x780>)
 8004dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dca:	4a97      	ldr	r2, [pc, #604]	; (8005028 <HAL_RCC_OscConfig+0x780>)
 8004dcc:	f023 0304 	bic.w	r3, r3, #4
 8004dd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d016      	beq.n	8004e0a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ddc:	f7fd f97c 	bl	80020d8 <HAL_GetTick>
 8004de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004de2:	e00a      	b.n	8004dfa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004de4:	f7fd f978 	bl	80020d8 <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e12a      	b.n	8005050 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dfa:	4b8b      	ldr	r3, [pc, #556]	; (8005028 <HAL_RCC_OscConfig+0x780>)
 8004dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e00:	f003 0302 	and.w	r3, r3, #2
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d0ed      	beq.n	8004de4 <HAL_RCC_OscConfig+0x53c>
 8004e08:	e015      	b.n	8004e36 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e0a:	f7fd f965 	bl	80020d8 <HAL_GetTick>
 8004e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e10:	e00a      	b.n	8004e28 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e12:	f7fd f961 	bl	80020d8 <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d901      	bls.n	8004e28 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e113      	b.n	8005050 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e28:	4b7f      	ldr	r3, [pc, #508]	; (8005028 <HAL_RCC_OscConfig+0x780>)
 8004e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1ed      	bne.n	8004e12 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e36:	7ffb      	ldrb	r3, [r7, #31]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d105      	bne.n	8004e48 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e3c:	4b7a      	ldr	r3, [pc, #488]	; (8005028 <HAL_RCC_OscConfig+0x780>)
 8004e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e40:	4a79      	ldr	r2, [pc, #484]	; (8005028 <HAL_RCC_OscConfig+0x780>)
 8004e42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e46:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f000 80fe 	beq.w	800504e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	f040 80d0 	bne.w	8004ffc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004e5c:	4b72      	ldr	r3, [pc, #456]	; (8005028 <HAL_RCC_OscConfig+0x780>)
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f003 0203 	and.w	r2, r3, #3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d130      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d127      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e8c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d11f      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e9c:	2a07      	cmp	r2, #7
 8004e9e:	bf14      	ite	ne
 8004ea0:	2201      	movne	r2, #1
 8004ea2:	2200      	moveq	r2, #0
 8004ea4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d113      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb4:	085b      	lsrs	r3, r3, #1
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d109      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec8:	085b      	lsrs	r3, r3, #1
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d06e      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	2b0c      	cmp	r3, #12
 8004ed6:	d069      	beq.n	8004fac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004ed8:	4b53      	ldr	r3, [pc, #332]	; (8005028 <HAL_RCC_OscConfig+0x780>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d105      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004ee4:	4b50      	ldr	r3, [pc, #320]	; (8005028 <HAL_RCC_OscConfig+0x780>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d001      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e0ad      	b.n	8005050 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004ef4:	4b4c      	ldr	r3, [pc, #304]	; (8005028 <HAL_RCC_OscConfig+0x780>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a4b      	ldr	r2, [pc, #300]	; (8005028 <HAL_RCC_OscConfig+0x780>)
 8004efa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004efe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f00:	f7fd f8ea 	bl	80020d8 <HAL_GetTick>
 8004f04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f06:	e008      	b.n	8004f1a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f08:	f7fd f8e6 	bl	80020d8 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e09a      	b.n	8005050 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f1a:	4b43      	ldr	r3, [pc, #268]	; (8005028 <HAL_RCC_OscConfig+0x780>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1f0      	bne.n	8004f08 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f26:	4b40      	ldr	r3, [pc, #256]	; (8005028 <HAL_RCC_OscConfig+0x780>)
 8004f28:	68da      	ldr	r2, [r3, #12]
 8004f2a:	4b40      	ldr	r3, [pc, #256]	; (800502c <HAL_RCC_OscConfig+0x784>)
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004f36:	3a01      	subs	r2, #1
 8004f38:	0112      	lsls	r2, r2, #4
 8004f3a:	4311      	orrs	r1, r2
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f40:	0212      	lsls	r2, r2, #8
 8004f42:	4311      	orrs	r1, r2
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f48:	0852      	lsrs	r2, r2, #1
 8004f4a:	3a01      	subs	r2, #1
 8004f4c:	0552      	lsls	r2, r2, #21
 8004f4e:	4311      	orrs	r1, r2
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004f54:	0852      	lsrs	r2, r2, #1
 8004f56:	3a01      	subs	r2, #1
 8004f58:	0652      	lsls	r2, r2, #25
 8004f5a:	4311      	orrs	r1, r2
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f60:	0912      	lsrs	r2, r2, #4
 8004f62:	0452      	lsls	r2, r2, #17
 8004f64:	430a      	orrs	r2, r1
 8004f66:	4930      	ldr	r1, [pc, #192]	; (8005028 <HAL_RCC_OscConfig+0x780>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004f6c:	4b2e      	ldr	r3, [pc, #184]	; (8005028 <HAL_RCC_OscConfig+0x780>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a2d      	ldr	r2, [pc, #180]	; (8005028 <HAL_RCC_OscConfig+0x780>)
 8004f72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f76:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f78:	4b2b      	ldr	r3, [pc, #172]	; (8005028 <HAL_RCC_OscConfig+0x780>)
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	4a2a      	ldr	r2, [pc, #168]	; (8005028 <HAL_RCC_OscConfig+0x780>)
 8004f7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f84:	f7fd f8a8 	bl	80020d8 <HAL_GetTick>
 8004f88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f8a:	e008      	b.n	8004f9e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f8c:	f7fd f8a4 	bl	80020d8 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d901      	bls.n	8004f9e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e058      	b.n	8005050 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f9e:	4b22      	ldr	r3, [pc, #136]	; (8005028 <HAL_RCC_OscConfig+0x780>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d0f0      	beq.n	8004f8c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004faa:	e050      	b.n	800504e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e04f      	b.n	8005050 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fb0:	4b1d      	ldr	r3, [pc, #116]	; (8005028 <HAL_RCC_OscConfig+0x780>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d148      	bne.n	800504e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004fbc:	4b1a      	ldr	r3, [pc, #104]	; (8005028 <HAL_RCC_OscConfig+0x780>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a19      	ldr	r2, [pc, #100]	; (8005028 <HAL_RCC_OscConfig+0x780>)
 8004fc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fc6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004fc8:	4b17      	ldr	r3, [pc, #92]	; (8005028 <HAL_RCC_OscConfig+0x780>)
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	4a16      	ldr	r2, [pc, #88]	; (8005028 <HAL_RCC_OscConfig+0x780>)
 8004fce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fd2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004fd4:	f7fd f880 	bl	80020d8 <HAL_GetTick>
 8004fd8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fda:	e008      	b.n	8004fee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fdc:	f7fd f87c 	bl	80020d8 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e030      	b.n	8005050 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fee:	4b0e      	ldr	r3, [pc, #56]	; (8005028 <HAL_RCC_OscConfig+0x780>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d0f0      	beq.n	8004fdc <HAL_RCC_OscConfig+0x734>
 8004ffa:	e028      	b.n	800504e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	2b0c      	cmp	r3, #12
 8005000:	d023      	beq.n	800504a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005002:	4b09      	ldr	r3, [pc, #36]	; (8005028 <HAL_RCC_OscConfig+0x780>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a08      	ldr	r2, [pc, #32]	; (8005028 <HAL_RCC_OscConfig+0x780>)
 8005008:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800500c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800500e:	f7fd f863 	bl	80020d8 <HAL_GetTick>
 8005012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005014:	e00c      	b.n	8005030 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005016:	f7fd f85f 	bl	80020d8 <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	2b02      	cmp	r3, #2
 8005022:	d905      	bls.n	8005030 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e013      	b.n	8005050 <HAL_RCC_OscConfig+0x7a8>
 8005028:	40021000 	.word	0x40021000
 800502c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005030:	4b09      	ldr	r3, [pc, #36]	; (8005058 <HAL_RCC_OscConfig+0x7b0>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1ec      	bne.n	8005016 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800503c:	4b06      	ldr	r3, [pc, #24]	; (8005058 <HAL_RCC_OscConfig+0x7b0>)
 800503e:	68da      	ldr	r2, [r3, #12]
 8005040:	4905      	ldr	r1, [pc, #20]	; (8005058 <HAL_RCC_OscConfig+0x7b0>)
 8005042:	4b06      	ldr	r3, [pc, #24]	; (800505c <HAL_RCC_OscConfig+0x7b4>)
 8005044:	4013      	ands	r3, r2
 8005046:	60cb      	str	r3, [r1, #12]
 8005048:	e001      	b.n	800504e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e000      	b.n	8005050 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3720      	adds	r7, #32
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	40021000 	.word	0x40021000
 800505c:	feeefffc 	.word	0xfeeefffc

08005060 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d101      	bne.n	8005074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e0e7      	b.n	8005244 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005074:	4b75      	ldr	r3, [pc, #468]	; (800524c <HAL_RCC_ClockConfig+0x1ec>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0307 	and.w	r3, r3, #7
 800507c:	683a      	ldr	r2, [r7, #0]
 800507e:	429a      	cmp	r2, r3
 8005080:	d910      	bls.n	80050a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005082:	4b72      	ldr	r3, [pc, #456]	; (800524c <HAL_RCC_ClockConfig+0x1ec>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f023 0207 	bic.w	r2, r3, #7
 800508a:	4970      	ldr	r1, [pc, #448]	; (800524c <HAL_RCC_ClockConfig+0x1ec>)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	4313      	orrs	r3, r2
 8005090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005092:	4b6e      	ldr	r3, [pc, #440]	; (800524c <HAL_RCC_ClockConfig+0x1ec>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0307 	and.w	r3, r3, #7
 800509a:	683a      	ldr	r2, [r7, #0]
 800509c:	429a      	cmp	r2, r3
 800509e:	d001      	beq.n	80050a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e0cf      	b.n	8005244 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0302 	and.w	r3, r3, #2
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d010      	beq.n	80050d2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	689a      	ldr	r2, [r3, #8]
 80050b4:	4b66      	ldr	r3, [pc, #408]	; (8005250 <HAL_RCC_ClockConfig+0x1f0>)
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050bc:	429a      	cmp	r2, r3
 80050be:	d908      	bls.n	80050d2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050c0:	4b63      	ldr	r3, [pc, #396]	; (8005250 <HAL_RCC_ClockConfig+0x1f0>)
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	4960      	ldr	r1, [pc, #384]	; (8005250 <HAL_RCC_ClockConfig+0x1f0>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d04c      	beq.n	8005178 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	2b03      	cmp	r3, #3
 80050e4:	d107      	bne.n	80050f6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050e6:	4b5a      	ldr	r3, [pc, #360]	; (8005250 <HAL_RCC_ClockConfig+0x1f0>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d121      	bne.n	8005136 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e0a6      	b.n	8005244 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d107      	bne.n	800510e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050fe:	4b54      	ldr	r3, [pc, #336]	; (8005250 <HAL_RCC_ClockConfig+0x1f0>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d115      	bne.n	8005136 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e09a      	b.n	8005244 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d107      	bne.n	8005126 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005116:	4b4e      	ldr	r3, [pc, #312]	; (8005250 <HAL_RCC_ClockConfig+0x1f0>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d109      	bne.n	8005136 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e08e      	b.n	8005244 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005126:	4b4a      	ldr	r3, [pc, #296]	; (8005250 <HAL_RCC_ClockConfig+0x1f0>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e086      	b.n	8005244 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005136:	4b46      	ldr	r3, [pc, #280]	; (8005250 <HAL_RCC_ClockConfig+0x1f0>)
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f023 0203 	bic.w	r2, r3, #3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	4943      	ldr	r1, [pc, #268]	; (8005250 <HAL_RCC_ClockConfig+0x1f0>)
 8005144:	4313      	orrs	r3, r2
 8005146:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005148:	f7fc ffc6 	bl	80020d8 <HAL_GetTick>
 800514c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800514e:	e00a      	b.n	8005166 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005150:	f7fc ffc2 	bl	80020d8 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	f241 3288 	movw	r2, #5000	; 0x1388
 800515e:	4293      	cmp	r3, r2
 8005160:	d901      	bls.n	8005166 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e06e      	b.n	8005244 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005166:	4b3a      	ldr	r3, [pc, #232]	; (8005250 <HAL_RCC_ClockConfig+0x1f0>)
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f003 020c 	and.w	r2, r3, #12
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	429a      	cmp	r2, r3
 8005176:	d1eb      	bne.n	8005150 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	2b00      	cmp	r3, #0
 8005182:	d010      	beq.n	80051a6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	689a      	ldr	r2, [r3, #8]
 8005188:	4b31      	ldr	r3, [pc, #196]	; (8005250 <HAL_RCC_ClockConfig+0x1f0>)
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005190:	429a      	cmp	r2, r3
 8005192:	d208      	bcs.n	80051a6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005194:	4b2e      	ldr	r3, [pc, #184]	; (8005250 <HAL_RCC_ClockConfig+0x1f0>)
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	492b      	ldr	r1, [pc, #172]	; (8005250 <HAL_RCC_ClockConfig+0x1f0>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051a6:	4b29      	ldr	r3, [pc, #164]	; (800524c <HAL_RCC_ClockConfig+0x1ec>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0307 	and.w	r3, r3, #7
 80051ae:	683a      	ldr	r2, [r7, #0]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d210      	bcs.n	80051d6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051b4:	4b25      	ldr	r3, [pc, #148]	; (800524c <HAL_RCC_ClockConfig+0x1ec>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f023 0207 	bic.w	r2, r3, #7
 80051bc:	4923      	ldr	r1, [pc, #140]	; (800524c <HAL_RCC_ClockConfig+0x1ec>)
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051c4:	4b21      	ldr	r3, [pc, #132]	; (800524c <HAL_RCC_ClockConfig+0x1ec>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0307 	and.w	r3, r3, #7
 80051cc:	683a      	ldr	r2, [r7, #0]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d001      	beq.n	80051d6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e036      	b.n	8005244 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0304 	and.w	r3, r3, #4
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d008      	beq.n	80051f4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051e2:	4b1b      	ldr	r3, [pc, #108]	; (8005250 <HAL_RCC_ClockConfig+0x1f0>)
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	4918      	ldr	r1, [pc, #96]	; (8005250 <HAL_RCC_ClockConfig+0x1f0>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0308 	and.w	r3, r3, #8
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d009      	beq.n	8005214 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005200:	4b13      	ldr	r3, [pc, #76]	; (8005250 <HAL_RCC_ClockConfig+0x1f0>)
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	00db      	lsls	r3, r3, #3
 800520e:	4910      	ldr	r1, [pc, #64]	; (8005250 <HAL_RCC_ClockConfig+0x1f0>)
 8005210:	4313      	orrs	r3, r2
 8005212:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005214:	f000 f824 	bl	8005260 <HAL_RCC_GetSysClockFreq>
 8005218:	4602      	mov	r2, r0
 800521a:	4b0d      	ldr	r3, [pc, #52]	; (8005250 <HAL_RCC_ClockConfig+0x1f0>)
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	091b      	lsrs	r3, r3, #4
 8005220:	f003 030f 	and.w	r3, r3, #15
 8005224:	490b      	ldr	r1, [pc, #44]	; (8005254 <HAL_RCC_ClockConfig+0x1f4>)
 8005226:	5ccb      	ldrb	r3, [r1, r3]
 8005228:	f003 031f 	and.w	r3, r3, #31
 800522c:	fa22 f303 	lsr.w	r3, r2, r3
 8005230:	4a09      	ldr	r2, [pc, #36]	; (8005258 <HAL_RCC_ClockConfig+0x1f8>)
 8005232:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005234:	4b09      	ldr	r3, [pc, #36]	; (800525c <HAL_RCC_ClockConfig+0x1fc>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4618      	mov	r0, r3
 800523a:	f7fc fefd 	bl	8002038 <HAL_InitTick>
 800523e:	4603      	mov	r3, r0
 8005240:	72fb      	strb	r3, [r7, #11]

  return status;
 8005242:	7afb      	ldrb	r3, [r7, #11]
}
 8005244:	4618      	mov	r0, r3
 8005246:	3710      	adds	r7, #16
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	40022000 	.word	0x40022000
 8005250:	40021000 	.word	0x40021000
 8005254:	08009bbc 	.word	0x08009bbc
 8005258:	20000004 	.word	0x20000004
 800525c:	20000008 	.word	0x20000008

08005260 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005260:	b480      	push	{r7}
 8005262:	b089      	sub	sp, #36	; 0x24
 8005264:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005266:	2300      	movs	r3, #0
 8005268:	61fb      	str	r3, [r7, #28]
 800526a:	2300      	movs	r3, #0
 800526c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800526e:	4b3e      	ldr	r3, [pc, #248]	; (8005368 <HAL_RCC_GetSysClockFreq+0x108>)
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f003 030c 	and.w	r3, r3, #12
 8005276:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005278:	4b3b      	ldr	r3, [pc, #236]	; (8005368 <HAL_RCC_GetSysClockFreq+0x108>)
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	f003 0303 	and.w	r3, r3, #3
 8005280:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d005      	beq.n	8005294 <HAL_RCC_GetSysClockFreq+0x34>
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	2b0c      	cmp	r3, #12
 800528c:	d121      	bne.n	80052d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d11e      	bne.n	80052d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005294:	4b34      	ldr	r3, [pc, #208]	; (8005368 <HAL_RCC_GetSysClockFreq+0x108>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0308 	and.w	r3, r3, #8
 800529c:	2b00      	cmp	r3, #0
 800529e:	d107      	bne.n	80052b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80052a0:	4b31      	ldr	r3, [pc, #196]	; (8005368 <HAL_RCC_GetSysClockFreq+0x108>)
 80052a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052a6:	0a1b      	lsrs	r3, r3, #8
 80052a8:	f003 030f 	and.w	r3, r3, #15
 80052ac:	61fb      	str	r3, [r7, #28]
 80052ae:	e005      	b.n	80052bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80052b0:	4b2d      	ldr	r3, [pc, #180]	; (8005368 <HAL_RCC_GetSysClockFreq+0x108>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	091b      	lsrs	r3, r3, #4
 80052b6:	f003 030f 	and.w	r3, r3, #15
 80052ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80052bc:	4a2b      	ldr	r2, [pc, #172]	; (800536c <HAL_RCC_GetSysClockFreq+0x10c>)
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d10d      	bne.n	80052e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052d0:	e00a      	b.n	80052e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	2b04      	cmp	r3, #4
 80052d6:	d102      	bne.n	80052de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80052d8:	4b25      	ldr	r3, [pc, #148]	; (8005370 <HAL_RCC_GetSysClockFreq+0x110>)
 80052da:	61bb      	str	r3, [r7, #24]
 80052dc:	e004      	b.n	80052e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d101      	bne.n	80052e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80052e4:	4b23      	ldr	r3, [pc, #140]	; (8005374 <HAL_RCC_GetSysClockFreq+0x114>)
 80052e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	2b0c      	cmp	r3, #12
 80052ec:	d134      	bne.n	8005358 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052ee:	4b1e      	ldr	r3, [pc, #120]	; (8005368 <HAL_RCC_GetSysClockFreq+0x108>)
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	f003 0303 	and.w	r3, r3, #3
 80052f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d003      	beq.n	8005306 <HAL_RCC_GetSysClockFreq+0xa6>
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	2b03      	cmp	r3, #3
 8005302:	d003      	beq.n	800530c <HAL_RCC_GetSysClockFreq+0xac>
 8005304:	e005      	b.n	8005312 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005306:	4b1a      	ldr	r3, [pc, #104]	; (8005370 <HAL_RCC_GetSysClockFreq+0x110>)
 8005308:	617b      	str	r3, [r7, #20]
      break;
 800530a:	e005      	b.n	8005318 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800530c:	4b19      	ldr	r3, [pc, #100]	; (8005374 <HAL_RCC_GetSysClockFreq+0x114>)
 800530e:	617b      	str	r3, [r7, #20]
      break;
 8005310:	e002      	b.n	8005318 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	617b      	str	r3, [r7, #20]
      break;
 8005316:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005318:	4b13      	ldr	r3, [pc, #76]	; (8005368 <HAL_RCC_GetSysClockFreq+0x108>)
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	091b      	lsrs	r3, r3, #4
 800531e:	f003 0307 	and.w	r3, r3, #7
 8005322:	3301      	adds	r3, #1
 8005324:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005326:	4b10      	ldr	r3, [pc, #64]	; (8005368 <HAL_RCC_GetSysClockFreq+0x108>)
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	0a1b      	lsrs	r3, r3, #8
 800532c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	fb03 f202 	mul.w	r2, r3, r2
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	fbb2 f3f3 	udiv	r3, r2, r3
 800533c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800533e:	4b0a      	ldr	r3, [pc, #40]	; (8005368 <HAL_RCC_GetSysClockFreq+0x108>)
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	0e5b      	lsrs	r3, r3, #25
 8005344:	f003 0303 	and.w	r3, r3, #3
 8005348:	3301      	adds	r3, #1
 800534a:	005b      	lsls	r3, r3, #1
 800534c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	fbb2 f3f3 	udiv	r3, r2, r3
 8005356:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005358:	69bb      	ldr	r3, [r7, #24]
}
 800535a:	4618      	mov	r0, r3
 800535c:	3724      	adds	r7, #36	; 0x24
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	40021000 	.word	0x40021000
 800536c:	08009bd4 	.word	0x08009bd4
 8005370:	00f42400 	.word	0x00f42400
 8005374:	007a1200 	.word	0x007a1200

08005378 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005378:	b480      	push	{r7}
 800537a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800537c:	4b03      	ldr	r3, [pc, #12]	; (800538c <HAL_RCC_GetHCLKFreq+0x14>)
 800537e:	681b      	ldr	r3, [r3, #0]
}
 8005380:	4618      	mov	r0, r3
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	20000004 	.word	0x20000004

08005390 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005394:	f7ff fff0 	bl	8005378 <HAL_RCC_GetHCLKFreq>
 8005398:	4602      	mov	r2, r0
 800539a:	4b06      	ldr	r3, [pc, #24]	; (80053b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	0a1b      	lsrs	r3, r3, #8
 80053a0:	f003 0307 	and.w	r3, r3, #7
 80053a4:	4904      	ldr	r1, [pc, #16]	; (80053b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80053a6:	5ccb      	ldrb	r3, [r1, r3]
 80053a8:	f003 031f 	and.w	r3, r3, #31
 80053ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	40021000 	.word	0x40021000
 80053b8:	08009bcc 	.word	0x08009bcc

080053bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80053c0:	f7ff ffda 	bl	8005378 <HAL_RCC_GetHCLKFreq>
 80053c4:	4602      	mov	r2, r0
 80053c6:	4b06      	ldr	r3, [pc, #24]	; (80053e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	0adb      	lsrs	r3, r3, #11
 80053cc:	f003 0307 	and.w	r3, r3, #7
 80053d0:	4904      	ldr	r1, [pc, #16]	; (80053e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80053d2:	5ccb      	ldrb	r3, [r1, r3]
 80053d4:	f003 031f 	and.w	r3, r3, #31
 80053d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053dc:	4618      	mov	r0, r3
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	40021000 	.word	0x40021000
 80053e4:	08009bcc 	.word	0x08009bcc

080053e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80053f0:	2300      	movs	r3, #0
 80053f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80053f4:	4b2a      	ldr	r3, [pc, #168]	; (80054a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d003      	beq.n	8005408 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005400:	f7ff f9ee 	bl	80047e0 <HAL_PWREx_GetVoltageRange>
 8005404:	6178      	str	r0, [r7, #20]
 8005406:	e014      	b.n	8005432 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005408:	4b25      	ldr	r3, [pc, #148]	; (80054a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800540a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800540c:	4a24      	ldr	r2, [pc, #144]	; (80054a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800540e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005412:	6593      	str	r3, [r2, #88]	; 0x58
 8005414:	4b22      	ldr	r3, [pc, #136]	; (80054a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800541c:	60fb      	str	r3, [r7, #12]
 800541e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005420:	f7ff f9de 	bl	80047e0 <HAL_PWREx_GetVoltageRange>
 8005424:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005426:	4b1e      	ldr	r3, [pc, #120]	; (80054a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800542a:	4a1d      	ldr	r2, [pc, #116]	; (80054a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800542c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005430:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005438:	d10b      	bne.n	8005452 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b80      	cmp	r3, #128	; 0x80
 800543e:	d919      	bls.n	8005474 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2ba0      	cmp	r3, #160	; 0xa0
 8005444:	d902      	bls.n	800544c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005446:	2302      	movs	r3, #2
 8005448:	613b      	str	r3, [r7, #16]
 800544a:	e013      	b.n	8005474 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800544c:	2301      	movs	r3, #1
 800544e:	613b      	str	r3, [r7, #16]
 8005450:	e010      	b.n	8005474 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b80      	cmp	r3, #128	; 0x80
 8005456:	d902      	bls.n	800545e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005458:	2303      	movs	r3, #3
 800545a:	613b      	str	r3, [r7, #16]
 800545c:	e00a      	b.n	8005474 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2b80      	cmp	r3, #128	; 0x80
 8005462:	d102      	bne.n	800546a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005464:	2302      	movs	r3, #2
 8005466:	613b      	str	r3, [r7, #16]
 8005468:	e004      	b.n	8005474 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2b70      	cmp	r3, #112	; 0x70
 800546e:	d101      	bne.n	8005474 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005470:	2301      	movs	r3, #1
 8005472:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005474:	4b0b      	ldr	r3, [pc, #44]	; (80054a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f023 0207 	bic.w	r2, r3, #7
 800547c:	4909      	ldr	r1, [pc, #36]	; (80054a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	4313      	orrs	r3, r2
 8005482:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005484:	4b07      	ldr	r3, [pc, #28]	; (80054a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0307 	and.w	r3, r3, #7
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	429a      	cmp	r2, r3
 8005490:	d001      	beq.n	8005496 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e000      	b.n	8005498 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3718      	adds	r7, #24
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	40021000 	.word	0x40021000
 80054a4:	40022000 	.word	0x40022000

080054a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b086      	sub	sp, #24
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80054b0:	2300      	movs	r3, #0
 80054b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80054b4:	2300      	movs	r3, #0
 80054b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d041      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80054cc:	d02a      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80054ce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80054d2:	d824      	bhi.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80054d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054d8:	d008      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 80054da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054de:	d81e      	bhi.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00a      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x52>
 80054e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054e8:	d010      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80054ea:	e018      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80054ec:	4b86      	ldr	r3, [pc, #536]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	4a85      	ldr	r2, [pc, #532]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054f6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054f8:	e015      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	3304      	adds	r3, #4
 80054fe:	2100      	movs	r1, #0
 8005500:	4618      	mov	r0, r3
 8005502:	f000 fabb 	bl	8005a7c <RCCEx_PLLSAI1_Config>
 8005506:	4603      	mov	r3, r0
 8005508:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800550a:	e00c      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	3320      	adds	r3, #32
 8005510:	2100      	movs	r1, #0
 8005512:	4618      	mov	r0, r3
 8005514:	f000 fba6 	bl	8005c64 <RCCEx_PLLSAI2_Config>
 8005518:	4603      	mov	r3, r0
 800551a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800551c:	e003      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	74fb      	strb	r3, [r7, #19]
      break;
 8005522:	e000      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005524:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005526:	7cfb      	ldrb	r3, [r7, #19]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d10b      	bne.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800552c:	4b76      	ldr	r3, [pc, #472]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800552e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005532:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800553a:	4973      	ldr	r1, [pc, #460]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800553c:	4313      	orrs	r3, r2
 800553e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005542:	e001      	b.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005544:	7cfb      	ldrb	r3, [r7, #19]
 8005546:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d041      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005558:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800555c:	d02a      	beq.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800555e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005562:	d824      	bhi.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005564:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005568:	d008      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800556a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800556e:	d81e      	bhi.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005570:	2b00      	cmp	r3, #0
 8005572:	d00a      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005574:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005578:	d010      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800557a:	e018      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800557c:	4b62      	ldr	r3, [pc, #392]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	4a61      	ldr	r2, [pc, #388]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005582:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005586:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005588:	e015      	b.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	3304      	adds	r3, #4
 800558e:	2100      	movs	r1, #0
 8005590:	4618      	mov	r0, r3
 8005592:	f000 fa73 	bl	8005a7c <RCCEx_PLLSAI1_Config>
 8005596:	4603      	mov	r3, r0
 8005598:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800559a:	e00c      	b.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	3320      	adds	r3, #32
 80055a0:	2100      	movs	r1, #0
 80055a2:	4618      	mov	r0, r3
 80055a4:	f000 fb5e 	bl	8005c64 <RCCEx_PLLSAI2_Config>
 80055a8:	4603      	mov	r3, r0
 80055aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80055ac:	e003      	b.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	74fb      	strb	r3, [r7, #19]
      break;
 80055b2:	e000      	b.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80055b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055b6:	7cfb      	ldrb	r3, [r7, #19]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d10b      	bne.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80055bc:	4b52      	ldr	r3, [pc, #328]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055ca:	494f      	ldr	r1, [pc, #316]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80055d2:	e001      	b.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055d4:	7cfb      	ldrb	r3, [r7, #19]
 80055d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f000 80a0 	beq.w	8005726 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055e6:	2300      	movs	r3, #0
 80055e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80055ea:	4b47      	ldr	r3, [pc, #284]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80055f6:	2301      	movs	r3, #1
 80055f8:	e000      	b.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80055fa:	2300      	movs	r3, #0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00d      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005600:	4b41      	ldr	r3, [pc, #260]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005604:	4a40      	ldr	r2, [pc, #256]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800560a:	6593      	str	r3, [r2, #88]	; 0x58
 800560c:	4b3e      	ldr	r3, [pc, #248]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800560e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005614:	60bb      	str	r3, [r7, #8]
 8005616:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005618:	2301      	movs	r3, #1
 800561a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800561c:	4b3b      	ldr	r3, [pc, #236]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a3a      	ldr	r2, [pc, #232]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005626:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005628:	f7fc fd56 	bl	80020d8 <HAL_GetTick>
 800562c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800562e:	e009      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005630:	f7fc fd52 	bl	80020d8 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	2b02      	cmp	r3, #2
 800563c:	d902      	bls.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	74fb      	strb	r3, [r7, #19]
        break;
 8005642:	e005      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005644:	4b31      	ldr	r3, [pc, #196]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800564c:	2b00      	cmp	r3, #0
 800564e:	d0ef      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005650:	7cfb      	ldrb	r3, [r7, #19]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d15c      	bne.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005656:	4b2c      	ldr	r3, [pc, #176]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800565c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005660:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d01f      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	429a      	cmp	r2, r3
 8005672:	d019      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005674:	4b24      	ldr	r3, [pc, #144]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800567a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800567e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005680:	4b21      	ldr	r3, [pc, #132]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005686:	4a20      	ldr	r2, [pc, #128]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800568c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005690:	4b1d      	ldr	r3, [pc, #116]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005696:	4a1c      	ldr	r2, [pc, #112]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005698:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800569c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80056a0:	4a19      	ldr	r2, [pc, #100]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	f003 0301 	and.w	r3, r3, #1
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d016      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b2:	f7fc fd11 	bl	80020d8 <HAL_GetTick>
 80056b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056b8:	e00b      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056ba:	f7fc fd0d 	bl	80020d8 <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d902      	bls.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	74fb      	strb	r3, [r7, #19]
            break;
 80056d0:	e006      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056d2:	4b0d      	ldr	r3, [pc, #52]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d8:	f003 0302 	and.w	r3, r3, #2
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d0ec      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80056e0:	7cfb      	ldrb	r3, [r7, #19]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10c      	bne.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056e6:	4b08      	ldr	r3, [pc, #32]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056f6:	4904      	ldr	r1, [pc, #16]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056f8:	4313      	orrs	r3, r2
 80056fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80056fe:	e009      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005700:	7cfb      	ldrb	r3, [r7, #19]
 8005702:	74bb      	strb	r3, [r7, #18]
 8005704:	e006      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005706:	bf00      	nop
 8005708:	40021000 	.word	0x40021000
 800570c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005710:	7cfb      	ldrb	r3, [r7, #19]
 8005712:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005714:	7c7b      	ldrb	r3, [r7, #17]
 8005716:	2b01      	cmp	r3, #1
 8005718:	d105      	bne.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800571a:	4b9e      	ldr	r3, [pc, #632]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800571c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800571e:	4a9d      	ldr	r2, [pc, #628]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005720:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005724:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00a      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005732:	4b98      	ldr	r3, [pc, #608]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005738:	f023 0203 	bic.w	r2, r3, #3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005740:	4994      	ldr	r1, [pc, #592]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005742:	4313      	orrs	r3, r2
 8005744:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0302 	and.w	r3, r3, #2
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00a      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005754:	4b8f      	ldr	r3, [pc, #572]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800575a:	f023 020c 	bic.w	r2, r3, #12
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005762:	498c      	ldr	r1, [pc, #560]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005764:	4313      	orrs	r3, r2
 8005766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0304 	and.w	r3, r3, #4
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00a      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005776:	4b87      	ldr	r3, [pc, #540]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800577c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005784:	4983      	ldr	r1, [pc, #524]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005786:	4313      	orrs	r3, r2
 8005788:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0308 	and.w	r3, r3, #8
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00a      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005798:	4b7e      	ldr	r3, [pc, #504]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800579a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800579e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057a6:	497b      	ldr	r1, [pc, #492]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 0310 	and.w	r3, r3, #16
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00a      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80057ba:	4b76      	ldr	r3, [pc, #472]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057c8:	4972      	ldr	r1, [pc, #456]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057ca:	4313      	orrs	r3, r2
 80057cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0320 	and.w	r3, r3, #32
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d00a      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80057dc:	4b6d      	ldr	r3, [pc, #436]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ea:	496a      	ldr	r1, [pc, #424]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00a      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057fe:	4b65      	ldr	r3, [pc, #404]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005804:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800580c:	4961      	ldr	r1, [pc, #388]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800580e:	4313      	orrs	r3, r2
 8005810:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00a      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005820:	4b5c      	ldr	r3, [pc, #368]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005826:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800582e:	4959      	ldr	r1, [pc, #356]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005830:	4313      	orrs	r3, r2
 8005832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00a      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005842:	4b54      	ldr	r3, [pc, #336]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005848:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005850:	4950      	ldr	r1, [pc, #320]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005852:	4313      	orrs	r3, r2
 8005854:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00a      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005864:	4b4b      	ldr	r3, [pc, #300]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800586a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005872:	4948      	ldr	r1, [pc, #288]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005874:	4313      	orrs	r3, r2
 8005876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00a      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005886:	4b43      	ldr	r3, [pc, #268]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800588c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005894:	493f      	ldr	r1, [pc, #252]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005896:	4313      	orrs	r3, r2
 8005898:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d028      	beq.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058a8:	4b3a      	ldr	r3, [pc, #232]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058b6:	4937      	ldr	r1, [pc, #220]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058c6:	d106      	bne.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058c8:	4b32      	ldr	r3, [pc, #200]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	4a31      	ldr	r2, [pc, #196]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058d2:	60d3      	str	r3, [r2, #12]
 80058d4:	e011      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058de:	d10c      	bne.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	3304      	adds	r3, #4
 80058e4:	2101      	movs	r1, #1
 80058e6:	4618      	mov	r0, r3
 80058e8:	f000 f8c8 	bl	8005a7c <RCCEx_PLLSAI1_Config>
 80058ec:	4603      	mov	r3, r0
 80058ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80058f0:	7cfb      	ldrb	r3, [r7, #19]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d001      	beq.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80058f6:	7cfb      	ldrb	r3, [r7, #19]
 80058f8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d028      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005906:	4b23      	ldr	r3, [pc, #140]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800590c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005914:	491f      	ldr	r1, [pc, #124]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005916:	4313      	orrs	r3, r2
 8005918:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005920:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005924:	d106      	bne.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005926:	4b1b      	ldr	r3, [pc, #108]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	4a1a      	ldr	r2, [pc, #104]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800592c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005930:	60d3      	str	r3, [r2, #12]
 8005932:	e011      	b.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005938:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800593c:	d10c      	bne.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	3304      	adds	r3, #4
 8005942:	2101      	movs	r1, #1
 8005944:	4618      	mov	r0, r3
 8005946:	f000 f899 	bl	8005a7c <RCCEx_PLLSAI1_Config>
 800594a:	4603      	mov	r3, r0
 800594c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800594e:	7cfb      	ldrb	r3, [r7, #19]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d001      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005954:	7cfb      	ldrb	r3, [r7, #19]
 8005956:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d02b      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005964:	4b0b      	ldr	r3, [pc, #44]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800596a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005972:	4908      	ldr	r1, [pc, #32]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005974:	4313      	orrs	r3, r2
 8005976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800597e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005982:	d109      	bne.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005984:	4b03      	ldr	r3, [pc, #12]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	4a02      	ldr	r2, [pc, #8]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800598a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800598e:	60d3      	str	r3, [r2, #12]
 8005990:	e014      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005992:	bf00      	nop
 8005994:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800599c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80059a0:	d10c      	bne.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	3304      	adds	r3, #4
 80059a6:	2101      	movs	r1, #1
 80059a8:	4618      	mov	r0, r3
 80059aa:	f000 f867 	bl	8005a7c <RCCEx_PLLSAI1_Config>
 80059ae:	4603      	mov	r3, r0
 80059b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059b2:	7cfb      	ldrb	r3, [r7, #19]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d001      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80059b8:	7cfb      	ldrb	r3, [r7, #19]
 80059ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d02f      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80059c8:	4b2b      	ldr	r3, [pc, #172]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80059ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059d6:	4928      	ldr	r1, [pc, #160]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80059d8:	4313      	orrs	r3, r2
 80059da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059e6:	d10d      	bne.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	3304      	adds	r3, #4
 80059ec:	2102      	movs	r1, #2
 80059ee:	4618      	mov	r0, r3
 80059f0:	f000 f844 	bl	8005a7c <RCCEx_PLLSAI1_Config>
 80059f4:	4603      	mov	r3, r0
 80059f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059f8:	7cfb      	ldrb	r3, [r7, #19]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d014      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80059fe:	7cfb      	ldrb	r3, [r7, #19]
 8005a00:	74bb      	strb	r3, [r7, #18]
 8005a02:	e011      	b.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a0c:	d10c      	bne.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	3320      	adds	r3, #32
 8005a12:	2102      	movs	r1, #2
 8005a14:	4618      	mov	r0, r3
 8005a16:	f000 f925 	bl	8005c64 <RCCEx_PLLSAI2_Config>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a1e:	7cfb      	ldrb	r3, [r7, #19]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d001      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005a24:	7cfb      	ldrb	r3, [r7, #19]
 8005a26:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00a      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005a34:	4b10      	ldr	r3, [pc, #64]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a3a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a42:	490d      	ldr	r1, [pc, #52]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005a44:	4313      	orrs	r3, r2
 8005a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00b      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a56:	4b08      	ldr	r3, [pc, #32]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a5c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a66:	4904      	ldr	r1, [pc, #16]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005a6e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3718      	adds	r7, #24
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	40021000 	.word	0x40021000

08005a7c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a86:	2300      	movs	r3, #0
 8005a88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005a8a:	4b75      	ldr	r3, [pc, #468]	; (8005c60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	f003 0303 	and.w	r3, r3, #3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d018      	beq.n	8005ac8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005a96:	4b72      	ldr	r3, [pc, #456]	; (8005c60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	f003 0203 	and.w	r2, r3, #3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d10d      	bne.n	8005ac2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
       ||
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d009      	beq.n	8005ac2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005aae:	4b6c      	ldr	r3, [pc, #432]	; (8005c60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	091b      	lsrs	r3, r3, #4
 8005ab4:	f003 0307 	and.w	r3, r3, #7
 8005ab8:	1c5a      	adds	r2, r3, #1
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
       ||
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d047      	beq.n	8005b52 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	73fb      	strb	r3, [r7, #15]
 8005ac6:	e044      	b.n	8005b52 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2b03      	cmp	r3, #3
 8005ace:	d018      	beq.n	8005b02 <RCCEx_PLLSAI1_Config+0x86>
 8005ad0:	2b03      	cmp	r3, #3
 8005ad2:	d825      	bhi.n	8005b20 <RCCEx_PLLSAI1_Config+0xa4>
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d002      	beq.n	8005ade <RCCEx_PLLSAI1_Config+0x62>
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d009      	beq.n	8005af0 <RCCEx_PLLSAI1_Config+0x74>
 8005adc:	e020      	b.n	8005b20 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005ade:	4b60      	ldr	r3, [pc, #384]	; (8005c60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 0302 	and.w	r3, r3, #2
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d11d      	bne.n	8005b26 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005aee:	e01a      	b.n	8005b26 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005af0:	4b5b      	ldr	r3, [pc, #364]	; (8005c60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d116      	bne.n	8005b2a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b00:	e013      	b.n	8005b2a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005b02:	4b57      	ldr	r3, [pc, #348]	; (8005c60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10f      	bne.n	8005b2e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005b0e:	4b54      	ldr	r3, [pc, #336]	; (8005c60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d109      	bne.n	8005b2e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b1e:	e006      	b.n	8005b2e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	73fb      	strb	r3, [r7, #15]
      break;
 8005b24:	e004      	b.n	8005b30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005b26:	bf00      	nop
 8005b28:	e002      	b.n	8005b30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005b2a:	bf00      	nop
 8005b2c:	e000      	b.n	8005b30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005b2e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005b30:	7bfb      	ldrb	r3, [r7, #15]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10d      	bne.n	8005b52 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005b36:	4b4a      	ldr	r3, [pc, #296]	; (8005c60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6819      	ldr	r1, [r3, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	3b01      	subs	r3, #1
 8005b48:	011b      	lsls	r3, r3, #4
 8005b4a:	430b      	orrs	r3, r1
 8005b4c:	4944      	ldr	r1, [pc, #272]	; (8005c60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005b52:	7bfb      	ldrb	r3, [r7, #15]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d17d      	bne.n	8005c54 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005b58:	4b41      	ldr	r3, [pc, #260]	; (8005c60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a40      	ldr	r2, [pc, #256]	; (8005c60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b5e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b64:	f7fc fab8 	bl	80020d8 <HAL_GetTick>
 8005b68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b6a:	e009      	b.n	8005b80 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b6c:	f7fc fab4 	bl	80020d8 <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d902      	bls.n	8005b80 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	73fb      	strb	r3, [r7, #15]
        break;
 8005b7e:	e005      	b.n	8005b8c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b80:	4b37      	ldr	r3, [pc, #220]	; (8005c60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d1ef      	bne.n	8005b6c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005b8c:	7bfb      	ldrb	r3, [r7, #15]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d160      	bne.n	8005c54 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d111      	bne.n	8005bbc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b98:	4b31      	ldr	r3, [pc, #196]	; (8005c60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005ba0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	6892      	ldr	r2, [r2, #8]
 8005ba8:	0211      	lsls	r1, r2, #8
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	68d2      	ldr	r2, [r2, #12]
 8005bae:	0912      	lsrs	r2, r2, #4
 8005bb0:	0452      	lsls	r2, r2, #17
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	492a      	ldr	r1, [pc, #168]	; (8005c60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	610b      	str	r3, [r1, #16]
 8005bba:	e027      	b.n	8005c0c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d112      	bne.n	8005be8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005bc2:	4b27      	ldr	r3, [pc, #156]	; (8005c60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005bca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	6892      	ldr	r2, [r2, #8]
 8005bd2:	0211      	lsls	r1, r2, #8
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	6912      	ldr	r2, [r2, #16]
 8005bd8:	0852      	lsrs	r2, r2, #1
 8005bda:	3a01      	subs	r2, #1
 8005bdc:	0552      	lsls	r2, r2, #21
 8005bde:	430a      	orrs	r2, r1
 8005be0:	491f      	ldr	r1, [pc, #124]	; (8005c60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	610b      	str	r3, [r1, #16]
 8005be6:	e011      	b.n	8005c0c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005be8:	4b1d      	ldr	r3, [pc, #116]	; (8005c60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005bf0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	6892      	ldr	r2, [r2, #8]
 8005bf8:	0211      	lsls	r1, r2, #8
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	6952      	ldr	r2, [r2, #20]
 8005bfe:	0852      	lsrs	r2, r2, #1
 8005c00:	3a01      	subs	r2, #1
 8005c02:	0652      	lsls	r2, r2, #25
 8005c04:	430a      	orrs	r2, r1
 8005c06:	4916      	ldr	r1, [pc, #88]	; (8005c60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005c0c:	4b14      	ldr	r3, [pc, #80]	; (8005c60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a13      	ldr	r2, [pc, #76]	; (8005c60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c18:	f7fc fa5e 	bl	80020d8 <HAL_GetTick>
 8005c1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c1e:	e009      	b.n	8005c34 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c20:	f7fc fa5a 	bl	80020d8 <HAL_GetTick>
 8005c24:	4602      	mov	r2, r0
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d902      	bls.n	8005c34 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	73fb      	strb	r3, [r7, #15]
          break;
 8005c32:	e005      	b.n	8005c40 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c34:	4b0a      	ldr	r3, [pc, #40]	; (8005c60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d0ef      	beq.n	8005c20 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005c40:	7bfb      	ldrb	r3, [r7, #15]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d106      	bne.n	8005c54 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005c46:	4b06      	ldr	r3, [pc, #24]	; (8005c60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c48:	691a      	ldr	r2, [r3, #16]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	4904      	ldr	r1, [pc, #16]	; (8005c60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	40021000 	.word	0x40021000

08005c64 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005c72:	4b6a      	ldr	r3, [pc, #424]	; (8005e1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	f003 0303 	and.w	r3, r3, #3
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d018      	beq.n	8005cb0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005c7e:	4b67      	ldr	r3, [pc, #412]	; (8005e1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	f003 0203 	and.w	r2, r3, #3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d10d      	bne.n	8005caa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
       ||
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d009      	beq.n	8005caa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005c96:	4b61      	ldr	r3, [pc, #388]	; (8005e1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	091b      	lsrs	r3, r3, #4
 8005c9c:	f003 0307 	and.w	r3, r3, #7
 8005ca0:	1c5a      	adds	r2, r3, #1
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
       ||
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d047      	beq.n	8005d3a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	73fb      	strb	r3, [r7, #15]
 8005cae:	e044      	b.n	8005d3a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2b03      	cmp	r3, #3
 8005cb6:	d018      	beq.n	8005cea <RCCEx_PLLSAI2_Config+0x86>
 8005cb8:	2b03      	cmp	r3, #3
 8005cba:	d825      	bhi.n	8005d08 <RCCEx_PLLSAI2_Config+0xa4>
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d002      	beq.n	8005cc6 <RCCEx_PLLSAI2_Config+0x62>
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d009      	beq.n	8005cd8 <RCCEx_PLLSAI2_Config+0x74>
 8005cc4:	e020      	b.n	8005d08 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005cc6:	4b55      	ldr	r3, [pc, #340]	; (8005e1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 0302 	and.w	r3, r3, #2
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d11d      	bne.n	8005d0e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cd6:	e01a      	b.n	8005d0e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005cd8:	4b50      	ldr	r3, [pc, #320]	; (8005e1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d116      	bne.n	8005d12 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ce8:	e013      	b.n	8005d12 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005cea:	4b4c      	ldr	r3, [pc, #304]	; (8005e1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d10f      	bne.n	8005d16 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005cf6:	4b49      	ldr	r3, [pc, #292]	; (8005e1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d109      	bne.n	8005d16 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005d06:	e006      	b.n	8005d16 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d0c:	e004      	b.n	8005d18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005d0e:	bf00      	nop
 8005d10:	e002      	b.n	8005d18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005d12:	bf00      	nop
 8005d14:	e000      	b.n	8005d18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005d16:	bf00      	nop
    }

    if(status == HAL_OK)
 8005d18:	7bfb      	ldrb	r3, [r7, #15]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10d      	bne.n	8005d3a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005d1e:	4b3f      	ldr	r3, [pc, #252]	; (8005e1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6819      	ldr	r1, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	011b      	lsls	r3, r3, #4
 8005d32:	430b      	orrs	r3, r1
 8005d34:	4939      	ldr	r1, [pc, #228]	; (8005e1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d36:	4313      	orrs	r3, r2
 8005d38:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005d3a:	7bfb      	ldrb	r3, [r7, #15]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d167      	bne.n	8005e10 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005d40:	4b36      	ldr	r3, [pc, #216]	; (8005e1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a35      	ldr	r2, [pc, #212]	; (8005e1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d4c:	f7fc f9c4 	bl	80020d8 <HAL_GetTick>
 8005d50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005d52:	e009      	b.n	8005d68 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005d54:	f7fc f9c0 	bl	80020d8 <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d902      	bls.n	8005d68 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	73fb      	strb	r3, [r7, #15]
        break;
 8005d66:	e005      	b.n	8005d74 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005d68:	4b2c      	ldr	r3, [pc, #176]	; (8005e1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1ef      	bne.n	8005d54 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005d74:	7bfb      	ldrb	r3, [r7, #15]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d14a      	bne.n	8005e10 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d111      	bne.n	8005da4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d80:	4b26      	ldr	r3, [pc, #152]	; (8005e1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d82:	695b      	ldr	r3, [r3, #20]
 8005d84:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	6892      	ldr	r2, [r2, #8]
 8005d90:	0211      	lsls	r1, r2, #8
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	68d2      	ldr	r2, [r2, #12]
 8005d96:	0912      	lsrs	r2, r2, #4
 8005d98:	0452      	lsls	r2, r2, #17
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	491f      	ldr	r1, [pc, #124]	; (8005e1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	614b      	str	r3, [r1, #20]
 8005da2:	e011      	b.n	8005dc8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005da4:	4b1d      	ldr	r3, [pc, #116]	; (8005e1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005da6:	695b      	ldr	r3, [r3, #20]
 8005da8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005dac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	6892      	ldr	r2, [r2, #8]
 8005db4:	0211      	lsls	r1, r2, #8
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	6912      	ldr	r2, [r2, #16]
 8005dba:	0852      	lsrs	r2, r2, #1
 8005dbc:	3a01      	subs	r2, #1
 8005dbe:	0652      	lsls	r2, r2, #25
 8005dc0:	430a      	orrs	r2, r1
 8005dc2:	4916      	ldr	r1, [pc, #88]	; (8005e1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005dc8:	4b14      	ldr	r3, [pc, #80]	; (8005e1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a13      	ldr	r2, [pc, #76]	; (8005e1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dd2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dd4:	f7fc f980 	bl	80020d8 <HAL_GetTick>
 8005dd8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005dda:	e009      	b.n	8005df0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005ddc:	f7fc f97c 	bl	80020d8 <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d902      	bls.n	8005df0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	73fb      	strb	r3, [r7, #15]
          break;
 8005dee:	e005      	b.n	8005dfc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005df0:	4b0a      	ldr	r3, [pc, #40]	; (8005e1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d0ef      	beq.n	8005ddc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005dfc:	7bfb      	ldrb	r3, [r7, #15]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d106      	bne.n	8005e10 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005e02:	4b06      	ldr	r3, [pc, #24]	; (8005e1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e04:	695a      	ldr	r2, [r3, #20]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	4904      	ldr	r1, [pc, #16]	; (8005e1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	40021000 	.word	0x40021000

08005e20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d101      	bne.n	8005e32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e049      	b.n	8005ec6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d106      	bne.n	8005e4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f7fb ff1a 	bl	8001c80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2202      	movs	r2, #2
 8005e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	3304      	adds	r3, #4
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	4610      	mov	r0, r2
 8005e60:	f000 f8dc 	bl	800601c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3708      	adds	r7, #8
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	b086      	sub	sp, #24
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
 8005ed6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d101      	bne.n	8005ee2 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e097      	b.n	8006012 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d106      	bne.n	8005efc <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f7fb fdec 	bl	8001ad4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2202      	movs	r2, #2
 8005f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	6812      	ldr	r2, [r2, #0]
 8005f0e:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005f12:	f023 0307 	bic.w	r3, r3, #7
 8005f16:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	3304      	adds	r3, #4
 8005f20:	4619      	mov	r1, r3
 8005f22:	4610      	mov	r0, r2
 8005f24:	f000 f87a 	bl	800601c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	697a      	ldr	r2, [r7, #20]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f50:	f023 0303 	bic.w	r3, r3, #3
 8005f54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	689a      	ldr	r2, [r3, #8]
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	021b      	lsls	r3, r3, #8
 8005f60:	4313      	orrs	r3, r2
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005f6e:	f023 030c 	bic.w	r3, r3, #12
 8005f72:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	68da      	ldr	r2, [r3, #12]
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	69db      	ldr	r3, [r3, #28]
 8005f88:	021b      	lsls	r3, r3, #8
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	693a      	ldr	r2, [r7, #16]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	011a      	lsls	r2, r3, #4
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	6a1b      	ldr	r3, [r3, #32]
 8005f9c:	031b      	lsls	r3, r3, #12
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	693a      	ldr	r2, [r7, #16]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005fac:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005fb4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	685a      	ldr	r2, [r3, #4]
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	011b      	lsls	r3, r3, #4
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	697a      	ldr	r2, [r7, #20]
 8005fce:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	693a      	ldr	r2, [r7, #16]
 8005fd6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3718      	adds	r7, #24
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
	...

0800601c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a40      	ldr	r2, [pc, #256]	; (8006130 <TIM_Base_SetConfig+0x114>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d013      	beq.n	800605c <TIM_Base_SetConfig+0x40>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800603a:	d00f      	beq.n	800605c <TIM_Base_SetConfig+0x40>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a3d      	ldr	r2, [pc, #244]	; (8006134 <TIM_Base_SetConfig+0x118>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d00b      	beq.n	800605c <TIM_Base_SetConfig+0x40>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a3c      	ldr	r2, [pc, #240]	; (8006138 <TIM_Base_SetConfig+0x11c>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d007      	beq.n	800605c <TIM_Base_SetConfig+0x40>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a3b      	ldr	r2, [pc, #236]	; (800613c <TIM_Base_SetConfig+0x120>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d003      	beq.n	800605c <TIM_Base_SetConfig+0x40>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a3a      	ldr	r2, [pc, #232]	; (8006140 <TIM_Base_SetConfig+0x124>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d108      	bne.n	800606e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006062:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	4313      	orrs	r3, r2
 800606c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a2f      	ldr	r2, [pc, #188]	; (8006130 <TIM_Base_SetConfig+0x114>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d01f      	beq.n	80060b6 <TIM_Base_SetConfig+0x9a>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800607c:	d01b      	beq.n	80060b6 <TIM_Base_SetConfig+0x9a>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a2c      	ldr	r2, [pc, #176]	; (8006134 <TIM_Base_SetConfig+0x118>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d017      	beq.n	80060b6 <TIM_Base_SetConfig+0x9a>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a2b      	ldr	r2, [pc, #172]	; (8006138 <TIM_Base_SetConfig+0x11c>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d013      	beq.n	80060b6 <TIM_Base_SetConfig+0x9a>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a2a      	ldr	r2, [pc, #168]	; (800613c <TIM_Base_SetConfig+0x120>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d00f      	beq.n	80060b6 <TIM_Base_SetConfig+0x9a>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a29      	ldr	r2, [pc, #164]	; (8006140 <TIM_Base_SetConfig+0x124>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d00b      	beq.n	80060b6 <TIM_Base_SetConfig+0x9a>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a28      	ldr	r2, [pc, #160]	; (8006144 <TIM_Base_SetConfig+0x128>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d007      	beq.n	80060b6 <TIM_Base_SetConfig+0x9a>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a27      	ldr	r2, [pc, #156]	; (8006148 <TIM_Base_SetConfig+0x12c>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d003      	beq.n	80060b6 <TIM_Base_SetConfig+0x9a>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a26      	ldr	r2, [pc, #152]	; (800614c <TIM_Base_SetConfig+0x130>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d108      	bne.n	80060c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	689a      	ldr	r2, [r3, #8]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a10      	ldr	r2, [pc, #64]	; (8006130 <TIM_Base_SetConfig+0x114>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d00f      	beq.n	8006114 <TIM_Base_SetConfig+0xf8>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a12      	ldr	r2, [pc, #72]	; (8006140 <TIM_Base_SetConfig+0x124>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d00b      	beq.n	8006114 <TIM_Base_SetConfig+0xf8>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a11      	ldr	r2, [pc, #68]	; (8006144 <TIM_Base_SetConfig+0x128>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d007      	beq.n	8006114 <TIM_Base_SetConfig+0xf8>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a10      	ldr	r2, [pc, #64]	; (8006148 <TIM_Base_SetConfig+0x12c>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d003      	beq.n	8006114 <TIM_Base_SetConfig+0xf8>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a0f      	ldr	r2, [pc, #60]	; (800614c <TIM_Base_SetConfig+0x130>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d103      	bne.n	800611c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	691a      	ldr	r2, [r3, #16]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	615a      	str	r2, [r3, #20]
}
 8006122:	bf00      	nop
 8006124:	3714      	adds	r7, #20
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	40012c00 	.word	0x40012c00
 8006134:	40000400 	.word	0x40000400
 8006138:	40000800 	.word	0x40000800
 800613c:	40000c00 	.word	0x40000c00
 8006140:	40013400 	.word	0x40013400
 8006144:	40014000 	.word	0x40014000
 8006148:	40014400 	.word	0x40014400
 800614c:	40014800 	.word	0x40014800

08006150 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006160:	2b01      	cmp	r3, #1
 8006162:	d101      	bne.n	8006168 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006164:	2302      	movs	r3, #2
 8006166:	e068      	b.n	800623a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2202      	movs	r2, #2
 8006174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a2e      	ldr	r2, [pc, #184]	; (8006248 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d004      	beq.n	800619c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a2d      	ldr	r2, [pc, #180]	; (800624c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d108      	bne.n	80061ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80061a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	4313      	orrs	r3, r2
 80061be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a1e      	ldr	r2, [pc, #120]	; (8006248 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d01d      	beq.n	800620e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061da:	d018      	beq.n	800620e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a1b      	ldr	r2, [pc, #108]	; (8006250 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d013      	beq.n	800620e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a1a      	ldr	r2, [pc, #104]	; (8006254 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d00e      	beq.n	800620e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a18      	ldr	r2, [pc, #96]	; (8006258 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d009      	beq.n	800620e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a13      	ldr	r2, [pc, #76]	; (800624c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d004      	beq.n	800620e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a14      	ldr	r2, [pc, #80]	; (800625c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d10c      	bne.n	8006228 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006214:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	4313      	orrs	r3, r2
 800621e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68ba      	ldr	r2, [r7, #8]
 8006226:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3714      	adds	r7, #20
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	40012c00 	.word	0x40012c00
 800624c:	40013400 	.word	0x40013400
 8006250:	40000400 	.word	0x40000400
 8006254:	40000800 	.word	0x40000800
 8006258:	40000c00 	.word	0x40000c00
 800625c:	40014000 	.word	0x40014000

08006260 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d101      	bne.n	8006272 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e040      	b.n	80062f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006276:	2b00      	cmp	r3, #0
 8006278:	d106      	bne.n	8006288 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f7fb fd1c 	bl	8001cc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2224      	movs	r2, #36	; 0x24
 800628c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f022 0201 	bic.w	r2, r2, #1
 800629c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d002      	beq.n	80062ac <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 fb6a 	bl	8006980 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 f8af 	bl	8006410 <UART_SetConfig>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d101      	bne.n	80062bc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e01b      	b.n	80062f4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	685a      	ldr	r2, [r3, #4]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	689a      	ldr	r2, [r3, #8]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f042 0201 	orr.w	r2, r2, #1
 80062ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 fbe9 	bl	8006ac4 <UART_CheckIdleState>
 80062f2:	4603      	mov	r3, r0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3708      	adds	r7, #8
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b08a      	sub	sp, #40	; 0x28
 8006300:	af02      	add	r7, sp, #8
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	603b      	str	r3, [r7, #0]
 8006308:	4613      	mov	r3, r2
 800630a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006310:	2b20      	cmp	r3, #32
 8006312:	d178      	bne.n	8006406 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d002      	beq.n	8006320 <HAL_UART_Transmit+0x24>
 800631a:	88fb      	ldrh	r3, [r7, #6]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d101      	bne.n	8006324 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	e071      	b.n	8006408 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2200      	movs	r2, #0
 8006328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2221      	movs	r2, #33	; 0x21
 8006330:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006332:	f7fb fed1 	bl	80020d8 <HAL_GetTick>
 8006336:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	88fa      	ldrh	r2, [r7, #6]
 800633c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	88fa      	ldrh	r2, [r7, #6]
 8006344:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006350:	d108      	bne.n	8006364 <HAL_UART_Transmit+0x68>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d104      	bne.n	8006364 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800635a:	2300      	movs	r3, #0
 800635c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	61bb      	str	r3, [r7, #24]
 8006362:	e003      	b.n	800636c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006368:	2300      	movs	r3, #0
 800636a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800636c:	e030      	b.n	80063d0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	9300      	str	r3, [sp, #0]
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	2200      	movs	r2, #0
 8006376:	2180      	movs	r1, #128	; 0x80
 8006378:	68f8      	ldr	r0, [r7, #12]
 800637a:	f000 fc4b 	bl	8006c14 <UART_WaitOnFlagUntilTimeout>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d004      	beq.n	800638e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2220      	movs	r2, #32
 8006388:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e03c      	b.n	8006408 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d10b      	bne.n	80063ac <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	881a      	ldrh	r2, [r3, #0]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063a0:	b292      	uxth	r2, r2
 80063a2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	3302      	adds	r3, #2
 80063a8:	61bb      	str	r3, [r7, #24]
 80063aa:	e008      	b.n	80063be <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	781a      	ldrb	r2, [r3, #0]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	b292      	uxth	r2, r2
 80063b6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	3301      	adds	r3, #1
 80063bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	3b01      	subs	r3, #1
 80063c8:	b29a      	uxth	r2, r3
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1c8      	bne.n	800636e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	9300      	str	r3, [sp, #0]
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	2200      	movs	r2, #0
 80063e4:	2140      	movs	r1, #64	; 0x40
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	f000 fc14 	bl	8006c14 <UART_WaitOnFlagUntilTimeout>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d004      	beq.n	80063fc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2220      	movs	r2, #32
 80063f6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80063f8:	2303      	movs	r3, #3
 80063fa:	e005      	b.n	8006408 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2220      	movs	r2, #32
 8006400:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006402:	2300      	movs	r3, #0
 8006404:	e000      	b.n	8006408 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006406:	2302      	movs	r3, #2
  }
}
 8006408:	4618      	mov	r0, r3
 800640a:	3720      	adds	r7, #32
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006410:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006414:	b08a      	sub	sp, #40	; 0x28
 8006416:	af00      	add	r7, sp, #0
 8006418:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800641a:	2300      	movs	r3, #0
 800641c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	689a      	ldr	r2, [r3, #8]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	431a      	orrs	r2, r3
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	431a      	orrs	r2, r3
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	69db      	ldr	r3, [r3, #28]
 8006434:	4313      	orrs	r3, r2
 8006436:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	4ba4      	ldr	r3, [pc, #656]	; (80066d0 <UART_SetConfig+0x2c0>)
 8006440:	4013      	ands	r3, r2
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	6812      	ldr	r2, [r2, #0]
 8006446:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006448:	430b      	orrs	r3, r1
 800644a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	68da      	ldr	r2, [r3, #12]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	430a      	orrs	r2, r1
 8006460:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a99      	ldr	r2, [pc, #612]	; (80066d4 <UART_SetConfig+0x2c4>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d004      	beq.n	800647c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6a1b      	ldr	r3, [r3, #32]
 8006476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006478:	4313      	orrs	r3, r2
 800647a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800648c:	430a      	orrs	r2, r1
 800648e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a90      	ldr	r2, [pc, #576]	; (80066d8 <UART_SetConfig+0x2c8>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d126      	bne.n	80064e8 <UART_SetConfig+0xd8>
 800649a:	4b90      	ldr	r3, [pc, #576]	; (80066dc <UART_SetConfig+0x2cc>)
 800649c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064a0:	f003 0303 	and.w	r3, r3, #3
 80064a4:	2b03      	cmp	r3, #3
 80064a6:	d81b      	bhi.n	80064e0 <UART_SetConfig+0xd0>
 80064a8:	a201      	add	r2, pc, #4	; (adr r2, 80064b0 <UART_SetConfig+0xa0>)
 80064aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ae:	bf00      	nop
 80064b0:	080064c1 	.word	0x080064c1
 80064b4:	080064d1 	.word	0x080064d1
 80064b8:	080064c9 	.word	0x080064c9
 80064bc:	080064d9 	.word	0x080064d9
 80064c0:	2301      	movs	r3, #1
 80064c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064c6:	e116      	b.n	80066f6 <UART_SetConfig+0x2e6>
 80064c8:	2302      	movs	r3, #2
 80064ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064ce:	e112      	b.n	80066f6 <UART_SetConfig+0x2e6>
 80064d0:	2304      	movs	r3, #4
 80064d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064d6:	e10e      	b.n	80066f6 <UART_SetConfig+0x2e6>
 80064d8:	2308      	movs	r3, #8
 80064da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064de:	e10a      	b.n	80066f6 <UART_SetConfig+0x2e6>
 80064e0:	2310      	movs	r3, #16
 80064e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064e6:	e106      	b.n	80066f6 <UART_SetConfig+0x2e6>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a7c      	ldr	r2, [pc, #496]	; (80066e0 <UART_SetConfig+0x2d0>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d138      	bne.n	8006564 <UART_SetConfig+0x154>
 80064f2:	4b7a      	ldr	r3, [pc, #488]	; (80066dc <UART_SetConfig+0x2cc>)
 80064f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f8:	f003 030c 	and.w	r3, r3, #12
 80064fc:	2b0c      	cmp	r3, #12
 80064fe:	d82d      	bhi.n	800655c <UART_SetConfig+0x14c>
 8006500:	a201      	add	r2, pc, #4	; (adr r2, 8006508 <UART_SetConfig+0xf8>)
 8006502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006506:	bf00      	nop
 8006508:	0800653d 	.word	0x0800653d
 800650c:	0800655d 	.word	0x0800655d
 8006510:	0800655d 	.word	0x0800655d
 8006514:	0800655d 	.word	0x0800655d
 8006518:	0800654d 	.word	0x0800654d
 800651c:	0800655d 	.word	0x0800655d
 8006520:	0800655d 	.word	0x0800655d
 8006524:	0800655d 	.word	0x0800655d
 8006528:	08006545 	.word	0x08006545
 800652c:	0800655d 	.word	0x0800655d
 8006530:	0800655d 	.word	0x0800655d
 8006534:	0800655d 	.word	0x0800655d
 8006538:	08006555 	.word	0x08006555
 800653c:	2300      	movs	r3, #0
 800653e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006542:	e0d8      	b.n	80066f6 <UART_SetConfig+0x2e6>
 8006544:	2302      	movs	r3, #2
 8006546:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800654a:	e0d4      	b.n	80066f6 <UART_SetConfig+0x2e6>
 800654c:	2304      	movs	r3, #4
 800654e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006552:	e0d0      	b.n	80066f6 <UART_SetConfig+0x2e6>
 8006554:	2308      	movs	r3, #8
 8006556:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800655a:	e0cc      	b.n	80066f6 <UART_SetConfig+0x2e6>
 800655c:	2310      	movs	r3, #16
 800655e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006562:	e0c8      	b.n	80066f6 <UART_SetConfig+0x2e6>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a5e      	ldr	r2, [pc, #376]	; (80066e4 <UART_SetConfig+0x2d4>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d125      	bne.n	80065ba <UART_SetConfig+0x1aa>
 800656e:	4b5b      	ldr	r3, [pc, #364]	; (80066dc <UART_SetConfig+0x2cc>)
 8006570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006574:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006578:	2b30      	cmp	r3, #48	; 0x30
 800657a:	d016      	beq.n	80065aa <UART_SetConfig+0x19a>
 800657c:	2b30      	cmp	r3, #48	; 0x30
 800657e:	d818      	bhi.n	80065b2 <UART_SetConfig+0x1a2>
 8006580:	2b20      	cmp	r3, #32
 8006582:	d00a      	beq.n	800659a <UART_SetConfig+0x18a>
 8006584:	2b20      	cmp	r3, #32
 8006586:	d814      	bhi.n	80065b2 <UART_SetConfig+0x1a2>
 8006588:	2b00      	cmp	r3, #0
 800658a:	d002      	beq.n	8006592 <UART_SetConfig+0x182>
 800658c:	2b10      	cmp	r3, #16
 800658e:	d008      	beq.n	80065a2 <UART_SetConfig+0x192>
 8006590:	e00f      	b.n	80065b2 <UART_SetConfig+0x1a2>
 8006592:	2300      	movs	r3, #0
 8006594:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006598:	e0ad      	b.n	80066f6 <UART_SetConfig+0x2e6>
 800659a:	2302      	movs	r3, #2
 800659c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065a0:	e0a9      	b.n	80066f6 <UART_SetConfig+0x2e6>
 80065a2:	2304      	movs	r3, #4
 80065a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065a8:	e0a5      	b.n	80066f6 <UART_SetConfig+0x2e6>
 80065aa:	2308      	movs	r3, #8
 80065ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065b0:	e0a1      	b.n	80066f6 <UART_SetConfig+0x2e6>
 80065b2:	2310      	movs	r3, #16
 80065b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065b8:	e09d      	b.n	80066f6 <UART_SetConfig+0x2e6>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a4a      	ldr	r2, [pc, #296]	; (80066e8 <UART_SetConfig+0x2d8>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d125      	bne.n	8006610 <UART_SetConfig+0x200>
 80065c4:	4b45      	ldr	r3, [pc, #276]	; (80066dc <UART_SetConfig+0x2cc>)
 80065c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80065ce:	2bc0      	cmp	r3, #192	; 0xc0
 80065d0:	d016      	beq.n	8006600 <UART_SetConfig+0x1f0>
 80065d2:	2bc0      	cmp	r3, #192	; 0xc0
 80065d4:	d818      	bhi.n	8006608 <UART_SetConfig+0x1f8>
 80065d6:	2b80      	cmp	r3, #128	; 0x80
 80065d8:	d00a      	beq.n	80065f0 <UART_SetConfig+0x1e0>
 80065da:	2b80      	cmp	r3, #128	; 0x80
 80065dc:	d814      	bhi.n	8006608 <UART_SetConfig+0x1f8>
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d002      	beq.n	80065e8 <UART_SetConfig+0x1d8>
 80065e2:	2b40      	cmp	r3, #64	; 0x40
 80065e4:	d008      	beq.n	80065f8 <UART_SetConfig+0x1e8>
 80065e6:	e00f      	b.n	8006608 <UART_SetConfig+0x1f8>
 80065e8:	2300      	movs	r3, #0
 80065ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065ee:	e082      	b.n	80066f6 <UART_SetConfig+0x2e6>
 80065f0:	2302      	movs	r3, #2
 80065f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065f6:	e07e      	b.n	80066f6 <UART_SetConfig+0x2e6>
 80065f8:	2304      	movs	r3, #4
 80065fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065fe:	e07a      	b.n	80066f6 <UART_SetConfig+0x2e6>
 8006600:	2308      	movs	r3, #8
 8006602:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006606:	e076      	b.n	80066f6 <UART_SetConfig+0x2e6>
 8006608:	2310      	movs	r3, #16
 800660a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800660e:	e072      	b.n	80066f6 <UART_SetConfig+0x2e6>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a35      	ldr	r2, [pc, #212]	; (80066ec <UART_SetConfig+0x2dc>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d12a      	bne.n	8006670 <UART_SetConfig+0x260>
 800661a:	4b30      	ldr	r3, [pc, #192]	; (80066dc <UART_SetConfig+0x2cc>)
 800661c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006620:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006624:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006628:	d01a      	beq.n	8006660 <UART_SetConfig+0x250>
 800662a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800662e:	d81b      	bhi.n	8006668 <UART_SetConfig+0x258>
 8006630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006634:	d00c      	beq.n	8006650 <UART_SetConfig+0x240>
 8006636:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800663a:	d815      	bhi.n	8006668 <UART_SetConfig+0x258>
 800663c:	2b00      	cmp	r3, #0
 800663e:	d003      	beq.n	8006648 <UART_SetConfig+0x238>
 8006640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006644:	d008      	beq.n	8006658 <UART_SetConfig+0x248>
 8006646:	e00f      	b.n	8006668 <UART_SetConfig+0x258>
 8006648:	2300      	movs	r3, #0
 800664a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800664e:	e052      	b.n	80066f6 <UART_SetConfig+0x2e6>
 8006650:	2302      	movs	r3, #2
 8006652:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006656:	e04e      	b.n	80066f6 <UART_SetConfig+0x2e6>
 8006658:	2304      	movs	r3, #4
 800665a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800665e:	e04a      	b.n	80066f6 <UART_SetConfig+0x2e6>
 8006660:	2308      	movs	r3, #8
 8006662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006666:	e046      	b.n	80066f6 <UART_SetConfig+0x2e6>
 8006668:	2310      	movs	r3, #16
 800666a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800666e:	e042      	b.n	80066f6 <UART_SetConfig+0x2e6>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a17      	ldr	r2, [pc, #92]	; (80066d4 <UART_SetConfig+0x2c4>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d13a      	bne.n	80066f0 <UART_SetConfig+0x2e0>
 800667a:	4b18      	ldr	r3, [pc, #96]	; (80066dc <UART_SetConfig+0x2cc>)
 800667c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006680:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006684:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006688:	d01a      	beq.n	80066c0 <UART_SetConfig+0x2b0>
 800668a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800668e:	d81b      	bhi.n	80066c8 <UART_SetConfig+0x2b8>
 8006690:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006694:	d00c      	beq.n	80066b0 <UART_SetConfig+0x2a0>
 8006696:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800669a:	d815      	bhi.n	80066c8 <UART_SetConfig+0x2b8>
 800669c:	2b00      	cmp	r3, #0
 800669e:	d003      	beq.n	80066a8 <UART_SetConfig+0x298>
 80066a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066a4:	d008      	beq.n	80066b8 <UART_SetConfig+0x2a8>
 80066a6:	e00f      	b.n	80066c8 <UART_SetConfig+0x2b8>
 80066a8:	2300      	movs	r3, #0
 80066aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066ae:	e022      	b.n	80066f6 <UART_SetConfig+0x2e6>
 80066b0:	2302      	movs	r3, #2
 80066b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066b6:	e01e      	b.n	80066f6 <UART_SetConfig+0x2e6>
 80066b8:	2304      	movs	r3, #4
 80066ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066be:	e01a      	b.n	80066f6 <UART_SetConfig+0x2e6>
 80066c0:	2308      	movs	r3, #8
 80066c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066c6:	e016      	b.n	80066f6 <UART_SetConfig+0x2e6>
 80066c8:	2310      	movs	r3, #16
 80066ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066ce:	e012      	b.n	80066f6 <UART_SetConfig+0x2e6>
 80066d0:	efff69f3 	.word	0xefff69f3
 80066d4:	40008000 	.word	0x40008000
 80066d8:	40013800 	.word	0x40013800
 80066dc:	40021000 	.word	0x40021000
 80066e0:	40004400 	.word	0x40004400
 80066e4:	40004800 	.word	0x40004800
 80066e8:	40004c00 	.word	0x40004c00
 80066ec:	40005000 	.word	0x40005000
 80066f0:	2310      	movs	r3, #16
 80066f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a9f      	ldr	r2, [pc, #636]	; (8006978 <UART_SetConfig+0x568>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d17a      	bne.n	80067f6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006700:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006704:	2b08      	cmp	r3, #8
 8006706:	d824      	bhi.n	8006752 <UART_SetConfig+0x342>
 8006708:	a201      	add	r2, pc, #4	; (adr r2, 8006710 <UART_SetConfig+0x300>)
 800670a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800670e:	bf00      	nop
 8006710:	08006735 	.word	0x08006735
 8006714:	08006753 	.word	0x08006753
 8006718:	0800673d 	.word	0x0800673d
 800671c:	08006753 	.word	0x08006753
 8006720:	08006743 	.word	0x08006743
 8006724:	08006753 	.word	0x08006753
 8006728:	08006753 	.word	0x08006753
 800672c:	08006753 	.word	0x08006753
 8006730:	0800674b 	.word	0x0800674b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006734:	f7fe fe2c 	bl	8005390 <HAL_RCC_GetPCLK1Freq>
 8006738:	61f8      	str	r0, [r7, #28]
        break;
 800673a:	e010      	b.n	800675e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800673c:	4b8f      	ldr	r3, [pc, #572]	; (800697c <UART_SetConfig+0x56c>)
 800673e:	61fb      	str	r3, [r7, #28]
        break;
 8006740:	e00d      	b.n	800675e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006742:	f7fe fd8d 	bl	8005260 <HAL_RCC_GetSysClockFreq>
 8006746:	61f8      	str	r0, [r7, #28]
        break;
 8006748:	e009      	b.n	800675e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800674a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800674e:	61fb      	str	r3, [r7, #28]
        break;
 8006750:	e005      	b.n	800675e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006752:	2300      	movs	r3, #0
 8006754:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800675c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	2b00      	cmp	r3, #0
 8006762:	f000 80fb 	beq.w	800695c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	685a      	ldr	r2, [r3, #4]
 800676a:	4613      	mov	r3, r2
 800676c:	005b      	lsls	r3, r3, #1
 800676e:	4413      	add	r3, r2
 8006770:	69fa      	ldr	r2, [r7, #28]
 8006772:	429a      	cmp	r2, r3
 8006774:	d305      	bcc.n	8006782 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800677c:	69fa      	ldr	r2, [r7, #28]
 800677e:	429a      	cmp	r2, r3
 8006780:	d903      	bls.n	800678a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006788:	e0e8      	b.n	800695c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	2200      	movs	r2, #0
 800678e:	461c      	mov	r4, r3
 8006790:	4615      	mov	r5, r2
 8006792:	f04f 0200 	mov.w	r2, #0
 8006796:	f04f 0300 	mov.w	r3, #0
 800679a:	022b      	lsls	r3, r5, #8
 800679c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80067a0:	0222      	lsls	r2, r4, #8
 80067a2:	68f9      	ldr	r1, [r7, #12]
 80067a4:	6849      	ldr	r1, [r1, #4]
 80067a6:	0849      	lsrs	r1, r1, #1
 80067a8:	2000      	movs	r0, #0
 80067aa:	4688      	mov	r8, r1
 80067ac:	4681      	mov	r9, r0
 80067ae:	eb12 0a08 	adds.w	sl, r2, r8
 80067b2:	eb43 0b09 	adc.w	fp, r3, r9
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	603b      	str	r3, [r7, #0]
 80067be:	607a      	str	r2, [r7, #4]
 80067c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067c4:	4650      	mov	r0, sl
 80067c6:	4659      	mov	r1, fp
 80067c8:	f7fa f9ee 	bl	8000ba8 <__aeabi_uldivmod>
 80067cc:	4602      	mov	r2, r0
 80067ce:	460b      	mov	r3, r1
 80067d0:	4613      	mov	r3, r2
 80067d2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067da:	d308      	bcc.n	80067ee <UART_SetConfig+0x3de>
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067e2:	d204      	bcs.n	80067ee <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	69ba      	ldr	r2, [r7, #24]
 80067ea:	60da      	str	r2, [r3, #12]
 80067ec:	e0b6      	b.n	800695c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80067f4:	e0b2      	b.n	800695c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	69db      	ldr	r3, [r3, #28]
 80067fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067fe:	d15e      	bne.n	80068be <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006800:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006804:	2b08      	cmp	r3, #8
 8006806:	d828      	bhi.n	800685a <UART_SetConfig+0x44a>
 8006808:	a201      	add	r2, pc, #4	; (adr r2, 8006810 <UART_SetConfig+0x400>)
 800680a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680e:	bf00      	nop
 8006810:	08006835 	.word	0x08006835
 8006814:	0800683d 	.word	0x0800683d
 8006818:	08006845 	.word	0x08006845
 800681c:	0800685b 	.word	0x0800685b
 8006820:	0800684b 	.word	0x0800684b
 8006824:	0800685b 	.word	0x0800685b
 8006828:	0800685b 	.word	0x0800685b
 800682c:	0800685b 	.word	0x0800685b
 8006830:	08006853 	.word	0x08006853
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006834:	f7fe fdac 	bl	8005390 <HAL_RCC_GetPCLK1Freq>
 8006838:	61f8      	str	r0, [r7, #28]
        break;
 800683a:	e014      	b.n	8006866 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800683c:	f7fe fdbe 	bl	80053bc <HAL_RCC_GetPCLK2Freq>
 8006840:	61f8      	str	r0, [r7, #28]
        break;
 8006842:	e010      	b.n	8006866 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006844:	4b4d      	ldr	r3, [pc, #308]	; (800697c <UART_SetConfig+0x56c>)
 8006846:	61fb      	str	r3, [r7, #28]
        break;
 8006848:	e00d      	b.n	8006866 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800684a:	f7fe fd09 	bl	8005260 <HAL_RCC_GetSysClockFreq>
 800684e:	61f8      	str	r0, [r7, #28]
        break;
 8006850:	e009      	b.n	8006866 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006856:	61fb      	str	r3, [r7, #28]
        break;
 8006858:	e005      	b.n	8006866 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800685a:	2300      	movs	r3, #0
 800685c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006864:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d077      	beq.n	800695c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	005a      	lsls	r2, r3, #1
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	085b      	lsrs	r3, r3, #1
 8006876:	441a      	add	r2, r3
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006880:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	2b0f      	cmp	r3, #15
 8006886:	d916      	bls.n	80068b6 <UART_SetConfig+0x4a6>
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800688e:	d212      	bcs.n	80068b6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	b29b      	uxth	r3, r3
 8006894:	f023 030f 	bic.w	r3, r3, #15
 8006898:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	085b      	lsrs	r3, r3, #1
 800689e:	b29b      	uxth	r3, r3
 80068a0:	f003 0307 	and.w	r3, r3, #7
 80068a4:	b29a      	uxth	r2, r3
 80068a6:	8afb      	ldrh	r3, [r7, #22]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	8afa      	ldrh	r2, [r7, #22]
 80068b2:	60da      	str	r2, [r3, #12]
 80068b4:	e052      	b.n	800695c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80068bc:	e04e      	b.n	800695c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80068c2:	2b08      	cmp	r3, #8
 80068c4:	d827      	bhi.n	8006916 <UART_SetConfig+0x506>
 80068c6:	a201      	add	r2, pc, #4	; (adr r2, 80068cc <UART_SetConfig+0x4bc>)
 80068c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068cc:	080068f1 	.word	0x080068f1
 80068d0:	080068f9 	.word	0x080068f9
 80068d4:	08006901 	.word	0x08006901
 80068d8:	08006917 	.word	0x08006917
 80068dc:	08006907 	.word	0x08006907
 80068e0:	08006917 	.word	0x08006917
 80068e4:	08006917 	.word	0x08006917
 80068e8:	08006917 	.word	0x08006917
 80068ec:	0800690f 	.word	0x0800690f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068f0:	f7fe fd4e 	bl	8005390 <HAL_RCC_GetPCLK1Freq>
 80068f4:	61f8      	str	r0, [r7, #28]
        break;
 80068f6:	e014      	b.n	8006922 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068f8:	f7fe fd60 	bl	80053bc <HAL_RCC_GetPCLK2Freq>
 80068fc:	61f8      	str	r0, [r7, #28]
        break;
 80068fe:	e010      	b.n	8006922 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006900:	4b1e      	ldr	r3, [pc, #120]	; (800697c <UART_SetConfig+0x56c>)
 8006902:	61fb      	str	r3, [r7, #28]
        break;
 8006904:	e00d      	b.n	8006922 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006906:	f7fe fcab 	bl	8005260 <HAL_RCC_GetSysClockFreq>
 800690a:	61f8      	str	r0, [r7, #28]
        break;
 800690c:	e009      	b.n	8006922 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800690e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006912:	61fb      	str	r3, [r7, #28]
        break;
 8006914:	e005      	b.n	8006922 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006916:	2300      	movs	r3, #0
 8006918:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006920:	bf00      	nop
    }

    if (pclk != 0U)
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d019      	beq.n	800695c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	085a      	lsrs	r2, r3, #1
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	441a      	add	r2, r3
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	fbb2 f3f3 	udiv	r3, r2, r3
 800693a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	2b0f      	cmp	r3, #15
 8006940:	d909      	bls.n	8006956 <UART_SetConfig+0x546>
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006948:	d205      	bcs.n	8006956 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	b29a      	uxth	r2, r3
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	60da      	str	r2, [r3, #12]
 8006954:	e002      	b.n	800695c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2200      	movs	r2, #0
 8006960:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006968:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800696c:	4618      	mov	r0, r3
 800696e:	3728      	adds	r7, #40	; 0x28
 8006970:	46bd      	mov	sp, r7
 8006972:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006976:	bf00      	nop
 8006978:	40008000 	.word	0x40008000
 800697c:	00f42400 	.word	0x00f42400

08006980 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698c:	f003 0308 	and.w	r3, r3, #8
 8006990:	2b00      	cmp	r3, #0
 8006992:	d00a      	beq.n	80069aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	430a      	orrs	r2, r1
 80069a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ae:	f003 0301 	and.w	r3, r3, #1
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00a      	beq.n	80069cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	430a      	orrs	r2, r1
 80069ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d0:	f003 0302 	and.w	r3, r3, #2
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00a      	beq.n	80069ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	430a      	orrs	r2, r1
 80069ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f2:	f003 0304 	and.w	r3, r3, #4
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00a      	beq.n	8006a10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	430a      	orrs	r2, r1
 8006a0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a14:	f003 0310 	and.w	r3, r3, #16
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d00a      	beq.n	8006a32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	430a      	orrs	r2, r1
 8006a30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a36:	f003 0320 	and.w	r3, r3, #32
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00a      	beq.n	8006a54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	430a      	orrs	r2, r1
 8006a52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d01a      	beq.n	8006a96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	430a      	orrs	r2, r1
 8006a74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a7e:	d10a      	bne.n	8006a96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	430a      	orrs	r2, r1
 8006a94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00a      	beq.n	8006ab8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	430a      	orrs	r2, r1
 8006ab6:	605a      	str	r2, [r3, #4]
  }
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b098      	sub	sp, #96	; 0x60
 8006ac8:	af02      	add	r7, sp, #8
 8006aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ad4:	f7fb fb00 	bl	80020d8 <HAL_GetTick>
 8006ad8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0308 	and.w	r3, r3, #8
 8006ae4:	2b08      	cmp	r3, #8
 8006ae6:	d12e      	bne.n	8006b46 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ae8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006aec:	9300      	str	r3, [sp, #0]
 8006aee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006af0:	2200      	movs	r2, #0
 8006af2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 f88c 	bl	8006c14 <UART_WaitOnFlagUntilTimeout>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d021      	beq.n	8006b46 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b0a:	e853 3f00 	ldrex	r3, [r3]
 8006b0e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b16:	653b      	str	r3, [r7, #80]	; 0x50
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b20:	647b      	str	r3, [r7, #68]	; 0x44
 8006b22:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b24:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b28:	e841 2300 	strex	r3, r2, [r1]
 8006b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d1e6      	bne.n	8006b02 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2220      	movs	r2, #32
 8006b38:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e062      	b.n	8006c0c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f003 0304 	and.w	r3, r3, #4
 8006b50:	2b04      	cmp	r3, #4
 8006b52:	d149      	bne.n	8006be8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b58:	9300      	str	r3, [sp, #0]
 8006b5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 f856 	bl	8006c14 <UART_WaitOnFlagUntilTimeout>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d03c      	beq.n	8006be8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b76:	e853 3f00 	ldrex	r3, [r3]
 8006b7a:	623b      	str	r3, [r7, #32]
   return(result);
 8006b7c:	6a3b      	ldr	r3, [r7, #32]
 8006b7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	461a      	mov	r2, r3
 8006b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b8c:	633b      	str	r3, [r7, #48]	; 0x30
 8006b8e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b94:	e841 2300 	strex	r3, r2, [r1]
 8006b98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1e6      	bne.n	8006b6e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	3308      	adds	r3, #8
 8006ba6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	e853 3f00 	ldrex	r3, [r3]
 8006bae:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f023 0301 	bic.w	r3, r3, #1
 8006bb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	3308      	adds	r3, #8
 8006bbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bc0:	61fa      	str	r2, [r7, #28]
 8006bc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc4:	69b9      	ldr	r1, [r7, #24]
 8006bc6:	69fa      	ldr	r2, [r7, #28]
 8006bc8:	e841 2300 	strex	r3, r2, [r1]
 8006bcc:	617b      	str	r3, [r7, #20]
   return(result);
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d1e5      	bne.n	8006ba0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2220      	movs	r2, #32
 8006bd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006be4:	2303      	movs	r3, #3
 8006be6:	e011      	b.n	8006c0c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2220      	movs	r2, #32
 8006bec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2220      	movs	r2, #32
 8006bf2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006c0a:	2300      	movs	r3, #0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3758      	adds	r7, #88	; 0x58
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	603b      	str	r3, [r7, #0]
 8006c20:	4613      	mov	r3, r2
 8006c22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c24:	e049      	b.n	8006cba <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c2c:	d045      	beq.n	8006cba <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c2e:	f7fb fa53 	bl	80020d8 <HAL_GetTick>
 8006c32:	4602      	mov	r2, r0
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	1ad3      	subs	r3, r2, r3
 8006c38:	69ba      	ldr	r2, [r7, #24]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d302      	bcc.n	8006c44 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d101      	bne.n	8006c48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c44:	2303      	movs	r3, #3
 8006c46:	e048      	b.n	8006cda <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 0304 	and.w	r3, r3, #4
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d031      	beq.n	8006cba <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	69db      	ldr	r3, [r3, #28]
 8006c5c:	f003 0308 	and.w	r3, r3, #8
 8006c60:	2b08      	cmp	r3, #8
 8006c62:	d110      	bne.n	8006c86 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2208      	movs	r2, #8
 8006c6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	f000 f838 	bl	8006ce2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2208      	movs	r2, #8
 8006c76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e029      	b.n	8006cda <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	69db      	ldr	r3, [r3, #28]
 8006c8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c94:	d111      	bne.n	8006cba <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ca0:	68f8      	ldr	r0, [r7, #12]
 8006ca2:	f000 f81e 	bl	8006ce2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2220      	movs	r2, #32
 8006caa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e00f      	b.n	8006cda <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	69da      	ldr	r2, [r3, #28]
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	68ba      	ldr	r2, [r7, #8]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	bf0c      	ite	eq
 8006cca:	2301      	moveq	r3, #1
 8006ccc:	2300      	movne	r3, #0
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	79fb      	ldrb	r3, [r7, #7]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d0a6      	beq.n	8006c26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3710      	adds	r7, #16
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}

08006ce2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ce2:	b480      	push	{r7}
 8006ce4:	b095      	sub	sp, #84	; 0x54
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cf2:	e853 3f00 	ldrex	r3, [r3]
 8006cf6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	461a      	mov	r2, r3
 8006d06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d08:	643b      	str	r3, [r7, #64]	; 0x40
 8006d0a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d10:	e841 2300 	strex	r3, r2, [r1]
 8006d14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1e6      	bne.n	8006cea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	3308      	adds	r3, #8
 8006d22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d24:	6a3b      	ldr	r3, [r7, #32]
 8006d26:	e853 3f00 	ldrex	r3, [r3]
 8006d2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	f023 0301 	bic.w	r3, r3, #1
 8006d32:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	3308      	adds	r3, #8
 8006d3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d44:	e841 2300 	strex	r3, r2, [r1]
 8006d48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d1e5      	bne.n	8006d1c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d118      	bne.n	8006d8a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	e853 3f00 	ldrex	r3, [r3]
 8006d64:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	f023 0310 	bic.w	r3, r3, #16
 8006d6c:	647b      	str	r3, [r7, #68]	; 0x44
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	461a      	mov	r2, r3
 8006d74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d76:	61bb      	str	r3, [r7, #24]
 8006d78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7a:	6979      	ldr	r1, [r7, #20]
 8006d7c:	69ba      	ldr	r2, [r7, #24]
 8006d7e:	e841 2300 	strex	r3, r2, [r1]
 8006d82:	613b      	str	r3, [r7, #16]
   return(result);
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1e6      	bne.n	8006d58 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2220      	movs	r2, #32
 8006d8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006d9e:	bf00      	nop
 8006da0:	3754      	adds	r7, #84	; 0x54
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr

08006daa <__cvt>:
 8006daa:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006dae:	ec55 4b10 	vmov	r4, r5, d0
 8006db2:	2d00      	cmp	r5, #0
 8006db4:	460e      	mov	r6, r1
 8006db6:	4619      	mov	r1, r3
 8006db8:	462b      	mov	r3, r5
 8006dba:	bfbb      	ittet	lt
 8006dbc:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006dc0:	461d      	movlt	r5, r3
 8006dc2:	2300      	movge	r3, #0
 8006dc4:	232d      	movlt	r3, #45	; 0x2d
 8006dc6:	700b      	strb	r3, [r1, #0]
 8006dc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006dca:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006dce:	4691      	mov	r9, r2
 8006dd0:	f023 0820 	bic.w	r8, r3, #32
 8006dd4:	bfbc      	itt	lt
 8006dd6:	4622      	movlt	r2, r4
 8006dd8:	4614      	movlt	r4, r2
 8006dda:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006dde:	d005      	beq.n	8006dec <__cvt+0x42>
 8006de0:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006de4:	d100      	bne.n	8006de8 <__cvt+0x3e>
 8006de6:	3601      	adds	r6, #1
 8006de8:	2102      	movs	r1, #2
 8006dea:	e000      	b.n	8006dee <__cvt+0x44>
 8006dec:	2103      	movs	r1, #3
 8006dee:	ab03      	add	r3, sp, #12
 8006df0:	9301      	str	r3, [sp, #4]
 8006df2:	ab02      	add	r3, sp, #8
 8006df4:	9300      	str	r3, [sp, #0]
 8006df6:	ec45 4b10 	vmov	d0, r4, r5
 8006dfa:	4653      	mov	r3, sl
 8006dfc:	4632      	mov	r2, r6
 8006dfe:	f000 fe2f 	bl	8007a60 <_dtoa_r>
 8006e02:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006e06:	4607      	mov	r7, r0
 8006e08:	d102      	bne.n	8006e10 <__cvt+0x66>
 8006e0a:	f019 0f01 	tst.w	r9, #1
 8006e0e:	d022      	beq.n	8006e56 <__cvt+0xac>
 8006e10:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006e14:	eb07 0906 	add.w	r9, r7, r6
 8006e18:	d110      	bne.n	8006e3c <__cvt+0x92>
 8006e1a:	783b      	ldrb	r3, [r7, #0]
 8006e1c:	2b30      	cmp	r3, #48	; 0x30
 8006e1e:	d10a      	bne.n	8006e36 <__cvt+0x8c>
 8006e20:	2200      	movs	r2, #0
 8006e22:	2300      	movs	r3, #0
 8006e24:	4620      	mov	r0, r4
 8006e26:	4629      	mov	r1, r5
 8006e28:	f7f9 fe4e 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e2c:	b918      	cbnz	r0, 8006e36 <__cvt+0x8c>
 8006e2e:	f1c6 0601 	rsb	r6, r6, #1
 8006e32:	f8ca 6000 	str.w	r6, [sl]
 8006e36:	f8da 3000 	ldr.w	r3, [sl]
 8006e3a:	4499      	add	r9, r3
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	2300      	movs	r3, #0
 8006e40:	4620      	mov	r0, r4
 8006e42:	4629      	mov	r1, r5
 8006e44:	f7f9 fe40 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e48:	b108      	cbz	r0, 8006e4e <__cvt+0xa4>
 8006e4a:	f8cd 900c 	str.w	r9, [sp, #12]
 8006e4e:	2230      	movs	r2, #48	; 0x30
 8006e50:	9b03      	ldr	r3, [sp, #12]
 8006e52:	454b      	cmp	r3, r9
 8006e54:	d307      	bcc.n	8006e66 <__cvt+0xbc>
 8006e56:	9b03      	ldr	r3, [sp, #12]
 8006e58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e5a:	1bdb      	subs	r3, r3, r7
 8006e5c:	4638      	mov	r0, r7
 8006e5e:	6013      	str	r3, [r2, #0]
 8006e60:	b004      	add	sp, #16
 8006e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e66:	1c59      	adds	r1, r3, #1
 8006e68:	9103      	str	r1, [sp, #12]
 8006e6a:	701a      	strb	r2, [r3, #0]
 8006e6c:	e7f0      	b.n	8006e50 <__cvt+0xa6>

08006e6e <__exponent>:
 8006e6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e70:	4603      	mov	r3, r0
 8006e72:	2900      	cmp	r1, #0
 8006e74:	bfb8      	it	lt
 8006e76:	4249      	neglt	r1, r1
 8006e78:	f803 2b02 	strb.w	r2, [r3], #2
 8006e7c:	bfb4      	ite	lt
 8006e7e:	222d      	movlt	r2, #45	; 0x2d
 8006e80:	222b      	movge	r2, #43	; 0x2b
 8006e82:	2909      	cmp	r1, #9
 8006e84:	7042      	strb	r2, [r0, #1]
 8006e86:	dd2a      	ble.n	8006ede <__exponent+0x70>
 8006e88:	f10d 0207 	add.w	r2, sp, #7
 8006e8c:	4617      	mov	r7, r2
 8006e8e:	260a      	movs	r6, #10
 8006e90:	4694      	mov	ip, r2
 8006e92:	fb91 f5f6 	sdiv	r5, r1, r6
 8006e96:	fb06 1415 	mls	r4, r6, r5, r1
 8006e9a:	3430      	adds	r4, #48	; 0x30
 8006e9c:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006ea0:	460c      	mov	r4, r1
 8006ea2:	2c63      	cmp	r4, #99	; 0x63
 8006ea4:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8006ea8:	4629      	mov	r1, r5
 8006eaa:	dcf1      	bgt.n	8006e90 <__exponent+0x22>
 8006eac:	3130      	adds	r1, #48	; 0x30
 8006eae:	f1ac 0402 	sub.w	r4, ip, #2
 8006eb2:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006eb6:	1c41      	adds	r1, r0, #1
 8006eb8:	4622      	mov	r2, r4
 8006eba:	42ba      	cmp	r2, r7
 8006ebc:	d30a      	bcc.n	8006ed4 <__exponent+0x66>
 8006ebe:	f10d 0209 	add.w	r2, sp, #9
 8006ec2:	eba2 020c 	sub.w	r2, r2, ip
 8006ec6:	42bc      	cmp	r4, r7
 8006ec8:	bf88      	it	hi
 8006eca:	2200      	movhi	r2, #0
 8006ecc:	4413      	add	r3, r2
 8006ece:	1a18      	subs	r0, r3, r0
 8006ed0:	b003      	add	sp, #12
 8006ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ed4:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006ed8:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006edc:	e7ed      	b.n	8006eba <__exponent+0x4c>
 8006ede:	2330      	movs	r3, #48	; 0x30
 8006ee0:	3130      	adds	r1, #48	; 0x30
 8006ee2:	7083      	strb	r3, [r0, #2]
 8006ee4:	70c1      	strb	r1, [r0, #3]
 8006ee6:	1d03      	adds	r3, r0, #4
 8006ee8:	e7f1      	b.n	8006ece <__exponent+0x60>
	...

08006eec <_printf_float>:
 8006eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ef0:	ed2d 8b02 	vpush	{d8}
 8006ef4:	b08d      	sub	sp, #52	; 0x34
 8006ef6:	460c      	mov	r4, r1
 8006ef8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006efc:	4616      	mov	r6, r2
 8006efe:	461f      	mov	r7, r3
 8006f00:	4605      	mov	r5, r0
 8006f02:	f000 fcf1 	bl	80078e8 <_localeconv_r>
 8006f06:	f8d0 a000 	ldr.w	sl, [r0]
 8006f0a:	4650      	mov	r0, sl
 8006f0c:	f7f9 f9b0 	bl	8000270 <strlen>
 8006f10:	2300      	movs	r3, #0
 8006f12:	930a      	str	r3, [sp, #40]	; 0x28
 8006f14:	6823      	ldr	r3, [r4, #0]
 8006f16:	9305      	str	r3, [sp, #20]
 8006f18:	f8d8 3000 	ldr.w	r3, [r8]
 8006f1c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006f20:	3307      	adds	r3, #7
 8006f22:	f023 0307 	bic.w	r3, r3, #7
 8006f26:	f103 0208 	add.w	r2, r3, #8
 8006f2a:	f8c8 2000 	str.w	r2, [r8]
 8006f2e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006f32:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006f36:	9307      	str	r3, [sp, #28]
 8006f38:	f8cd 8018 	str.w	r8, [sp, #24]
 8006f3c:	ee08 0a10 	vmov	s16, r0
 8006f40:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006f44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f48:	4b9e      	ldr	r3, [pc, #632]	; (80071c4 <_printf_float+0x2d8>)
 8006f4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f4e:	f7f9 fded 	bl	8000b2c <__aeabi_dcmpun>
 8006f52:	bb88      	cbnz	r0, 8006fb8 <_printf_float+0xcc>
 8006f54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f58:	4b9a      	ldr	r3, [pc, #616]	; (80071c4 <_printf_float+0x2d8>)
 8006f5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f5e:	f7f9 fdc7 	bl	8000af0 <__aeabi_dcmple>
 8006f62:	bb48      	cbnz	r0, 8006fb8 <_printf_float+0xcc>
 8006f64:	2200      	movs	r2, #0
 8006f66:	2300      	movs	r3, #0
 8006f68:	4640      	mov	r0, r8
 8006f6a:	4649      	mov	r1, r9
 8006f6c:	f7f9 fdb6 	bl	8000adc <__aeabi_dcmplt>
 8006f70:	b110      	cbz	r0, 8006f78 <_printf_float+0x8c>
 8006f72:	232d      	movs	r3, #45	; 0x2d
 8006f74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f78:	4a93      	ldr	r2, [pc, #588]	; (80071c8 <_printf_float+0x2dc>)
 8006f7a:	4b94      	ldr	r3, [pc, #592]	; (80071cc <_printf_float+0x2e0>)
 8006f7c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006f80:	bf94      	ite	ls
 8006f82:	4690      	movls	r8, r2
 8006f84:	4698      	movhi	r8, r3
 8006f86:	2303      	movs	r3, #3
 8006f88:	6123      	str	r3, [r4, #16]
 8006f8a:	9b05      	ldr	r3, [sp, #20]
 8006f8c:	f023 0304 	bic.w	r3, r3, #4
 8006f90:	6023      	str	r3, [r4, #0]
 8006f92:	f04f 0900 	mov.w	r9, #0
 8006f96:	9700      	str	r7, [sp, #0]
 8006f98:	4633      	mov	r3, r6
 8006f9a:	aa0b      	add	r2, sp, #44	; 0x2c
 8006f9c:	4621      	mov	r1, r4
 8006f9e:	4628      	mov	r0, r5
 8006fa0:	f000 f9da 	bl	8007358 <_printf_common>
 8006fa4:	3001      	adds	r0, #1
 8006fa6:	f040 8090 	bne.w	80070ca <_printf_float+0x1de>
 8006faa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fae:	b00d      	add	sp, #52	; 0x34
 8006fb0:	ecbd 8b02 	vpop	{d8}
 8006fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fb8:	4642      	mov	r2, r8
 8006fba:	464b      	mov	r3, r9
 8006fbc:	4640      	mov	r0, r8
 8006fbe:	4649      	mov	r1, r9
 8006fc0:	f7f9 fdb4 	bl	8000b2c <__aeabi_dcmpun>
 8006fc4:	b140      	cbz	r0, 8006fd8 <_printf_float+0xec>
 8006fc6:	464b      	mov	r3, r9
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	bfbc      	itt	lt
 8006fcc:	232d      	movlt	r3, #45	; 0x2d
 8006fce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006fd2:	4a7f      	ldr	r2, [pc, #508]	; (80071d0 <_printf_float+0x2e4>)
 8006fd4:	4b7f      	ldr	r3, [pc, #508]	; (80071d4 <_printf_float+0x2e8>)
 8006fd6:	e7d1      	b.n	8006f7c <_printf_float+0x90>
 8006fd8:	6863      	ldr	r3, [r4, #4]
 8006fda:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006fde:	9206      	str	r2, [sp, #24]
 8006fe0:	1c5a      	adds	r2, r3, #1
 8006fe2:	d13f      	bne.n	8007064 <_printf_float+0x178>
 8006fe4:	2306      	movs	r3, #6
 8006fe6:	6063      	str	r3, [r4, #4]
 8006fe8:	9b05      	ldr	r3, [sp, #20]
 8006fea:	6861      	ldr	r1, [r4, #4]
 8006fec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	9303      	str	r3, [sp, #12]
 8006ff4:	ab0a      	add	r3, sp, #40	; 0x28
 8006ff6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006ffa:	ab09      	add	r3, sp, #36	; 0x24
 8006ffc:	ec49 8b10 	vmov	d0, r8, r9
 8007000:	9300      	str	r3, [sp, #0]
 8007002:	6022      	str	r2, [r4, #0]
 8007004:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007008:	4628      	mov	r0, r5
 800700a:	f7ff fece 	bl	8006daa <__cvt>
 800700e:	9b06      	ldr	r3, [sp, #24]
 8007010:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007012:	2b47      	cmp	r3, #71	; 0x47
 8007014:	4680      	mov	r8, r0
 8007016:	d108      	bne.n	800702a <_printf_float+0x13e>
 8007018:	1cc8      	adds	r0, r1, #3
 800701a:	db02      	blt.n	8007022 <_printf_float+0x136>
 800701c:	6863      	ldr	r3, [r4, #4]
 800701e:	4299      	cmp	r1, r3
 8007020:	dd41      	ble.n	80070a6 <_printf_float+0x1ba>
 8007022:	f1ab 0302 	sub.w	r3, fp, #2
 8007026:	fa5f fb83 	uxtb.w	fp, r3
 800702a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800702e:	d820      	bhi.n	8007072 <_printf_float+0x186>
 8007030:	3901      	subs	r1, #1
 8007032:	465a      	mov	r2, fp
 8007034:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007038:	9109      	str	r1, [sp, #36]	; 0x24
 800703a:	f7ff ff18 	bl	8006e6e <__exponent>
 800703e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007040:	1813      	adds	r3, r2, r0
 8007042:	2a01      	cmp	r2, #1
 8007044:	4681      	mov	r9, r0
 8007046:	6123      	str	r3, [r4, #16]
 8007048:	dc02      	bgt.n	8007050 <_printf_float+0x164>
 800704a:	6822      	ldr	r2, [r4, #0]
 800704c:	07d2      	lsls	r2, r2, #31
 800704e:	d501      	bpl.n	8007054 <_printf_float+0x168>
 8007050:	3301      	adds	r3, #1
 8007052:	6123      	str	r3, [r4, #16]
 8007054:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007058:	2b00      	cmp	r3, #0
 800705a:	d09c      	beq.n	8006f96 <_printf_float+0xaa>
 800705c:	232d      	movs	r3, #45	; 0x2d
 800705e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007062:	e798      	b.n	8006f96 <_printf_float+0xaa>
 8007064:	9a06      	ldr	r2, [sp, #24]
 8007066:	2a47      	cmp	r2, #71	; 0x47
 8007068:	d1be      	bne.n	8006fe8 <_printf_float+0xfc>
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1bc      	bne.n	8006fe8 <_printf_float+0xfc>
 800706e:	2301      	movs	r3, #1
 8007070:	e7b9      	b.n	8006fe6 <_printf_float+0xfa>
 8007072:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007076:	d118      	bne.n	80070aa <_printf_float+0x1be>
 8007078:	2900      	cmp	r1, #0
 800707a:	6863      	ldr	r3, [r4, #4]
 800707c:	dd0b      	ble.n	8007096 <_printf_float+0x1aa>
 800707e:	6121      	str	r1, [r4, #16]
 8007080:	b913      	cbnz	r3, 8007088 <_printf_float+0x19c>
 8007082:	6822      	ldr	r2, [r4, #0]
 8007084:	07d0      	lsls	r0, r2, #31
 8007086:	d502      	bpl.n	800708e <_printf_float+0x1a2>
 8007088:	3301      	adds	r3, #1
 800708a:	440b      	add	r3, r1
 800708c:	6123      	str	r3, [r4, #16]
 800708e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007090:	f04f 0900 	mov.w	r9, #0
 8007094:	e7de      	b.n	8007054 <_printf_float+0x168>
 8007096:	b913      	cbnz	r3, 800709e <_printf_float+0x1b2>
 8007098:	6822      	ldr	r2, [r4, #0]
 800709a:	07d2      	lsls	r2, r2, #31
 800709c:	d501      	bpl.n	80070a2 <_printf_float+0x1b6>
 800709e:	3302      	adds	r3, #2
 80070a0:	e7f4      	b.n	800708c <_printf_float+0x1a0>
 80070a2:	2301      	movs	r3, #1
 80070a4:	e7f2      	b.n	800708c <_printf_float+0x1a0>
 80070a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80070aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070ac:	4299      	cmp	r1, r3
 80070ae:	db05      	blt.n	80070bc <_printf_float+0x1d0>
 80070b0:	6823      	ldr	r3, [r4, #0]
 80070b2:	6121      	str	r1, [r4, #16]
 80070b4:	07d8      	lsls	r0, r3, #31
 80070b6:	d5ea      	bpl.n	800708e <_printf_float+0x1a2>
 80070b8:	1c4b      	adds	r3, r1, #1
 80070ba:	e7e7      	b.n	800708c <_printf_float+0x1a0>
 80070bc:	2900      	cmp	r1, #0
 80070be:	bfd4      	ite	le
 80070c0:	f1c1 0202 	rsble	r2, r1, #2
 80070c4:	2201      	movgt	r2, #1
 80070c6:	4413      	add	r3, r2
 80070c8:	e7e0      	b.n	800708c <_printf_float+0x1a0>
 80070ca:	6823      	ldr	r3, [r4, #0]
 80070cc:	055a      	lsls	r2, r3, #21
 80070ce:	d407      	bmi.n	80070e0 <_printf_float+0x1f4>
 80070d0:	6923      	ldr	r3, [r4, #16]
 80070d2:	4642      	mov	r2, r8
 80070d4:	4631      	mov	r1, r6
 80070d6:	4628      	mov	r0, r5
 80070d8:	47b8      	blx	r7
 80070da:	3001      	adds	r0, #1
 80070dc:	d12c      	bne.n	8007138 <_printf_float+0x24c>
 80070de:	e764      	b.n	8006faa <_printf_float+0xbe>
 80070e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80070e4:	f240 80e0 	bls.w	80072a8 <_printf_float+0x3bc>
 80070e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80070ec:	2200      	movs	r2, #0
 80070ee:	2300      	movs	r3, #0
 80070f0:	f7f9 fcea 	bl	8000ac8 <__aeabi_dcmpeq>
 80070f4:	2800      	cmp	r0, #0
 80070f6:	d034      	beq.n	8007162 <_printf_float+0x276>
 80070f8:	4a37      	ldr	r2, [pc, #220]	; (80071d8 <_printf_float+0x2ec>)
 80070fa:	2301      	movs	r3, #1
 80070fc:	4631      	mov	r1, r6
 80070fe:	4628      	mov	r0, r5
 8007100:	47b8      	blx	r7
 8007102:	3001      	adds	r0, #1
 8007104:	f43f af51 	beq.w	8006faa <_printf_float+0xbe>
 8007108:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800710c:	429a      	cmp	r2, r3
 800710e:	db02      	blt.n	8007116 <_printf_float+0x22a>
 8007110:	6823      	ldr	r3, [r4, #0]
 8007112:	07d8      	lsls	r0, r3, #31
 8007114:	d510      	bpl.n	8007138 <_printf_float+0x24c>
 8007116:	ee18 3a10 	vmov	r3, s16
 800711a:	4652      	mov	r2, sl
 800711c:	4631      	mov	r1, r6
 800711e:	4628      	mov	r0, r5
 8007120:	47b8      	blx	r7
 8007122:	3001      	adds	r0, #1
 8007124:	f43f af41 	beq.w	8006faa <_printf_float+0xbe>
 8007128:	f04f 0800 	mov.w	r8, #0
 800712c:	f104 091a 	add.w	r9, r4, #26
 8007130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007132:	3b01      	subs	r3, #1
 8007134:	4543      	cmp	r3, r8
 8007136:	dc09      	bgt.n	800714c <_printf_float+0x260>
 8007138:	6823      	ldr	r3, [r4, #0]
 800713a:	079b      	lsls	r3, r3, #30
 800713c:	f100 8107 	bmi.w	800734e <_printf_float+0x462>
 8007140:	68e0      	ldr	r0, [r4, #12]
 8007142:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007144:	4298      	cmp	r0, r3
 8007146:	bfb8      	it	lt
 8007148:	4618      	movlt	r0, r3
 800714a:	e730      	b.n	8006fae <_printf_float+0xc2>
 800714c:	2301      	movs	r3, #1
 800714e:	464a      	mov	r2, r9
 8007150:	4631      	mov	r1, r6
 8007152:	4628      	mov	r0, r5
 8007154:	47b8      	blx	r7
 8007156:	3001      	adds	r0, #1
 8007158:	f43f af27 	beq.w	8006faa <_printf_float+0xbe>
 800715c:	f108 0801 	add.w	r8, r8, #1
 8007160:	e7e6      	b.n	8007130 <_printf_float+0x244>
 8007162:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007164:	2b00      	cmp	r3, #0
 8007166:	dc39      	bgt.n	80071dc <_printf_float+0x2f0>
 8007168:	4a1b      	ldr	r2, [pc, #108]	; (80071d8 <_printf_float+0x2ec>)
 800716a:	2301      	movs	r3, #1
 800716c:	4631      	mov	r1, r6
 800716e:	4628      	mov	r0, r5
 8007170:	47b8      	blx	r7
 8007172:	3001      	adds	r0, #1
 8007174:	f43f af19 	beq.w	8006faa <_printf_float+0xbe>
 8007178:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800717c:	4313      	orrs	r3, r2
 800717e:	d102      	bne.n	8007186 <_printf_float+0x29a>
 8007180:	6823      	ldr	r3, [r4, #0]
 8007182:	07d9      	lsls	r1, r3, #31
 8007184:	d5d8      	bpl.n	8007138 <_printf_float+0x24c>
 8007186:	ee18 3a10 	vmov	r3, s16
 800718a:	4652      	mov	r2, sl
 800718c:	4631      	mov	r1, r6
 800718e:	4628      	mov	r0, r5
 8007190:	47b8      	blx	r7
 8007192:	3001      	adds	r0, #1
 8007194:	f43f af09 	beq.w	8006faa <_printf_float+0xbe>
 8007198:	f04f 0900 	mov.w	r9, #0
 800719c:	f104 0a1a 	add.w	sl, r4, #26
 80071a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071a2:	425b      	negs	r3, r3
 80071a4:	454b      	cmp	r3, r9
 80071a6:	dc01      	bgt.n	80071ac <_printf_float+0x2c0>
 80071a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071aa:	e792      	b.n	80070d2 <_printf_float+0x1e6>
 80071ac:	2301      	movs	r3, #1
 80071ae:	4652      	mov	r2, sl
 80071b0:	4631      	mov	r1, r6
 80071b2:	4628      	mov	r0, r5
 80071b4:	47b8      	blx	r7
 80071b6:	3001      	adds	r0, #1
 80071b8:	f43f aef7 	beq.w	8006faa <_printf_float+0xbe>
 80071bc:	f109 0901 	add.w	r9, r9, #1
 80071c0:	e7ee      	b.n	80071a0 <_printf_float+0x2b4>
 80071c2:	bf00      	nop
 80071c4:	7fefffff 	.word	0x7fefffff
 80071c8:	08009c04 	.word	0x08009c04
 80071cc:	08009c08 	.word	0x08009c08
 80071d0:	08009c0c 	.word	0x08009c0c
 80071d4:	08009c10 	.word	0x08009c10
 80071d8:	08009c14 	.word	0x08009c14
 80071dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80071e0:	429a      	cmp	r2, r3
 80071e2:	bfa8      	it	ge
 80071e4:	461a      	movge	r2, r3
 80071e6:	2a00      	cmp	r2, #0
 80071e8:	4691      	mov	r9, r2
 80071ea:	dc37      	bgt.n	800725c <_printf_float+0x370>
 80071ec:	f04f 0b00 	mov.w	fp, #0
 80071f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071f4:	f104 021a 	add.w	r2, r4, #26
 80071f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80071fa:	9305      	str	r3, [sp, #20]
 80071fc:	eba3 0309 	sub.w	r3, r3, r9
 8007200:	455b      	cmp	r3, fp
 8007202:	dc33      	bgt.n	800726c <_printf_float+0x380>
 8007204:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007208:	429a      	cmp	r2, r3
 800720a:	db3b      	blt.n	8007284 <_printf_float+0x398>
 800720c:	6823      	ldr	r3, [r4, #0]
 800720e:	07da      	lsls	r2, r3, #31
 8007210:	d438      	bmi.n	8007284 <_printf_float+0x398>
 8007212:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007216:	eba2 0903 	sub.w	r9, r2, r3
 800721a:	9b05      	ldr	r3, [sp, #20]
 800721c:	1ad2      	subs	r2, r2, r3
 800721e:	4591      	cmp	r9, r2
 8007220:	bfa8      	it	ge
 8007222:	4691      	movge	r9, r2
 8007224:	f1b9 0f00 	cmp.w	r9, #0
 8007228:	dc35      	bgt.n	8007296 <_printf_float+0x3aa>
 800722a:	f04f 0800 	mov.w	r8, #0
 800722e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007232:	f104 0a1a 	add.w	sl, r4, #26
 8007236:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800723a:	1a9b      	subs	r3, r3, r2
 800723c:	eba3 0309 	sub.w	r3, r3, r9
 8007240:	4543      	cmp	r3, r8
 8007242:	f77f af79 	ble.w	8007138 <_printf_float+0x24c>
 8007246:	2301      	movs	r3, #1
 8007248:	4652      	mov	r2, sl
 800724a:	4631      	mov	r1, r6
 800724c:	4628      	mov	r0, r5
 800724e:	47b8      	blx	r7
 8007250:	3001      	adds	r0, #1
 8007252:	f43f aeaa 	beq.w	8006faa <_printf_float+0xbe>
 8007256:	f108 0801 	add.w	r8, r8, #1
 800725a:	e7ec      	b.n	8007236 <_printf_float+0x34a>
 800725c:	4613      	mov	r3, r2
 800725e:	4631      	mov	r1, r6
 8007260:	4642      	mov	r2, r8
 8007262:	4628      	mov	r0, r5
 8007264:	47b8      	blx	r7
 8007266:	3001      	adds	r0, #1
 8007268:	d1c0      	bne.n	80071ec <_printf_float+0x300>
 800726a:	e69e      	b.n	8006faa <_printf_float+0xbe>
 800726c:	2301      	movs	r3, #1
 800726e:	4631      	mov	r1, r6
 8007270:	4628      	mov	r0, r5
 8007272:	9205      	str	r2, [sp, #20]
 8007274:	47b8      	blx	r7
 8007276:	3001      	adds	r0, #1
 8007278:	f43f ae97 	beq.w	8006faa <_printf_float+0xbe>
 800727c:	9a05      	ldr	r2, [sp, #20]
 800727e:	f10b 0b01 	add.w	fp, fp, #1
 8007282:	e7b9      	b.n	80071f8 <_printf_float+0x30c>
 8007284:	ee18 3a10 	vmov	r3, s16
 8007288:	4652      	mov	r2, sl
 800728a:	4631      	mov	r1, r6
 800728c:	4628      	mov	r0, r5
 800728e:	47b8      	blx	r7
 8007290:	3001      	adds	r0, #1
 8007292:	d1be      	bne.n	8007212 <_printf_float+0x326>
 8007294:	e689      	b.n	8006faa <_printf_float+0xbe>
 8007296:	9a05      	ldr	r2, [sp, #20]
 8007298:	464b      	mov	r3, r9
 800729a:	4442      	add	r2, r8
 800729c:	4631      	mov	r1, r6
 800729e:	4628      	mov	r0, r5
 80072a0:	47b8      	blx	r7
 80072a2:	3001      	adds	r0, #1
 80072a4:	d1c1      	bne.n	800722a <_printf_float+0x33e>
 80072a6:	e680      	b.n	8006faa <_printf_float+0xbe>
 80072a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072aa:	2a01      	cmp	r2, #1
 80072ac:	dc01      	bgt.n	80072b2 <_printf_float+0x3c6>
 80072ae:	07db      	lsls	r3, r3, #31
 80072b0:	d53a      	bpl.n	8007328 <_printf_float+0x43c>
 80072b2:	2301      	movs	r3, #1
 80072b4:	4642      	mov	r2, r8
 80072b6:	4631      	mov	r1, r6
 80072b8:	4628      	mov	r0, r5
 80072ba:	47b8      	blx	r7
 80072bc:	3001      	adds	r0, #1
 80072be:	f43f ae74 	beq.w	8006faa <_printf_float+0xbe>
 80072c2:	ee18 3a10 	vmov	r3, s16
 80072c6:	4652      	mov	r2, sl
 80072c8:	4631      	mov	r1, r6
 80072ca:	4628      	mov	r0, r5
 80072cc:	47b8      	blx	r7
 80072ce:	3001      	adds	r0, #1
 80072d0:	f43f ae6b 	beq.w	8006faa <_printf_float+0xbe>
 80072d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80072d8:	2200      	movs	r2, #0
 80072da:	2300      	movs	r3, #0
 80072dc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80072e0:	f7f9 fbf2 	bl	8000ac8 <__aeabi_dcmpeq>
 80072e4:	b9d8      	cbnz	r0, 800731e <_printf_float+0x432>
 80072e6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80072ea:	f108 0201 	add.w	r2, r8, #1
 80072ee:	4631      	mov	r1, r6
 80072f0:	4628      	mov	r0, r5
 80072f2:	47b8      	blx	r7
 80072f4:	3001      	adds	r0, #1
 80072f6:	d10e      	bne.n	8007316 <_printf_float+0x42a>
 80072f8:	e657      	b.n	8006faa <_printf_float+0xbe>
 80072fa:	2301      	movs	r3, #1
 80072fc:	4652      	mov	r2, sl
 80072fe:	4631      	mov	r1, r6
 8007300:	4628      	mov	r0, r5
 8007302:	47b8      	blx	r7
 8007304:	3001      	adds	r0, #1
 8007306:	f43f ae50 	beq.w	8006faa <_printf_float+0xbe>
 800730a:	f108 0801 	add.w	r8, r8, #1
 800730e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007310:	3b01      	subs	r3, #1
 8007312:	4543      	cmp	r3, r8
 8007314:	dcf1      	bgt.n	80072fa <_printf_float+0x40e>
 8007316:	464b      	mov	r3, r9
 8007318:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800731c:	e6da      	b.n	80070d4 <_printf_float+0x1e8>
 800731e:	f04f 0800 	mov.w	r8, #0
 8007322:	f104 0a1a 	add.w	sl, r4, #26
 8007326:	e7f2      	b.n	800730e <_printf_float+0x422>
 8007328:	2301      	movs	r3, #1
 800732a:	4642      	mov	r2, r8
 800732c:	e7df      	b.n	80072ee <_printf_float+0x402>
 800732e:	2301      	movs	r3, #1
 8007330:	464a      	mov	r2, r9
 8007332:	4631      	mov	r1, r6
 8007334:	4628      	mov	r0, r5
 8007336:	47b8      	blx	r7
 8007338:	3001      	adds	r0, #1
 800733a:	f43f ae36 	beq.w	8006faa <_printf_float+0xbe>
 800733e:	f108 0801 	add.w	r8, r8, #1
 8007342:	68e3      	ldr	r3, [r4, #12]
 8007344:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007346:	1a5b      	subs	r3, r3, r1
 8007348:	4543      	cmp	r3, r8
 800734a:	dcf0      	bgt.n	800732e <_printf_float+0x442>
 800734c:	e6f8      	b.n	8007140 <_printf_float+0x254>
 800734e:	f04f 0800 	mov.w	r8, #0
 8007352:	f104 0919 	add.w	r9, r4, #25
 8007356:	e7f4      	b.n	8007342 <_printf_float+0x456>

08007358 <_printf_common>:
 8007358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800735c:	4616      	mov	r6, r2
 800735e:	4699      	mov	r9, r3
 8007360:	688a      	ldr	r2, [r1, #8]
 8007362:	690b      	ldr	r3, [r1, #16]
 8007364:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007368:	4293      	cmp	r3, r2
 800736a:	bfb8      	it	lt
 800736c:	4613      	movlt	r3, r2
 800736e:	6033      	str	r3, [r6, #0]
 8007370:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007374:	4607      	mov	r7, r0
 8007376:	460c      	mov	r4, r1
 8007378:	b10a      	cbz	r2, 800737e <_printf_common+0x26>
 800737a:	3301      	adds	r3, #1
 800737c:	6033      	str	r3, [r6, #0]
 800737e:	6823      	ldr	r3, [r4, #0]
 8007380:	0699      	lsls	r1, r3, #26
 8007382:	bf42      	ittt	mi
 8007384:	6833      	ldrmi	r3, [r6, #0]
 8007386:	3302      	addmi	r3, #2
 8007388:	6033      	strmi	r3, [r6, #0]
 800738a:	6825      	ldr	r5, [r4, #0]
 800738c:	f015 0506 	ands.w	r5, r5, #6
 8007390:	d106      	bne.n	80073a0 <_printf_common+0x48>
 8007392:	f104 0a19 	add.w	sl, r4, #25
 8007396:	68e3      	ldr	r3, [r4, #12]
 8007398:	6832      	ldr	r2, [r6, #0]
 800739a:	1a9b      	subs	r3, r3, r2
 800739c:	42ab      	cmp	r3, r5
 800739e:	dc26      	bgt.n	80073ee <_printf_common+0x96>
 80073a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80073a4:	1e13      	subs	r3, r2, #0
 80073a6:	6822      	ldr	r2, [r4, #0]
 80073a8:	bf18      	it	ne
 80073aa:	2301      	movne	r3, #1
 80073ac:	0692      	lsls	r2, r2, #26
 80073ae:	d42b      	bmi.n	8007408 <_printf_common+0xb0>
 80073b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073b4:	4649      	mov	r1, r9
 80073b6:	4638      	mov	r0, r7
 80073b8:	47c0      	blx	r8
 80073ba:	3001      	adds	r0, #1
 80073bc:	d01e      	beq.n	80073fc <_printf_common+0xa4>
 80073be:	6823      	ldr	r3, [r4, #0]
 80073c0:	6922      	ldr	r2, [r4, #16]
 80073c2:	f003 0306 	and.w	r3, r3, #6
 80073c6:	2b04      	cmp	r3, #4
 80073c8:	bf02      	ittt	eq
 80073ca:	68e5      	ldreq	r5, [r4, #12]
 80073cc:	6833      	ldreq	r3, [r6, #0]
 80073ce:	1aed      	subeq	r5, r5, r3
 80073d0:	68a3      	ldr	r3, [r4, #8]
 80073d2:	bf0c      	ite	eq
 80073d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073d8:	2500      	movne	r5, #0
 80073da:	4293      	cmp	r3, r2
 80073dc:	bfc4      	itt	gt
 80073de:	1a9b      	subgt	r3, r3, r2
 80073e0:	18ed      	addgt	r5, r5, r3
 80073e2:	2600      	movs	r6, #0
 80073e4:	341a      	adds	r4, #26
 80073e6:	42b5      	cmp	r5, r6
 80073e8:	d11a      	bne.n	8007420 <_printf_common+0xc8>
 80073ea:	2000      	movs	r0, #0
 80073ec:	e008      	b.n	8007400 <_printf_common+0xa8>
 80073ee:	2301      	movs	r3, #1
 80073f0:	4652      	mov	r2, sl
 80073f2:	4649      	mov	r1, r9
 80073f4:	4638      	mov	r0, r7
 80073f6:	47c0      	blx	r8
 80073f8:	3001      	adds	r0, #1
 80073fa:	d103      	bne.n	8007404 <_printf_common+0xac>
 80073fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007404:	3501      	adds	r5, #1
 8007406:	e7c6      	b.n	8007396 <_printf_common+0x3e>
 8007408:	18e1      	adds	r1, r4, r3
 800740a:	1c5a      	adds	r2, r3, #1
 800740c:	2030      	movs	r0, #48	; 0x30
 800740e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007412:	4422      	add	r2, r4
 8007414:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007418:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800741c:	3302      	adds	r3, #2
 800741e:	e7c7      	b.n	80073b0 <_printf_common+0x58>
 8007420:	2301      	movs	r3, #1
 8007422:	4622      	mov	r2, r4
 8007424:	4649      	mov	r1, r9
 8007426:	4638      	mov	r0, r7
 8007428:	47c0      	blx	r8
 800742a:	3001      	adds	r0, #1
 800742c:	d0e6      	beq.n	80073fc <_printf_common+0xa4>
 800742e:	3601      	adds	r6, #1
 8007430:	e7d9      	b.n	80073e6 <_printf_common+0x8e>
	...

08007434 <_printf_i>:
 8007434:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007438:	7e0f      	ldrb	r7, [r1, #24]
 800743a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800743c:	2f78      	cmp	r7, #120	; 0x78
 800743e:	4691      	mov	r9, r2
 8007440:	4680      	mov	r8, r0
 8007442:	460c      	mov	r4, r1
 8007444:	469a      	mov	sl, r3
 8007446:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800744a:	d807      	bhi.n	800745c <_printf_i+0x28>
 800744c:	2f62      	cmp	r7, #98	; 0x62
 800744e:	d80a      	bhi.n	8007466 <_printf_i+0x32>
 8007450:	2f00      	cmp	r7, #0
 8007452:	f000 80d4 	beq.w	80075fe <_printf_i+0x1ca>
 8007456:	2f58      	cmp	r7, #88	; 0x58
 8007458:	f000 80c0 	beq.w	80075dc <_printf_i+0x1a8>
 800745c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007460:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007464:	e03a      	b.n	80074dc <_printf_i+0xa8>
 8007466:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800746a:	2b15      	cmp	r3, #21
 800746c:	d8f6      	bhi.n	800745c <_printf_i+0x28>
 800746e:	a101      	add	r1, pc, #4	; (adr r1, 8007474 <_printf_i+0x40>)
 8007470:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007474:	080074cd 	.word	0x080074cd
 8007478:	080074e1 	.word	0x080074e1
 800747c:	0800745d 	.word	0x0800745d
 8007480:	0800745d 	.word	0x0800745d
 8007484:	0800745d 	.word	0x0800745d
 8007488:	0800745d 	.word	0x0800745d
 800748c:	080074e1 	.word	0x080074e1
 8007490:	0800745d 	.word	0x0800745d
 8007494:	0800745d 	.word	0x0800745d
 8007498:	0800745d 	.word	0x0800745d
 800749c:	0800745d 	.word	0x0800745d
 80074a0:	080075e5 	.word	0x080075e5
 80074a4:	0800750d 	.word	0x0800750d
 80074a8:	0800759f 	.word	0x0800759f
 80074ac:	0800745d 	.word	0x0800745d
 80074b0:	0800745d 	.word	0x0800745d
 80074b4:	08007607 	.word	0x08007607
 80074b8:	0800745d 	.word	0x0800745d
 80074bc:	0800750d 	.word	0x0800750d
 80074c0:	0800745d 	.word	0x0800745d
 80074c4:	0800745d 	.word	0x0800745d
 80074c8:	080075a7 	.word	0x080075a7
 80074cc:	682b      	ldr	r3, [r5, #0]
 80074ce:	1d1a      	adds	r2, r3, #4
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	602a      	str	r2, [r5, #0]
 80074d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074dc:	2301      	movs	r3, #1
 80074de:	e09f      	b.n	8007620 <_printf_i+0x1ec>
 80074e0:	6820      	ldr	r0, [r4, #0]
 80074e2:	682b      	ldr	r3, [r5, #0]
 80074e4:	0607      	lsls	r7, r0, #24
 80074e6:	f103 0104 	add.w	r1, r3, #4
 80074ea:	6029      	str	r1, [r5, #0]
 80074ec:	d501      	bpl.n	80074f2 <_printf_i+0xbe>
 80074ee:	681e      	ldr	r6, [r3, #0]
 80074f0:	e003      	b.n	80074fa <_printf_i+0xc6>
 80074f2:	0646      	lsls	r6, r0, #25
 80074f4:	d5fb      	bpl.n	80074ee <_printf_i+0xba>
 80074f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80074fa:	2e00      	cmp	r6, #0
 80074fc:	da03      	bge.n	8007506 <_printf_i+0xd2>
 80074fe:	232d      	movs	r3, #45	; 0x2d
 8007500:	4276      	negs	r6, r6
 8007502:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007506:	485a      	ldr	r0, [pc, #360]	; (8007670 <_printf_i+0x23c>)
 8007508:	230a      	movs	r3, #10
 800750a:	e012      	b.n	8007532 <_printf_i+0xfe>
 800750c:	682b      	ldr	r3, [r5, #0]
 800750e:	6820      	ldr	r0, [r4, #0]
 8007510:	1d19      	adds	r1, r3, #4
 8007512:	6029      	str	r1, [r5, #0]
 8007514:	0605      	lsls	r5, r0, #24
 8007516:	d501      	bpl.n	800751c <_printf_i+0xe8>
 8007518:	681e      	ldr	r6, [r3, #0]
 800751a:	e002      	b.n	8007522 <_printf_i+0xee>
 800751c:	0641      	lsls	r1, r0, #25
 800751e:	d5fb      	bpl.n	8007518 <_printf_i+0xe4>
 8007520:	881e      	ldrh	r6, [r3, #0]
 8007522:	4853      	ldr	r0, [pc, #332]	; (8007670 <_printf_i+0x23c>)
 8007524:	2f6f      	cmp	r7, #111	; 0x6f
 8007526:	bf0c      	ite	eq
 8007528:	2308      	moveq	r3, #8
 800752a:	230a      	movne	r3, #10
 800752c:	2100      	movs	r1, #0
 800752e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007532:	6865      	ldr	r5, [r4, #4]
 8007534:	60a5      	str	r5, [r4, #8]
 8007536:	2d00      	cmp	r5, #0
 8007538:	bfa2      	ittt	ge
 800753a:	6821      	ldrge	r1, [r4, #0]
 800753c:	f021 0104 	bicge.w	r1, r1, #4
 8007540:	6021      	strge	r1, [r4, #0]
 8007542:	b90e      	cbnz	r6, 8007548 <_printf_i+0x114>
 8007544:	2d00      	cmp	r5, #0
 8007546:	d04b      	beq.n	80075e0 <_printf_i+0x1ac>
 8007548:	4615      	mov	r5, r2
 800754a:	fbb6 f1f3 	udiv	r1, r6, r3
 800754e:	fb03 6711 	mls	r7, r3, r1, r6
 8007552:	5dc7      	ldrb	r7, [r0, r7]
 8007554:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007558:	4637      	mov	r7, r6
 800755a:	42bb      	cmp	r3, r7
 800755c:	460e      	mov	r6, r1
 800755e:	d9f4      	bls.n	800754a <_printf_i+0x116>
 8007560:	2b08      	cmp	r3, #8
 8007562:	d10b      	bne.n	800757c <_printf_i+0x148>
 8007564:	6823      	ldr	r3, [r4, #0]
 8007566:	07de      	lsls	r6, r3, #31
 8007568:	d508      	bpl.n	800757c <_printf_i+0x148>
 800756a:	6923      	ldr	r3, [r4, #16]
 800756c:	6861      	ldr	r1, [r4, #4]
 800756e:	4299      	cmp	r1, r3
 8007570:	bfde      	ittt	le
 8007572:	2330      	movle	r3, #48	; 0x30
 8007574:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007578:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800757c:	1b52      	subs	r2, r2, r5
 800757e:	6122      	str	r2, [r4, #16]
 8007580:	f8cd a000 	str.w	sl, [sp]
 8007584:	464b      	mov	r3, r9
 8007586:	aa03      	add	r2, sp, #12
 8007588:	4621      	mov	r1, r4
 800758a:	4640      	mov	r0, r8
 800758c:	f7ff fee4 	bl	8007358 <_printf_common>
 8007590:	3001      	adds	r0, #1
 8007592:	d14a      	bne.n	800762a <_printf_i+0x1f6>
 8007594:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007598:	b004      	add	sp, #16
 800759a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800759e:	6823      	ldr	r3, [r4, #0]
 80075a0:	f043 0320 	orr.w	r3, r3, #32
 80075a4:	6023      	str	r3, [r4, #0]
 80075a6:	4833      	ldr	r0, [pc, #204]	; (8007674 <_printf_i+0x240>)
 80075a8:	2778      	movs	r7, #120	; 0x78
 80075aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80075ae:	6823      	ldr	r3, [r4, #0]
 80075b0:	6829      	ldr	r1, [r5, #0]
 80075b2:	061f      	lsls	r7, r3, #24
 80075b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80075b8:	d402      	bmi.n	80075c0 <_printf_i+0x18c>
 80075ba:	065f      	lsls	r7, r3, #25
 80075bc:	bf48      	it	mi
 80075be:	b2b6      	uxthmi	r6, r6
 80075c0:	07df      	lsls	r7, r3, #31
 80075c2:	bf48      	it	mi
 80075c4:	f043 0320 	orrmi.w	r3, r3, #32
 80075c8:	6029      	str	r1, [r5, #0]
 80075ca:	bf48      	it	mi
 80075cc:	6023      	strmi	r3, [r4, #0]
 80075ce:	b91e      	cbnz	r6, 80075d8 <_printf_i+0x1a4>
 80075d0:	6823      	ldr	r3, [r4, #0]
 80075d2:	f023 0320 	bic.w	r3, r3, #32
 80075d6:	6023      	str	r3, [r4, #0]
 80075d8:	2310      	movs	r3, #16
 80075da:	e7a7      	b.n	800752c <_printf_i+0xf8>
 80075dc:	4824      	ldr	r0, [pc, #144]	; (8007670 <_printf_i+0x23c>)
 80075de:	e7e4      	b.n	80075aa <_printf_i+0x176>
 80075e0:	4615      	mov	r5, r2
 80075e2:	e7bd      	b.n	8007560 <_printf_i+0x12c>
 80075e4:	682b      	ldr	r3, [r5, #0]
 80075e6:	6826      	ldr	r6, [r4, #0]
 80075e8:	6961      	ldr	r1, [r4, #20]
 80075ea:	1d18      	adds	r0, r3, #4
 80075ec:	6028      	str	r0, [r5, #0]
 80075ee:	0635      	lsls	r5, r6, #24
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	d501      	bpl.n	80075f8 <_printf_i+0x1c4>
 80075f4:	6019      	str	r1, [r3, #0]
 80075f6:	e002      	b.n	80075fe <_printf_i+0x1ca>
 80075f8:	0670      	lsls	r0, r6, #25
 80075fa:	d5fb      	bpl.n	80075f4 <_printf_i+0x1c0>
 80075fc:	8019      	strh	r1, [r3, #0]
 80075fe:	2300      	movs	r3, #0
 8007600:	6123      	str	r3, [r4, #16]
 8007602:	4615      	mov	r5, r2
 8007604:	e7bc      	b.n	8007580 <_printf_i+0x14c>
 8007606:	682b      	ldr	r3, [r5, #0]
 8007608:	1d1a      	adds	r2, r3, #4
 800760a:	602a      	str	r2, [r5, #0]
 800760c:	681d      	ldr	r5, [r3, #0]
 800760e:	6862      	ldr	r2, [r4, #4]
 8007610:	2100      	movs	r1, #0
 8007612:	4628      	mov	r0, r5
 8007614:	f7f8 fddc 	bl	80001d0 <memchr>
 8007618:	b108      	cbz	r0, 800761e <_printf_i+0x1ea>
 800761a:	1b40      	subs	r0, r0, r5
 800761c:	6060      	str	r0, [r4, #4]
 800761e:	6863      	ldr	r3, [r4, #4]
 8007620:	6123      	str	r3, [r4, #16]
 8007622:	2300      	movs	r3, #0
 8007624:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007628:	e7aa      	b.n	8007580 <_printf_i+0x14c>
 800762a:	6923      	ldr	r3, [r4, #16]
 800762c:	462a      	mov	r2, r5
 800762e:	4649      	mov	r1, r9
 8007630:	4640      	mov	r0, r8
 8007632:	47d0      	blx	sl
 8007634:	3001      	adds	r0, #1
 8007636:	d0ad      	beq.n	8007594 <_printf_i+0x160>
 8007638:	6823      	ldr	r3, [r4, #0]
 800763a:	079b      	lsls	r3, r3, #30
 800763c:	d413      	bmi.n	8007666 <_printf_i+0x232>
 800763e:	68e0      	ldr	r0, [r4, #12]
 8007640:	9b03      	ldr	r3, [sp, #12]
 8007642:	4298      	cmp	r0, r3
 8007644:	bfb8      	it	lt
 8007646:	4618      	movlt	r0, r3
 8007648:	e7a6      	b.n	8007598 <_printf_i+0x164>
 800764a:	2301      	movs	r3, #1
 800764c:	4632      	mov	r2, r6
 800764e:	4649      	mov	r1, r9
 8007650:	4640      	mov	r0, r8
 8007652:	47d0      	blx	sl
 8007654:	3001      	adds	r0, #1
 8007656:	d09d      	beq.n	8007594 <_printf_i+0x160>
 8007658:	3501      	adds	r5, #1
 800765a:	68e3      	ldr	r3, [r4, #12]
 800765c:	9903      	ldr	r1, [sp, #12]
 800765e:	1a5b      	subs	r3, r3, r1
 8007660:	42ab      	cmp	r3, r5
 8007662:	dcf2      	bgt.n	800764a <_printf_i+0x216>
 8007664:	e7eb      	b.n	800763e <_printf_i+0x20a>
 8007666:	2500      	movs	r5, #0
 8007668:	f104 0619 	add.w	r6, r4, #25
 800766c:	e7f5      	b.n	800765a <_printf_i+0x226>
 800766e:	bf00      	nop
 8007670:	08009c16 	.word	0x08009c16
 8007674:	08009c27 	.word	0x08009c27

08007678 <std>:
 8007678:	2300      	movs	r3, #0
 800767a:	b510      	push	{r4, lr}
 800767c:	4604      	mov	r4, r0
 800767e:	e9c0 3300 	strd	r3, r3, [r0]
 8007682:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007686:	6083      	str	r3, [r0, #8]
 8007688:	8181      	strh	r1, [r0, #12]
 800768a:	6643      	str	r3, [r0, #100]	; 0x64
 800768c:	81c2      	strh	r2, [r0, #14]
 800768e:	6183      	str	r3, [r0, #24]
 8007690:	4619      	mov	r1, r3
 8007692:	2208      	movs	r2, #8
 8007694:	305c      	adds	r0, #92	; 0x5c
 8007696:	f000 f91f 	bl	80078d8 <memset>
 800769a:	4b0d      	ldr	r3, [pc, #52]	; (80076d0 <std+0x58>)
 800769c:	6263      	str	r3, [r4, #36]	; 0x24
 800769e:	4b0d      	ldr	r3, [pc, #52]	; (80076d4 <std+0x5c>)
 80076a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80076a2:	4b0d      	ldr	r3, [pc, #52]	; (80076d8 <std+0x60>)
 80076a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80076a6:	4b0d      	ldr	r3, [pc, #52]	; (80076dc <std+0x64>)
 80076a8:	6323      	str	r3, [r4, #48]	; 0x30
 80076aa:	4b0d      	ldr	r3, [pc, #52]	; (80076e0 <std+0x68>)
 80076ac:	6224      	str	r4, [r4, #32]
 80076ae:	429c      	cmp	r4, r3
 80076b0:	d006      	beq.n	80076c0 <std+0x48>
 80076b2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80076b6:	4294      	cmp	r4, r2
 80076b8:	d002      	beq.n	80076c0 <std+0x48>
 80076ba:	33d0      	adds	r3, #208	; 0xd0
 80076bc:	429c      	cmp	r4, r3
 80076be:	d105      	bne.n	80076cc <std+0x54>
 80076c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80076c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076c8:	f000 b93c 	b.w	8007944 <__retarget_lock_init_recursive>
 80076cc:	bd10      	pop	{r4, pc}
 80076ce:	bf00      	nop
 80076d0:	08009289 	.word	0x08009289
 80076d4:	080092ab 	.word	0x080092ab
 80076d8:	080092e3 	.word	0x080092e3
 80076dc:	08009307 	.word	0x08009307
 80076e0:	20000510 	.word	0x20000510

080076e4 <stdio_exit_handler>:
 80076e4:	4a02      	ldr	r2, [pc, #8]	; (80076f0 <stdio_exit_handler+0xc>)
 80076e6:	4903      	ldr	r1, [pc, #12]	; (80076f4 <stdio_exit_handler+0x10>)
 80076e8:	4803      	ldr	r0, [pc, #12]	; (80076f8 <stdio_exit_handler+0x14>)
 80076ea:	f000 b869 	b.w	80077c0 <_fwalk_sglue>
 80076ee:	bf00      	nop
 80076f0:	20000010 	.word	0x20000010
 80076f4:	08008b29 	.word	0x08008b29
 80076f8:	2000001c 	.word	0x2000001c

080076fc <cleanup_stdio>:
 80076fc:	6841      	ldr	r1, [r0, #4]
 80076fe:	4b0c      	ldr	r3, [pc, #48]	; (8007730 <cleanup_stdio+0x34>)
 8007700:	4299      	cmp	r1, r3
 8007702:	b510      	push	{r4, lr}
 8007704:	4604      	mov	r4, r0
 8007706:	d001      	beq.n	800770c <cleanup_stdio+0x10>
 8007708:	f001 fa0e 	bl	8008b28 <_fflush_r>
 800770c:	68a1      	ldr	r1, [r4, #8]
 800770e:	4b09      	ldr	r3, [pc, #36]	; (8007734 <cleanup_stdio+0x38>)
 8007710:	4299      	cmp	r1, r3
 8007712:	d002      	beq.n	800771a <cleanup_stdio+0x1e>
 8007714:	4620      	mov	r0, r4
 8007716:	f001 fa07 	bl	8008b28 <_fflush_r>
 800771a:	68e1      	ldr	r1, [r4, #12]
 800771c:	4b06      	ldr	r3, [pc, #24]	; (8007738 <cleanup_stdio+0x3c>)
 800771e:	4299      	cmp	r1, r3
 8007720:	d004      	beq.n	800772c <cleanup_stdio+0x30>
 8007722:	4620      	mov	r0, r4
 8007724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007728:	f001 b9fe 	b.w	8008b28 <_fflush_r>
 800772c:	bd10      	pop	{r4, pc}
 800772e:	bf00      	nop
 8007730:	20000510 	.word	0x20000510
 8007734:	20000578 	.word	0x20000578
 8007738:	200005e0 	.word	0x200005e0

0800773c <global_stdio_init.part.0>:
 800773c:	b510      	push	{r4, lr}
 800773e:	4b0b      	ldr	r3, [pc, #44]	; (800776c <global_stdio_init.part.0+0x30>)
 8007740:	4c0b      	ldr	r4, [pc, #44]	; (8007770 <global_stdio_init.part.0+0x34>)
 8007742:	4a0c      	ldr	r2, [pc, #48]	; (8007774 <global_stdio_init.part.0+0x38>)
 8007744:	601a      	str	r2, [r3, #0]
 8007746:	4620      	mov	r0, r4
 8007748:	2200      	movs	r2, #0
 800774a:	2104      	movs	r1, #4
 800774c:	f7ff ff94 	bl	8007678 <std>
 8007750:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007754:	2201      	movs	r2, #1
 8007756:	2109      	movs	r1, #9
 8007758:	f7ff ff8e 	bl	8007678 <std>
 800775c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007760:	2202      	movs	r2, #2
 8007762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007766:	2112      	movs	r1, #18
 8007768:	f7ff bf86 	b.w	8007678 <std>
 800776c:	20000648 	.word	0x20000648
 8007770:	20000510 	.word	0x20000510
 8007774:	080076e5 	.word	0x080076e5

08007778 <__sfp_lock_acquire>:
 8007778:	4801      	ldr	r0, [pc, #4]	; (8007780 <__sfp_lock_acquire+0x8>)
 800777a:	f000 b8e4 	b.w	8007946 <__retarget_lock_acquire_recursive>
 800777e:	bf00      	nop
 8007780:	2000064d 	.word	0x2000064d

08007784 <__sfp_lock_release>:
 8007784:	4801      	ldr	r0, [pc, #4]	; (800778c <__sfp_lock_release+0x8>)
 8007786:	f000 b8df 	b.w	8007948 <__retarget_lock_release_recursive>
 800778a:	bf00      	nop
 800778c:	2000064d 	.word	0x2000064d

08007790 <__sinit>:
 8007790:	b510      	push	{r4, lr}
 8007792:	4604      	mov	r4, r0
 8007794:	f7ff fff0 	bl	8007778 <__sfp_lock_acquire>
 8007798:	6a23      	ldr	r3, [r4, #32]
 800779a:	b11b      	cbz	r3, 80077a4 <__sinit+0x14>
 800779c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077a0:	f7ff bff0 	b.w	8007784 <__sfp_lock_release>
 80077a4:	4b04      	ldr	r3, [pc, #16]	; (80077b8 <__sinit+0x28>)
 80077a6:	6223      	str	r3, [r4, #32]
 80077a8:	4b04      	ldr	r3, [pc, #16]	; (80077bc <__sinit+0x2c>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d1f5      	bne.n	800779c <__sinit+0xc>
 80077b0:	f7ff ffc4 	bl	800773c <global_stdio_init.part.0>
 80077b4:	e7f2      	b.n	800779c <__sinit+0xc>
 80077b6:	bf00      	nop
 80077b8:	080076fd 	.word	0x080076fd
 80077bc:	20000648 	.word	0x20000648

080077c0 <_fwalk_sglue>:
 80077c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077c4:	4607      	mov	r7, r0
 80077c6:	4688      	mov	r8, r1
 80077c8:	4614      	mov	r4, r2
 80077ca:	2600      	movs	r6, #0
 80077cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80077d0:	f1b9 0901 	subs.w	r9, r9, #1
 80077d4:	d505      	bpl.n	80077e2 <_fwalk_sglue+0x22>
 80077d6:	6824      	ldr	r4, [r4, #0]
 80077d8:	2c00      	cmp	r4, #0
 80077da:	d1f7      	bne.n	80077cc <_fwalk_sglue+0xc>
 80077dc:	4630      	mov	r0, r6
 80077de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077e2:	89ab      	ldrh	r3, [r5, #12]
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d907      	bls.n	80077f8 <_fwalk_sglue+0x38>
 80077e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80077ec:	3301      	adds	r3, #1
 80077ee:	d003      	beq.n	80077f8 <_fwalk_sglue+0x38>
 80077f0:	4629      	mov	r1, r5
 80077f2:	4638      	mov	r0, r7
 80077f4:	47c0      	blx	r8
 80077f6:	4306      	orrs	r6, r0
 80077f8:	3568      	adds	r5, #104	; 0x68
 80077fa:	e7e9      	b.n	80077d0 <_fwalk_sglue+0x10>

080077fc <iprintf>:
 80077fc:	b40f      	push	{r0, r1, r2, r3}
 80077fe:	b507      	push	{r0, r1, r2, lr}
 8007800:	4906      	ldr	r1, [pc, #24]	; (800781c <iprintf+0x20>)
 8007802:	ab04      	add	r3, sp, #16
 8007804:	6808      	ldr	r0, [r1, #0]
 8007806:	f853 2b04 	ldr.w	r2, [r3], #4
 800780a:	6881      	ldr	r1, [r0, #8]
 800780c:	9301      	str	r3, [sp, #4]
 800780e:	f000 ff43 	bl	8008698 <_vfiprintf_r>
 8007812:	b003      	add	sp, #12
 8007814:	f85d eb04 	ldr.w	lr, [sp], #4
 8007818:	b004      	add	sp, #16
 800781a:	4770      	bx	lr
 800781c:	20000068 	.word	0x20000068

08007820 <_puts_r>:
 8007820:	6a03      	ldr	r3, [r0, #32]
 8007822:	b570      	push	{r4, r5, r6, lr}
 8007824:	6884      	ldr	r4, [r0, #8]
 8007826:	4605      	mov	r5, r0
 8007828:	460e      	mov	r6, r1
 800782a:	b90b      	cbnz	r3, 8007830 <_puts_r+0x10>
 800782c:	f7ff ffb0 	bl	8007790 <__sinit>
 8007830:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007832:	07db      	lsls	r3, r3, #31
 8007834:	d405      	bmi.n	8007842 <_puts_r+0x22>
 8007836:	89a3      	ldrh	r3, [r4, #12]
 8007838:	0598      	lsls	r0, r3, #22
 800783a:	d402      	bmi.n	8007842 <_puts_r+0x22>
 800783c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800783e:	f000 f882 	bl	8007946 <__retarget_lock_acquire_recursive>
 8007842:	89a3      	ldrh	r3, [r4, #12]
 8007844:	0719      	lsls	r1, r3, #28
 8007846:	d513      	bpl.n	8007870 <_puts_r+0x50>
 8007848:	6923      	ldr	r3, [r4, #16]
 800784a:	b18b      	cbz	r3, 8007870 <_puts_r+0x50>
 800784c:	3e01      	subs	r6, #1
 800784e:	68a3      	ldr	r3, [r4, #8]
 8007850:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007854:	3b01      	subs	r3, #1
 8007856:	60a3      	str	r3, [r4, #8]
 8007858:	b9e9      	cbnz	r1, 8007896 <_puts_r+0x76>
 800785a:	2b00      	cmp	r3, #0
 800785c:	da2e      	bge.n	80078bc <_puts_r+0x9c>
 800785e:	4622      	mov	r2, r4
 8007860:	210a      	movs	r1, #10
 8007862:	4628      	mov	r0, r5
 8007864:	f001 fd53 	bl	800930e <__swbuf_r>
 8007868:	3001      	adds	r0, #1
 800786a:	d007      	beq.n	800787c <_puts_r+0x5c>
 800786c:	250a      	movs	r5, #10
 800786e:	e007      	b.n	8007880 <_puts_r+0x60>
 8007870:	4621      	mov	r1, r4
 8007872:	4628      	mov	r0, r5
 8007874:	f001 fd88 	bl	8009388 <__swsetup_r>
 8007878:	2800      	cmp	r0, #0
 800787a:	d0e7      	beq.n	800784c <_puts_r+0x2c>
 800787c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007880:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007882:	07da      	lsls	r2, r3, #31
 8007884:	d405      	bmi.n	8007892 <_puts_r+0x72>
 8007886:	89a3      	ldrh	r3, [r4, #12]
 8007888:	059b      	lsls	r3, r3, #22
 800788a:	d402      	bmi.n	8007892 <_puts_r+0x72>
 800788c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800788e:	f000 f85b 	bl	8007948 <__retarget_lock_release_recursive>
 8007892:	4628      	mov	r0, r5
 8007894:	bd70      	pop	{r4, r5, r6, pc}
 8007896:	2b00      	cmp	r3, #0
 8007898:	da04      	bge.n	80078a4 <_puts_r+0x84>
 800789a:	69a2      	ldr	r2, [r4, #24]
 800789c:	429a      	cmp	r2, r3
 800789e:	dc06      	bgt.n	80078ae <_puts_r+0x8e>
 80078a0:	290a      	cmp	r1, #10
 80078a2:	d004      	beq.n	80078ae <_puts_r+0x8e>
 80078a4:	6823      	ldr	r3, [r4, #0]
 80078a6:	1c5a      	adds	r2, r3, #1
 80078a8:	6022      	str	r2, [r4, #0]
 80078aa:	7019      	strb	r1, [r3, #0]
 80078ac:	e7cf      	b.n	800784e <_puts_r+0x2e>
 80078ae:	4622      	mov	r2, r4
 80078b0:	4628      	mov	r0, r5
 80078b2:	f001 fd2c 	bl	800930e <__swbuf_r>
 80078b6:	3001      	adds	r0, #1
 80078b8:	d1c9      	bne.n	800784e <_puts_r+0x2e>
 80078ba:	e7df      	b.n	800787c <_puts_r+0x5c>
 80078bc:	6823      	ldr	r3, [r4, #0]
 80078be:	250a      	movs	r5, #10
 80078c0:	1c5a      	adds	r2, r3, #1
 80078c2:	6022      	str	r2, [r4, #0]
 80078c4:	701d      	strb	r5, [r3, #0]
 80078c6:	e7db      	b.n	8007880 <_puts_r+0x60>

080078c8 <puts>:
 80078c8:	4b02      	ldr	r3, [pc, #8]	; (80078d4 <puts+0xc>)
 80078ca:	4601      	mov	r1, r0
 80078cc:	6818      	ldr	r0, [r3, #0]
 80078ce:	f7ff bfa7 	b.w	8007820 <_puts_r>
 80078d2:	bf00      	nop
 80078d4:	20000068 	.word	0x20000068

080078d8 <memset>:
 80078d8:	4402      	add	r2, r0
 80078da:	4603      	mov	r3, r0
 80078dc:	4293      	cmp	r3, r2
 80078de:	d100      	bne.n	80078e2 <memset+0xa>
 80078e0:	4770      	bx	lr
 80078e2:	f803 1b01 	strb.w	r1, [r3], #1
 80078e6:	e7f9      	b.n	80078dc <memset+0x4>

080078e8 <_localeconv_r>:
 80078e8:	4800      	ldr	r0, [pc, #0]	; (80078ec <_localeconv_r+0x4>)
 80078ea:	4770      	bx	lr
 80078ec:	2000015c 	.word	0x2000015c

080078f0 <__errno>:
 80078f0:	4b01      	ldr	r3, [pc, #4]	; (80078f8 <__errno+0x8>)
 80078f2:	6818      	ldr	r0, [r3, #0]
 80078f4:	4770      	bx	lr
 80078f6:	bf00      	nop
 80078f8:	20000068 	.word	0x20000068

080078fc <__libc_init_array>:
 80078fc:	b570      	push	{r4, r5, r6, lr}
 80078fe:	4d0d      	ldr	r5, [pc, #52]	; (8007934 <__libc_init_array+0x38>)
 8007900:	4c0d      	ldr	r4, [pc, #52]	; (8007938 <__libc_init_array+0x3c>)
 8007902:	1b64      	subs	r4, r4, r5
 8007904:	10a4      	asrs	r4, r4, #2
 8007906:	2600      	movs	r6, #0
 8007908:	42a6      	cmp	r6, r4
 800790a:	d109      	bne.n	8007920 <__libc_init_array+0x24>
 800790c:	4d0b      	ldr	r5, [pc, #44]	; (800793c <__libc_init_array+0x40>)
 800790e:	4c0c      	ldr	r4, [pc, #48]	; (8007940 <__libc_init_array+0x44>)
 8007910:	f001 ff76 	bl	8009800 <_init>
 8007914:	1b64      	subs	r4, r4, r5
 8007916:	10a4      	asrs	r4, r4, #2
 8007918:	2600      	movs	r6, #0
 800791a:	42a6      	cmp	r6, r4
 800791c:	d105      	bne.n	800792a <__libc_init_array+0x2e>
 800791e:	bd70      	pop	{r4, r5, r6, pc}
 8007920:	f855 3b04 	ldr.w	r3, [r5], #4
 8007924:	4798      	blx	r3
 8007926:	3601      	adds	r6, #1
 8007928:	e7ee      	b.n	8007908 <__libc_init_array+0xc>
 800792a:	f855 3b04 	ldr.w	r3, [r5], #4
 800792e:	4798      	blx	r3
 8007930:	3601      	adds	r6, #1
 8007932:	e7f2      	b.n	800791a <__libc_init_array+0x1e>
 8007934:	08009f7c 	.word	0x08009f7c
 8007938:	08009f7c 	.word	0x08009f7c
 800793c:	08009f7c 	.word	0x08009f7c
 8007940:	08009f80 	.word	0x08009f80

08007944 <__retarget_lock_init_recursive>:
 8007944:	4770      	bx	lr

08007946 <__retarget_lock_acquire_recursive>:
 8007946:	4770      	bx	lr

08007948 <__retarget_lock_release_recursive>:
 8007948:	4770      	bx	lr

0800794a <quorem>:
 800794a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800794e:	6903      	ldr	r3, [r0, #16]
 8007950:	690c      	ldr	r4, [r1, #16]
 8007952:	42a3      	cmp	r3, r4
 8007954:	4607      	mov	r7, r0
 8007956:	db7e      	blt.n	8007a56 <quorem+0x10c>
 8007958:	3c01      	subs	r4, #1
 800795a:	f101 0814 	add.w	r8, r1, #20
 800795e:	f100 0514 	add.w	r5, r0, #20
 8007962:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007966:	9301      	str	r3, [sp, #4]
 8007968:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800796c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007970:	3301      	adds	r3, #1
 8007972:	429a      	cmp	r2, r3
 8007974:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007978:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800797c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007980:	d331      	bcc.n	80079e6 <quorem+0x9c>
 8007982:	f04f 0e00 	mov.w	lr, #0
 8007986:	4640      	mov	r0, r8
 8007988:	46ac      	mov	ip, r5
 800798a:	46f2      	mov	sl, lr
 800798c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007990:	b293      	uxth	r3, r2
 8007992:	fb06 e303 	mla	r3, r6, r3, lr
 8007996:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800799a:	0c1a      	lsrs	r2, r3, #16
 800799c:	b29b      	uxth	r3, r3
 800799e:	ebaa 0303 	sub.w	r3, sl, r3
 80079a2:	f8dc a000 	ldr.w	sl, [ip]
 80079a6:	fa13 f38a 	uxtah	r3, r3, sl
 80079aa:	fb06 220e 	mla	r2, r6, lr, r2
 80079ae:	9300      	str	r3, [sp, #0]
 80079b0:	9b00      	ldr	r3, [sp, #0]
 80079b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80079b6:	b292      	uxth	r2, r2
 80079b8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80079bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80079c0:	f8bd 3000 	ldrh.w	r3, [sp]
 80079c4:	4581      	cmp	r9, r0
 80079c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079ca:	f84c 3b04 	str.w	r3, [ip], #4
 80079ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80079d2:	d2db      	bcs.n	800798c <quorem+0x42>
 80079d4:	f855 300b 	ldr.w	r3, [r5, fp]
 80079d8:	b92b      	cbnz	r3, 80079e6 <quorem+0x9c>
 80079da:	9b01      	ldr	r3, [sp, #4]
 80079dc:	3b04      	subs	r3, #4
 80079de:	429d      	cmp	r5, r3
 80079e0:	461a      	mov	r2, r3
 80079e2:	d32c      	bcc.n	8007a3e <quorem+0xf4>
 80079e4:	613c      	str	r4, [r7, #16]
 80079e6:	4638      	mov	r0, r7
 80079e8:	f001 fb4e 	bl	8009088 <__mcmp>
 80079ec:	2800      	cmp	r0, #0
 80079ee:	db22      	blt.n	8007a36 <quorem+0xec>
 80079f0:	3601      	adds	r6, #1
 80079f2:	4629      	mov	r1, r5
 80079f4:	2000      	movs	r0, #0
 80079f6:	f858 2b04 	ldr.w	r2, [r8], #4
 80079fa:	f8d1 c000 	ldr.w	ip, [r1]
 80079fe:	b293      	uxth	r3, r2
 8007a00:	1ac3      	subs	r3, r0, r3
 8007a02:	0c12      	lsrs	r2, r2, #16
 8007a04:	fa13 f38c 	uxtah	r3, r3, ip
 8007a08:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007a0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a16:	45c1      	cmp	r9, r8
 8007a18:	f841 3b04 	str.w	r3, [r1], #4
 8007a1c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007a20:	d2e9      	bcs.n	80079f6 <quorem+0xac>
 8007a22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a2a:	b922      	cbnz	r2, 8007a36 <quorem+0xec>
 8007a2c:	3b04      	subs	r3, #4
 8007a2e:	429d      	cmp	r5, r3
 8007a30:	461a      	mov	r2, r3
 8007a32:	d30a      	bcc.n	8007a4a <quorem+0x100>
 8007a34:	613c      	str	r4, [r7, #16]
 8007a36:	4630      	mov	r0, r6
 8007a38:	b003      	add	sp, #12
 8007a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a3e:	6812      	ldr	r2, [r2, #0]
 8007a40:	3b04      	subs	r3, #4
 8007a42:	2a00      	cmp	r2, #0
 8007a44:	d1ce      	bne.n	80079e4 <quorem+0x9a>
 8007a46:	3c01      	subs	r4, #1
 8007a48:	e7c9      	b.n	80079de <quorem+0x94>
 8007a4a:	6812      	ldr	r2, [r2, #0]
 8007a4c:	3b04      	subs	r3, #4
 8007a4e:	2a00      	cmp	r2, #0
 8007a50:	d1f0      	bne.n	8007a34 <quorem+0xea>
 8007a52:	3c01      	subs	r4, #1
 8007a54:	e7eb      	b.n	8007a2e <quorem+0xe4>
 8007a56:	2000      	movs	r0, #0
 8007a58:	e7ee      	b.n	8007a38 <quorem+0xee>
 8007a5a:	0000      	movs	r0, r0
 8007a5c:	0000      	movs	r0, r0
	...

08007a60 <_dtoa_r>:
 8007a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a64:	ed2d 8b04 	vpush	{d8-d9}
 8007a68:	69c5      	ldr	r5, [r0, #28]
 8007a6a:	b093      	sub	sp, #76	; 0x4c
 8007a6c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007a70:	ec57 6b10 	vmov	r6, r7, d0
 8007a74:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007a78:	9107      	str	r1, [sp, #28]
 8007a7a:	4604      	mov	r4, r0
 8007a7c:	920a      	str	r2, [sp, #40]	; 0x28
 8007a7e:	930d      	str	r3, [sp, #52]	; 0x34
 8007a80:	b975      	cbnz	r5, 8007aa0 <_dtoa_r+0x40>
 8007a82:	2010      	movs	r0, #16
 8007a84:	f000 ff22 	bl	80088cc <malloc>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	61e0      	str	r0, [r4, #28]
 8007a8c:	b920      	cbnz	r0, 8007a98 <_dtoa_r+0x38>
 8007a8e:	4bae      	ldr	r3, [pc, #696]	; (8007d48 <_dtoa_r+0x2e8>)
 8007a90:	21ef      	movs	r1, #239	; 0xef
 8007a92:	48ae      	ldr	r0, [pc, #696]	; (8007d4c <_dtoa_r+0x2ec>)
 8007a94:	f001 fdb8 	bl	8009608 <__assert_func>
 8007a98:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007a9c:	6005      	str	r5, [r0, #0]
 8007a9e:	60c5      	str	r5, [r0, #12]
 8007aa0:	69e3      	ldr	r3, [r4, #28]
 8007aa2:	6819      	ldr	r1, [r3, #0]
 8007aa4:	b151      	cbz	r1, 8007abc <_dtoa_r+0x5c>
 8007aa6:	685a      	ldr	r2, [r3, #4]
 8007aa8:	604a      	str	r2, [r1, #4]
 8007aaa:	2301      	movs	r3, #1
 8007aac:	4093      	lsls	r3, r2
 8007aae:	608b      	str	r3, [r1, #8]
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	f001 f8ad 	bl	8008c10 <_Bfree>
 8007ab6:	69e3      	ldr	r3, [r4, #28]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	601a      	str	r2, [r3, #0]
 8007abc:	1e3b      	subs	r3, r7, #0
 8007abe:	bfbb      	ittet	lt
 8007ac0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007ac4:	9303      	strlt	r3, [sp, #12]
 8007ac6:	2300      	movge	r3, #0
 8007ac8:	2201      	movlt	r2, #1
 8007aca:	bfac      	ite	ge
 8007acc:	f8c8 3000 	strge.w	r3, [r8]
 8007ad0:	f8c8 2000 	strlt.w	r2, [r8]
 8007ad4:	4b9e      	ldr	r3, [pc, #632]	; (8007d50 <_dtoa_r+0x2f0>)
 8007ad6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007ada:	ea33 0308 	bics.w	r3, r3, r8
 8007ade:	d11b      	bne.n	8007b18 <_dtoa_r+0xb8>
 8007ae0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ae2:	f242 730f 	movw	r3, #9999	; 0x270f
 8007ae6:	6013      	str	r3, [r2, #0]
 8007ae8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007aec:	4333      	orrs	r3, r6
 8007aee:	f000 8593 	beq.w	8008618 <_dtoa_r+0xbb8>
 8007af2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007af4:	b963      	cbnz	r3, 8007b10 <_dtoa_r+0xb0>
 8007af6:	4b97      	ldr	r3, [pc, #604]	; (8007d54 <_dtoa_r+0x2f4>)
 8007af8:	e027      	b.n	8007b4a <_dtoa_r+0xea>
 8007afa:	4b97      	ldr	r3, [pc, #604]	; (8007d58 <_dtoa_r+0x2f8>)
 8007afc:	9300      	str	r3, [sp, #0]
 8007afe:	3308      	adds	r3, #8
 8007b00:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007b02:	6013      	str	r3, [r2, #0]
 8007b04:	9800      	ldr	r0, [sp, #0]
 8007b06:	b013      	add	sp, #76	; 0x4c
 8007b08:	ecbd 8b04 	vpop	{d8-d9}
 8007b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b10:	4b90      	ldr	r3, [pc, #576]	; (8007d54 <_dtoa_r+0x2f4>)
 8007b12:	9300      	str	r3, [sp, #0]
 8007b14:	3303      	adds	r3, #3
 8007b16:	e7f3      	b.n	8007b00 <_dtoa_r+0xa0>
 8007b18:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	ec51 0b17 	vmov	r0, r1, d7
 8007b22:	eeb0 8a47 	vmov.f32	s16, s14
 8007b26:	eef0 8a67 	vmov.f32	s17, s15
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	f7f8 ffcc 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b30:	4681      	mov	r9, r0
 8007b32:	b160      	cbz	r0, 8007b4e <_dtoa_r+0xee>
 8007b34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b36:	2301      	movs	r3, #1
 8007b38:	6013      	str	r3, [r2, #0]
 8007b3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	f000 8568 	beq.w	8008612 <_dtoa_r+0xbb2>
 8007b42:	4b86      	ldr	r3, [pc, #536]	; (8007d5c <_dtoa_r+0x2fc>)
 8007b44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007b46:	6013      	str	r3, [r2, #0]
 8007b48:	3b01      	subs	r3, #1
 8007b4a:	9300      	str	r3, [sp, #0]
 8007b4c:	e7da      	b.n	8007b04 <_dtoa_r+0xa4>
 8007b4e:	aa10      	add	r2, sp, #64	; 0x40
 8007b50:	a911      	add	r1, sp, #68	; 0x44
 8007b52:	4620      	mov	r0, r4
 8007b54:	eeb0 0a48 	vmov.f32	s0, s16
 8007b58:	eef0 0a68 	vmov.f32	s1, s17
 8007b5c:	f001 fb3a 	bl	80091d4 <__d2b>
 8007b60:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007b64:	4682      	mov	sl, r0
 8007b66:	2d00      	cmp	r5, #0
 8007b68:	d07f      	beq.n	8007c6a <_dtoa_r+0x20a>
 8007b6a:	ee18 3a90 	vmov	r3, s17
 8007b6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b72:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007b76:	ec51 0b18 	vmov	r0, r1, d8
 8007b7a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007b7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007b82:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007b86:	4619      	mov	r1, r3
 8007b88:	2200      	movs	r2, #0
 8007b8a:	4b75      	ldr	r3, [pc, #468]	; (8007d60 <_dtoa_r+0x300>)
 8007b8c:	f7f8 fb7c 	bl	8000288 <__aeabi_dsub>
 8007b90:	a367      	add	r3, pc, #412	; (adr r3, 8007d30 <_dtoa_r+0x2d0>)
 8007b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b96:	f7f8 fd2f 	bl	80005f8 <__aeabi_dmul>
 8007b9a:	a367      	add	r3, pc, #412	; (adr r3, 8007d38 <_dtoa_r+0x2d8>)
 8007b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba0:	f7f8 fb74 	bl	800028c <__adddf3>
 8007ba4:	4606      	mov	r6, r0
 8007ba6:	4628      	mov	r0, r5
 8007ba8:	460f      	mov	r7, r1
 8007baa:	f7f8 fcbb 	bl	8000524 <__aeabi_i2d>
 8007bae:	a364      	add	r3, pc, #400	; (adr r3, 8007d40 <_dtoa_r+0x2e0>)
 8007bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb4:	f7f8 fd20 	bl	80005f8 <__aeabi_dmul>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	460b      	mov	r3, r1
 8007bbc:	4630      	mov	r0, r6
 8007bbe:	4639      	mov	r1, r7
 8007bc0:	f7f8 fb64 	bl	800028c <__adddf3>
 8007bc4:	4606      	mov	r6, r0
 8007bc6:	460f      	mov	r7, r1
 8007bc8:	f7f8 ffc6 	bl	8000b58 <__aeabi_d2iz>
 8007bcc:	2200      	movs	r2, #0
 8007bce:	4683      	mov	fp, r0
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	4630      	mov	r0, r6
 8007bd4:	4639      	mov	r1, r7
 8007bd6:	f7f8 ff81 	bl	8000adc <__aeabi_dcmplt>
 8007bda:	b148      	cbz	r0, 8007bf0 <_dtoa_r+0x190>
 8007bdc:	4658      	mov	r0, fp
 8007bde:	f7f8 fca1 	bl	8000524 <__aeabi_i2d>
 8007be2:	4632      	mov	r2, r6
 8007be4:	463b      	mov	r3, r7
 8007be6:	f7f8 ff6f 	bl	8000ac8 <__aeabi_dcmpeq>
 8007bea:	b908      	cbnz	r0, 8007bf0 <_dtoa_r+0x190>
 8007bec:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007bf0:	f1bb 0f16 	cmp.w	fp, #22
 8007bf4:	d857      	bhi.n	8007ca6 <_dtoa_r+0x246>
 8007bf6:	4b5b      	ldr	r3, [pc, #364]	; (8007d64 <_dtoa_r+0x304>)
 8007bf8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c00:	ec51 0b18 	vmov	r0, r1, d8
 8007c04:	f7f8 ff6a 	bl	8000adc <__aeabi_dcmplt>
 8007c08:	2800      	cmp	r0, #0
 8007c0a:	d04e      	beq.n	8007caa <_dtoa_r+0x24a>
 8007c0c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007c10:	2300      	movs	r3, #0
 8007c12:	930c      	str	r3, [sp, #48]	; 0x30
 8007c14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c16:	1b5b      	subs	r3, r3, r5
 8007c18:	1e5a      	subs	r2, r3, #1
 8007c1a:	bf45      	ittet	mi
 8007c1c:	f1c3 0301 	rsbmi	r3, r3, #1
 8007c20:	9305      	strmi	r3, [sp, #20]
 8007c22:	2300      	movpl	r3, #0
 8007c24:	2300      	movmi	r3, #0
 8007c26:	9206      	str	r2, [sp, #24]
 8007c28:	bf54      	ite	pl
 8007c2a:	9305      	strpl	r3, [sp, #20]
 8007c2c:	9306      	strmi	r3, [sp, #24]
 8007c2e:	f1bb 0f00 	cmp.w	fp, #0
 8007c32:	db3c      	blt.n	8007cae <_dtoa_r+0x24e>
 8007c34:	9b06      	ldr	r3, [sp, #24]
 8007c36:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007c3a:	445b      	add	r3, fp
 8007c3c:	9306      	str	r3, [sp, #24]
 8007c3e:	2300      	movs	r3, #0
 8007c40:	9308      	str	r3, [sp, #32]
 8007c42:	9b07      	ldr	r3, [sp, #28]
 8007c44:	2b09      	cmp	r3, #9
 8007c46:	d868      	bhi.n	8007d1a <_dtoa_r+0x2ba>
 8007c48:	2b05      	cmp	r3, #5
 8007c4a:	bfc4      	itt	gt
 8007c4c:	3b04      	subgt	r3, #4
 8007c4e:	9307      	strgt	r3, [sp, #28]
 8007c50:	9b07      	ldr	r3, [sp, #28]
 8007c52:	f1a3 0302 	sub.w	r3, r3, #2
 8007c56:	bfcc      	ite	gt
 8007c58:	2500      	movgt	r5, #0
 8007c5a:	2501      	movle	r5, #1
 8007c5c:	2b03      	cmp	r3, #3
 8007c5e:	f200 8085 	bhi.w	8007d6c <_dtoa_r+0x30c>
 8007c62:	e8df f003 	tbb	[pc, r3]
 8007c66:	3b2e      	.short	0x3b2e
 8007c68:	5839      	.short	0x5839
 8007c6a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007c6e:	441d      	add	r5, r3
 8007c70:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007c74:	2b20      	cmp	r3, #32
 8007c76:	bfc1      	itttt	gt
 8007c78:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007c7c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007c80:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007c84:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007c88:	bfd6      	itet	le
 8007c8a:	f1c3 0320 	rsble	r3, r3, #32
 8007c8e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007c92:	fa06 f003 	lslle.w	r0, r6, r3
 8007c96:	f7f8 fc35 	bl	8000504 <__aeabi_ui2d>
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007ca0:	3d01      	subs	r5, #1
 8007ca2:	920e      	str	r2, [sp, #56]	; 0x38
 8007ca4:	e76f      	b.n	8007b86 <_dtoa_r+0x126>
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	e7b3      	b.n	8007c12 <_dtoa_r+0x1b2>
 8007caa:	900c      	str	r0, [sp, #48]	; 0x30
 8007cac:	e7b2      	b.n	8007c14 <_dtoa_r+0x1b4>
 8007cae:	9b05      	ldr	r3, [sp, #20]
 8007cb0:	eba3 030b 	sub.w	r3, r3, fp
 8007cb4:	9305      	str	r3, [sp, #20]
 8007cb6:	f1cb 0300 	rsb	r3, fp, #0
 8007cba:	9308      	str	r3, [sp, #32]
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cc0:	e7bf      	b.n	8007c42 <_dtoa_r+0x1e2>
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	9309      	str	r3, [sp, #36]	; 0x24
 8007cc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	dc52      	bgt.n	8007d72 <_dtoa_r+0x312>
 8007ccc:	2301      	movs	r3, #1
 8007cce:	9301      	str	r3, [sp, #4]
 8007cd0:	9304      	str	r3, [sp, #16]
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	920a      	str	r2, [sp, #40]	; 0x28
 8007cd6:	e00b      	b.n	8007cf0 <_dtoa_r+0x290>
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e7f3      	b.n	8007cc4 <_dtoa_r+0x264>
 8007cdc:	2300      	movs	r3, #0
 8007cde:	9309      	str	r3, [sp, #36]	; 0x24
 8007ce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ce2:	445b      	add	r3, fp
 8007ce4:	9301      	str	r3, [sp, #4]
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	9304      	str	r3, [sp, #16]
 8007cec:	bfb8      	it	lt
 8007cee:	2301      	movlt	r3, #1
 8007cf0:	69e0      	ldr	r0, [r4, #28]
 8007cf2:	2100      	movs	r1, #0
 8007cf4:	2204      	movs	r2, #4
 8007cf6:	f102 0614 	add.w	r6, r2, #20
 8007cfa:	429e      	cmp	r6, r3
 8007cfc:	d93d      	bls.n	8007d7a <_dtoa_r+0x31a>
 8007cfe:	6041      	str	r1, [r0, #4]
 8007d00:	4620      	mov	r0, r4
 8007d02:	f000 ff45 	bl	8008b90 <_Balloc>
 8007d06:	9000      	str	r0, [sp, #0]
 8007d08:	2800      	cmp	r0, #0
 8007d0a:	d139      	bne.n	8007d80 <_dtoa_r+0x320>
 8007d0c:	4b16      	ldr	r3, [pc, #88]	; (8007d68 <_dtoa_r+0x308>)
 8007d0e:	4602      	mov	r2, r0
 8007d10:	f240 11af 	movw	r1, #431	; 0x1af
 8007d14:	e6bd      	b.n	8007a92 <_dtoa_r+0x32>
 8007d16:	2301      	movs	r3, #1
 8007d18:	e7e1      	b.n	8007cde <_dtoa_r+0x27e>
 8007d1a:	2501      	movs	r5, #1
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	9307      	str	r3, [sp, #28]
 8007d20:	9509      	str	r5, [sp, #36]	; 0x24
 8007d22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d26:	9301      	str	r3, [sp, #4]
 8007d28:	9304      	str	r3, [sp, #16]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	2312      	movs	r3, #18
 8007d2e:	e7d1      	b.n	8007cd4 <_dtoa_r+0x274>
 8007d30:	636f4361 	.word	0x636f4361
 8007d34:	3fd287a7 	.word	0x3fd287a7
 8007d38:	8b60c8b3 	.word	0x8b60c8b3
 8007d3c:	3fc68a28 	.word	0x3fc68a28
 8007d40:	509f79fb 	.word	0x509f79fb
 8007d44:	3fd34413 	.word	0x3fd34413
 8007d48:	08009c45 	.word	0x08009c45
 8007d4c:	08009c5c 	.word	0x08009c5c
 8007d50:	7ff00000 	.word	0x7ff00000
 8007d54:	08009c41 	.word	0x08009c41
 8007d58:	08009c38 	.word	0x08009c38
 8007d5c:	08009c15 	.word	0x08009c15
 8007d60:	3ff80000 	.word	0x3ff80000
 8007d64:	08009d58 	.word	0x08009d58
 8007d68:	08009cb4 	.word	0x08009cb4
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8007d70:	e7d7      	b.n	8007d22 <_dtoa_r+0x2c2>
 8007d72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d74:	9301      	str	r3, [sp, #4]
 8007d76:	9304      	str	r3, [sp, #16]
 8007d78:	e7ba      	b.n	8007cf0 <_dtoa_r+0x290>
 8007d7a:	3101      	adds	r1, #1
 8007d7c:	0052      	lsls	r2, r2, #1
 8007d7e:	e7ba      	b.n	8007cf6 <_dtoa_r+0x296>
 8007d80:	69e3      	ldr	r3, [r4, #28]
 8007d82:	9a00      	ldr	r2, [sp, #0]
 8007d84:	601a      	str	r2, [r3, #0]
 8007d86:	9b04      	ldr	r3, [sp, #16]
 8007d88:	2b0e      	cmp	r3, #14
 8007d8a:	f200 80a8 	bhi.w	8007ede <_dtoa_r+0x47e>
 8007d8e:	2d00      	cmp	r5, #0
 8007d90:	f000 80a5 	beq.w	8007ede <_dtoa_r+0x47e>
 8007d94:	f1bb 0f00 	cmp.w	fp, #0
 8007d98:	dd38      	ble.n	8007e0c <_dtoa_r+0x3ac>
 8007d9a:	4bc0      	ldr	r3, [pc, #768]	; (800809c <_dtoa_r+0x63c>)
 8007d9c:	f00b 020f 	and.w	r2, fp, #15
 8007da0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007da4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007da8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007dac:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007db0:	d019      	beq.n	8007de6 <_dtoa_r+0x386>
 8007db2:	4bbb      	ldr	r3, [pc, #748]	; (80080a0 <_dtoa_r+0x640>)
 8007db4:	ec51 0b18 	vmov	r0, r1, d8
 8007db8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007dbc:	f7f8 fd46 	bl	800084c <__aeabi_ddiv>
 8007dc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dc4:	f008 080f 	and.w	r8, r8, #15
 8007dc8:	2503      	movs	r5, #3
 8007dca:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80080a0 <_dtoa_r+0x640>
 8007dce:	f1b8 0f00 	cmp.w	r8, #0
 8007dd2:	d10a      	bne.n	8007dea <_dtoa_r+0x38a>
 8007dd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dd8:	4632      	mov	r2, r6
 8007dda:	463b      	mov	r3, r7
 8007ddc:	f7f8 fd36 	bl	800084c <__aeabi_ddiv>
 8007de0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007de4:	e02b      	b.n	8007e3e <_dtoa_r+0x3de>
 8007de6:	2502      	movs	r5, #2
 8007de8:	e7ef      	b.n	8007dca <_dtoa_r+0x36a>
 8007dea:	f018 0f01 	tst.w	r8, #1
 8007dee:	d008      	beq.n	8007e02 <_dtoa_r+0x3a2>
 8007df0:	4630      	mov	r0, r6
 8007df2:	4639      	mov	r1, r7
 8007df4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007df8:	f7f8 fbfe 	bl	80005f8 <__aeabi_dmul>
 8007dfc:	3501      	adds	r5, #1
 8007dfe:	4606      	mov	r6, r0
 8007e00:	460f      	mov	r7, r1
 8007e02:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007e06:	f109 0908 	add.w	r9, r9, #8
 8007e0a:	e7e0      	b.n	8007dce <_dtoa_r+0x36e>
 8007e0c:	f000 809f 	beq.w	8007f4e <_dtoa_r+0x4ee>
 8007e10:	f1cb 0600 	rsb	r6, fp, #0
 8007e14:	4ba1      	ldr	r3, [pc, #644]	; (800809c <_dtoa_r+0x63c>)
 8007e16:	4fa2      	ldr	r7, [pc, #648]	; (80080a0 <_dtoa_r+0x640>)
 8007e18:	f006 020f 	and.w	r2, r6, #15
 8007e1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e24:	ec51 0b18 	vmov	r0, r1, d8
 8007e28:	f7f8 fbe6 	bl	80005f8 <__aeabi_dmul>
 8007e2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e30:	1136      	asrs	r6, r6, #4
 8007e32:	2300      	movs	r3, #0
 8007e34:	2502      	movs	r5, #2
 8007e36:	2e00      	cmp	r6, #0
 8007e38:	d17e      	bne.n	8007f38 <_dtoa_r+0x4d8>
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1d0      	bne.n	8007de0 <_dtoa_r+0x380>
 8007e3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e40:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	f000 8084 	beq.w	8007f52 <_dtoa_r+0x4f2>
 8007e4a:	4b96      	ldr	r3, [pc, #600]	; (80080a4 <_dtoa_r+0x644>)
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	4640      	mov	r0, r8
 8007e50:	4649      	mov	r1, r9
 8007e52:	f7f8 fe43 	bl	8000adc <__aeabi_dcmplt>
 8007e56:	2800      	cmp	r0, #0
 8007e58:	d07b      	beq.n	8007f52 <_dtoa_r+0x4f2>
 8007e5a:	9b04      	ldr	r3, [sp, #16]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d078      	beq.n	8007f52 <_dtoa_r+0x4f2>
 8007e60:	9b01      	ldr	r3, [sp, #4]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	dd39      	ble.n	8007eda <_dtoa_r+0x47a>
 8007e66:	4b90      	ldr	r3, [pc, #576]	; (80080a8 <_dtoa_r+0x648>)
 8007e68:	2200      	movs	r2, #0
 8007e6a:	4640      	mov	r0, r8
 8007e6c:	4649      	mov	r1, r9
 8007e6e:	f7f8 fbc3 	bl	80005f8 <__aeabi_dmul>
 8007e72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e76:	9e01      	ldr	r6, [sp, #4]
 8007e78:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8007e7c:	3501      	adds	r5, #1
 8007e7e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007e82:	4628      	mov	r0, r5
 8007e84:	f7f8 fb4e 	bl	8000524 <__aeabi_i2d>
 8007e88:	4642      	mov	r2, r8
 8007e8a:	464b      	mov	r3, r9
 8007e8c:	f7f8 fbb4 	bl	80005f8 <__aeabi_dmul>
 8007e90:	4b86      	ldr	r3, [pc, #536]	; (80080ac <_dtoa_r+0x64c>)
 8007e92:	2200      	movs	r2, #0
 8007e94:	f7f8 f9fa 	bl	800028c <__adddf3>
 8007e98:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007e9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ea0:	9303      	str	r3, [sp, #12]
 8007ea2:	2e00      	cmp	r6, #0
 8007ea4:	d158      	bne.n	8007f58 <_dtoa_r+0x4f8>
 8007ea6:	4b82      	ldr	r3, [pc, #520]	; (80080b0 <_dtoa_r+0x650>)
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	4640      	mov	r0, r8
 8007eac:	4649      	mov	r1, r9
 8007eae:	f7f8 f9eb 	bl	8000288 <__aeabi_dsub>
 8007eb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007eb6:	4680      	mov	r8, r0
 8007eb8:	4689      	mov	r9, r1
 8007eba:	f7f8 fe2d 	bl	8000b18 <__aeabi_dcmpgt>
 8007ebe:	2800      	cmp	r0, #0
 8007ec0:	f040 8296 	bne.w	80083f0 <_dtoa_r+0x990>
 8007ec4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007ec8:	4640      	mov	r0, r8
 8007eca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ece:	4649      	mov	r1, r9
 8007ed0:	f7f8 fe04 	bl	8000adc <__aeabi_dcmplt>
 8007ed4:	2800      	cmp	r0, #0
 8007ed6:	f040 8289 	bne.w	80083ec <_dtoa_r+0x98c>
 8007eda:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007ede:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f2c0 814e 	blt.w	8008182 <_dtoa_r+0x722>
 8007ee6:	f1bb 0f0e 	cmp.w	fp, #14
 8007eea:	f300 814a 	bgt.w	8008182 <_dtoa_r+0x722>
 8007eee:	4b6b      	ldr	r3, [pc, #428]	; (800809c <_dtoa_r+0x63c>)
 8007ef0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007ef4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f280 80dc 	bge.w	80080b8 <_dtoa_r+0x658>
 8007f00:	9b04      	ldr	r3, [sp, #16]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	f300 80d8 	bgt.w	80080b8 <_dtoa_r+0x658>
 8007f08:	f040 826f 	bne.w	80083ea <_dtoa_r+0x98a>
 8007f0c:	4b68      	ldr	r3, [pc, #416]	; (80080b0 <_dtoa_r+0x650>)
 8007f0e:	2200      	movs	r2, #0
 8007f10:	4640      	mov	r0, r8
 8007f12:	4649      	mov	r1, r9
 8007f14:	f7f8 fb70 	bl	80005f8 <__aeabi_dmul>
 8007f18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f1c:	f7f8 fdf2 	bl	8000b04 <__aeabi_dcmpge>
 8007f20:	9e04      	ldr	r6, [sp, #16]
 8007f22:	4637      	mov	r7, r6
 8007f24:	2800      	cmp	r0, #0
 8007f26:	f040 8245 	bne.w	80083b4 <_dtoa_r+0x954>
 8007f2a:	9d00      	ldr	r5, [sp, #0]
 8007f2c:	2331      	movs	r3, #49	; 0x31
 8007f2e:	f805 3b01 	strb.w	r3, [r5], #1
 8007f32:	f10b 0b01 	add.w	fp, fp, #1
 8007f36:	e241      	b.n	80083bc <_dtoa_r+0x95c>
 8007f38:	07f2      	lsls	r2, r6, #31
 8007f3a:	d505      	bpl.n	8007f48 <_dtoa_r+0x4e8>
 8007f3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f40:	f7f8 fb5a 	bl	80005f8 <__aeabi_dmul>
 8007f44:	3501      	adds	r5, #1
 8007f46:	2301      	movs	r3, #1
 8007f48:	1076      	asrs	r6, r6, #1
 8007f4a:	3708      	adds	r7, #8
 8007f4c:	e773      	b.n	8007e36 <_dtoa_r+0x3d6>
 8007f4e:	2502      	movs	r5, #2
 8007f50:	e775      	b.n	8007e3e <_dtoa_r+0x3de>
 8007f52:	9e04      	ldr	r6, [sp, #16]
 8007f54:	465f      	mov	r7, fp
 8007f56:	e792      	b.n	8007e7e <_dtoa_r+0x41e>
 8007f58:	9900      	ldr	r1, [sp, #0]
 8007f5a:	4b50      	ldr	r3, [pc, #320]	; (800809c <_dtoa_r+0x63c>)
 8007f5c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f60:	4431      	add	r1, r6
 8007f62:	9102      	str	r1, [sp, #8]
 8007f64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f66:	eeb0 9a47 	vmov.f32	s18, s14
 8007f6a:	eef0 9a67 	vmov.f32	s19, s15
 8007f6e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007f72:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f76:	2900      	cmp	r1, #0
 8007f78:	d044      	beq.n	8008004 <_dtoa_r+0x5a4>
 8007f7a:	494e      	ldr	r1, [pc, #312]	; (80080b4 <_dtoa_r+0x654>)
 8007f7c:	2000      	movs	r0, #0
 8007f7e:	f7f8 fc65 	bl	800084c <__aeabi_ddiv>
 8007f82:	ec53 2b19 	vmov	r2, r3, d9
 8007f86:	f7f8 f97f 	bl	8000288 <__aeabi_dsub>
 8007f8a:	9d00      	ldr	r5, [sp, #0]
 8007f8c:	ec41 0b19 	vmov	d9, r0, r1
 8007f90:	4649      	mov	r1, r9
 8007f92:	4640      	mov	r0, r8
 8007f94:	f7f8 fde0 	bl	8000b58 <__aeabi_d2iz>
 8007f98:	4606      	mov	r6, r0
 8007f9a:	f7f8 fac3 	bl	8000524 <__aeabi_i2d>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	4640      	mov	r0, r8
 8007fa4:	4649      	mov	r1, r9
 8007fa6:	f7f8 f96f 	bl	8000288 <__aeabi_dsub>
 8007faa:	3630      	adds	r6, #48	; 0x30
 8007fac:	f805 6b01 	strb.w	r6, [r5], #1
 8007fb0:	ec53 2b19 	vmov	r2, r3, d9
 8007fb4:	4680      	mov	r8, r0
 8007fb6:	4689      	mov	r9, r1
 8007fb8:	f7f8 fd90 	bl	8000adc <__aeabi_dcmplt>
 8007fbc:	2800      	cmp	r0, #0
 8007fbe:	d164      	bne.n	800808a <_dtoa_r+0x62a>
 8007fc0:	4642      	mov	r2, r8
 8007fc2:	464b      	mov	r3, r9
 8007fc4:	4937      	ldr	r1, [pc, #220]	; (80080a4 <_dtoa_r+0x644>)
 8007fc6:	2000      	movs	r0, #0
 8007fc8:	f7f8 f95e 	bl	8000288 <__aeabi_dsub>
 8007fcc:	ec53 2b19 	vmov	r2, r3, d9
 8007fd0:	f7f8 fd84 	bl	8000adc <__aeabi_dcmplt>
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	f040 80b6 	bne.w	8008146 <_dtoa_r+0x6e6>
 8007fda:	9b02      	ldr	r3, [sp, #8]
 8007fdc:	429d      	cmp	r5, r3
 8007fde:	f43f af7c 	beq.w	8007eda <_dtoa_r+0x47a>
 8007fe2:	4b31      	ldr	r3, [pc, #196]	; (80080a8 <_dtoa_r+0x648>)
 8007fe4:	ec51 0b19 	vmov	r0, r1, d9
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f7f8 fb05 	bl	80005f8 <__aeabi_dmul>
 8007fee:	4b2e      	ldr	r3, [pc, #184]	; (80080a8 <_dtoa_r+0x648>)
 8007ff0:	ec41 0b19 	vmov	d9, r0, r1
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	4640      	mov	r0, r8
 8007ff8:	4649      	mov	r1, r9
 8007ffa:	f7f8 fafd 	bl	80005f8 <__aeabi_dmul>
 8007ffe:	4680      	mov	r8, r0
 8008000:	4689      	mov	r9, r1
 8008002:	e7c5      	b.n	8007f90 <_dtoa_r+0x530>
 8008004:	ec51 0b17 	vmov	r0, r1, d7
 8008008:	f7f8 faf6 	bl	80005f8 <__aeabi_dmul>
 800800c:	9b02      	ldr	r3, [sp, #8]
 800800e:	9d00      	ldr	r5, [sp, #0]
 8008010:	930f      	str	r3, [sp, #60]	; 0x3c
 8008012:	ec41 0b19 	vmov	d9, r0, r1
 8008016:	4649      	mov	r1, r9
 8008018:	4640      	mov	r0, r8
 800801a:	f7f8 fd9d 	bl	8000b58 <__aeabi_d2iz>
 800801e:	4606      	mov	r6, r0
 8008020:	f7f8 fa80 	bl	8000524 <__aeabi_i2d>
 8008024:	3630      	adds	r6, #48	; 0x30
 8008026:	4602      	mov	r2, r0
 8008028:	460b      	mov	r3, r1
 800802a:	4640      	mov	r0, r8
 800802c:	4649      	mov	r1, r9
 800802e:	f7f8 f92b 	bl	8000288 <__aeabi_dsub>
 8008032:	f805 6b01 	strb.w	r6, [r5], #1
 8008036:	9b02      	ldr	r3, [sp, #8]
 8008038:	429d      	cmp	r5, r3
 800803a:	4680      	mov	r8, r0
 800803c:	4689      	mov	r9, r1
 800803e:	f04f 0200 	mov.w	r2, #0
 8008042:	d124      	bne.n	800808e <_dtoa_r+0x62e>
 8008044:	4b1b      	ldr	r3, [pc, #108]	; (80080b4 <_dtoa_r+0x654>)
 8008046:	ec51 0b19 	vmov	r0, r1, d9
 800804a:	f7f8 f91f 	bl	800028c <__adddf3>
 800804e:	4602      	mov	r2, r0
 8008050:	460b      	mov	r3, r1
 8008052:	4640      	mov	r0, r8
 8008054:	4649      	mov	r1, r9
 8008056:	f7f8 fd5f 	bl	8000b18 <__aeabi_dcmpgt>
 800805a:	2800      	cmp	r0, #0
 800805c:	d173      	bne.n	8008146 <_dtoa_r+0x6e6>
 800805e:	ec53 2b19 	vmov	r2, r3, d9
 8008062:	4914      	ldr	r1, [pc, #80]	; (80080b4 <_dtoa_r+0x654>)
 8008064:	2000      	movs	r0, #0
 8008066:	f7f8 f90f 	bl	8000288 <__aeabi_dsub>
 800806a:	4602      	mov	r2, r0
 800806c:	460b      	mov	r3, r1
 800806e:	4640      	mov	r0, r8
 8008070:	4649      	mov	r1, r9
 8008072:	f7f8 fd33 	bl	8000adc <__aeabi_dcmplt>
 8008076:	2800      	cmp	r0, #0
 8008078:	f43f af2f 	beq.w	8007eda <_dtoa_r+0x47a>
 800807c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800807e:	1e6b      	subs	r3, r5, #1
 8008080:	930f      	str	r3, [sp, #60]	; 0x3c
 8008082:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008086:	2b30      	cmp	r3, #48	; 0x30
 8008088:	d0f8      	beq.n	800807c <_dtoa_r+0x61c>
 800808a:	46bb      	mov	fp, r7
 800808c:	e04a      	b.n	8008124 <_dtoa_r+0x6c4>
 800808e:	4b06      	ldr	r3, [pc, #24]	; (80080a8 <_dtoa_r+0x648>)
 8008090:	f7f8 fab2 	bl	80005f8 <__aeabi_dmul>
 8008094:	4680      	mov	r8, r0
 8008096:	4689      	mov	r9, r1
 8008098:	e7bd      	b.n	8008016 <_dtoa_r+0x5b6>
 800809a:	bf00      	nop
 800809c:	08009d58 	.word	0x08009d58
 80080a0:	08009d30 	.word	0x08009d30
 80080a4:	3ff00000 	.word	0x3ff00000
 80080a8:	40240000 	.word	0x40240000
 80080ac:	401c0000 	.word	0x401c0000
 80080b0:	40140000 	.word	0x40140000
 80080b4:	3fe00000 	.word	0x3fe00000
 80080b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80080bc:	9d00      	ldr	r5, [sp, #0]
 80080be:	4642      	mov	r2, r8
 80080c0:	464b      	mov	r3, r9
 80080c2:	4630      	mov	r0, r6
 80080c4:	4639      	mov	r1, r7
 80080c6:	f7f8 fbc1 	bl	800084c <__aeabi_ddiv>
 80080ca:	f7f8 fd45 	bl	8000b58 <__aeabi_d2iz>
 80080ce:	9001      	str	r0, [sp, #4]
 80080d0:	f7f8 fa28 	bl	8000524 <__aeabi_i2d>
 80080d4:	4642      	mov	r2, r8
 80080d6:	464b      	mov	r3, r9
 80080d8:	f7f8 fa8e 	bl	80005f8 <__aeabi_dmul>
 80080dc:	4602      	mov	r2, r0
 80080de:	460b      	mov	r3, r1
 80080e0:	4630      	mov	r0, r6
 80080e2:	4639      	mov	r1, r7
 80080e4:	f7f8 f8d0 	bl	8000288 <__aeabi_dsub>
 80080e8:	9e01      	ldr	r6, [sp, #4]
 80080ea:	9f04      	ldr	r7, [sp, #16]
 80080ec:	3630      	adds	r6, #48	; 0x30
 80080ee:	f805 6b01 	strb.w	r6, [r5], #1
 80080f2:	9e00      	ldr	r6, [sp, #0]
 80080f4:	1bae      	subs	r6, r5, r6
 80080f6:	42b7      	cmp	r7, r6
 80080f8:	4602      	mov	r2, r0
 80080fa:	460b      	mov	r3, r1
 80080fc:	d134      	bne.n	8008168 <_dtoa_r+0x708>
 80080fe:	f7f8 f8c5 	bl	800028c <__adddf3>
 8008102:	4642      	mov	r2, r8
 8008104:	464b      	mov	r3, r9
 8008106:	4606      	mov	r6, r0
 8008108:	460f      	mov	r7, r1
 800810a:	f7f8 fd05 	bl	8000b18 <__aeabi_dcmpgt>
 800810e:	b9c8      	cbnz	r0, 8008144 <_dtoa_r+0x6e4>
 8008110:	4642      	mov	r2, r8
 8008112:	464b      	mov	r3, r9
 8008114:	4630      	mov	r0, r6
 8008116:	4639      	mov	r1, r7
 8008118:	f7f8 fcd6 	bl	8000ac8 <__aeabi_dcmpeq>
 800811c:	b110      	cbz	r0, 8008124 <_dtoa_r+0x6c4>
 800811e:	9b01      	ldr	r3, [sp, #4]
 8008120:	07db      	lsls	r3, r3, #31
 8008122:	d40f      	bmi.n	8008144 <_dtoa_r+0x6e4>
 8008124:	4651      	mov	r1, sl
 8008126:	4620      	mov	r0, r4
 8008128:	f000 fd72 	bl	8008c10 <_Bfree>
 800812c:	2300      	movs	r3, #0
 800812e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008130:	702b      	strb	r3, [r5, #0]
 8008132:	f10b 0301 	add.w	r3, fp, #1
 8008136:	6013      	str	r3, [r2, #0]
 8008138:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800813a:	2b00      	cmp	r3, #0
 800813c:	f43f ace2 	beq.w	8007b04 <_dtoa_r+0xa4>
 8008140:	601d      	str	r5, [r3, #0]
 8008142:	e4df      	b.n	8007b04 <_dtoa_r+0xa4>
 8008144:	465f      	mov	r7, fp
 8008146:	462b      	mov	r3, r5
 8008148:	461d      	mov	r5, r3
 800814a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800814e:	2a39      	cmp	r2, #57	; 0x39
 8008150:	d106      	bne.n	8008160 <_dtoa_r+0x700>
 8008152:	9a00      	ldr	r2, [sp, #0]
 8008154:	429a      	cmp	r2, r3
 8008156:	d1f7      	bne.n	8008148 <_dtoa_r+0x6e8>
 8008158:	9900      	ldr	r1, [sp, #0]
 800815a:	2230      	movs	r2, #48	; 0x30
 800815c:	3701      	adds	r7, #1
 800815e:	700a      	strb	r2, [r1, #0]
 8008160:	781a      	ldrb	r2, [r3, #0]
 8008162:	3201      	adds	r2, #1
 8008164:	701a      	strb	r2, [r3, #0]
 8008166:	e790      	b.n	800808a <_dtoa_r+0x62a>
 8008168:	4ba3      	ldr	r3, [pc, #652]	; (80083f8 <_dtoa_r+0x998>)
 800816a:	2200      	movs	r2, #0
 800816c:	f7f8 fa44 	bl	80005f8 <__aeabi_dmul>
 8008170:	2200      	movs	r2, #0
 8008172:	2300      	movs	r3, #0
 8008174:	4606      	mov	r6, r0
 8008176:	460f      	mov	r7, r1
 8008178:	f7f8 fca6 	bl	8000ac8 <__aeabi_dcmpeq>
 800817c:	2800      	cmp	r0, #0
 800817e:	d09e      	beq.n	80080be <_dtoa_r+0x65e>
 8008180:	e7d0      	b.n	8008124 <_dtoa_r+0x6c4>
 8008182:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008184:	2a00      	cmp	r2, #0
 8008186:	f000 80ca 	beq.w	800831e <_dtoa_r+0x8be>
 800818a:	9a07      	ldr	r2, [sp, #28]
 800818c:	2a01      	cmp	r2, #1
 800818e:	f300 80ad 	bgt.w	80082ec <_dtoa_r+0x88c>
 8008192:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008194:	2a00      	cmp	r2, #0
 8008196:	f000 80a5 	beq.w	80082e4 <_dtoa_r+0x884>
 800819a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800819e:	9e08      	ldr	r6, [sp, #32]
 80081a0:	9d05      	ldr	r5, [sp, #20]
 80081a2:	9a05      	ldr	r2, [sp, #20]
 80081a4:	441a      	add	r2, r3
 80081a6:	9205      	str	r2, [sp, #20]
 80081a8:	9a06      	ldr	r2, [sp, #24]
 80081aa:	2101      	movs	r1, #1
 80081ac:	441a      	add	r2, r3
 80081ae:	4620      	mov	r0, r4
 80081b0:	9206      	str	r2, [sp, #24]
 80081b2:	f000 fde3 	bl	8008d7c <__i2b>
 80081b6:	4607      	mov	r7, r0
 80081b8:	b165      	cbz	r5, 80081d4 <_dtoa_r+0x774>
 80081ba:	9b06      	ldr	r3, [sp, #24]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	dd09      	ble.n	80081d4 <_dtoa_r+0x774>
 80081c0:	42ab      	cmp	r3, r5
 80081c2:	9a05      	ldr	r2, [sp, #20]
 80081c4:	bfa8      	it	ge
 80081c6:	462b      	movge	r3, r5
 80081c8:	1ad2      	subs	r2, r2, r3
 80081ca:	9205      	str	r2, [sp, #20]
 80081cc:	9a06      	ldr	r2, [sp, #24]
 80081ce:	1aed      	subs	r5, r5, r3
 80081d0:	1ad3      	subs	r3, r2, r3
 80081d2:	9306      	str	r3, [sp, #24]
 80081d4:	9b08      	ldr	r3, [sp, #32]
 80081d6:	b1f3      	cbz	r3, 8008216 <_dtoa_r+0x7b6>
 80081d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081da:	2b00      	cmp	r3, #0
 80081dc:	f000 80a3 	beq.w	8008326 <_dtoa_r+0x8c6>
 80081e0:	2e00      	cmp	r6, #0
 80081e2:	dd10      	ble.n	8008206 <_dtoa_r+0x7a6>
 80081e4:	4639      	mov	r1, r7
 80081e6:	4632      	mov	r2, r6
 80081e8:	4620      	mov	r0, r4
 80081ea:	f000 fe87 	bl	8008efc <__pow5mult>
 80081ee:	4652      	mov	r2, sl
 80081f0:	4601      	mov	r1, r0
 80081f2:	4607      	mov	r7, r0
 80081f4:	4620      	mov	r0, r4
 80081f6:	f000 fdd7 	bl	8008da8 <__multiply>
 80081fa:	4651      	mov	r1, sl
 80081fc:	4680      	mov	r8, r0
 80081fe:	4620      	mov	r0, r4
 8008200:	f000 fd06 	bl	8008c10 <_Bfree>
 8008204:	46c2      	mov	sl, r8
 8008206:	9b08      	ldr	r3, [sp, #32]
 8008208:	1b9a      	subs	r2, r3, r6
 800820a:	d004      	beq.n	8008216 <_dtoa_r+0x7b6>
 800820c:	4651      	mov	r1, sl
 800820e:	4620      	mov	r0, r4
 8008210:	f000 fe74 	bl	8008efc <__pow5mult>
 8008214:	4682      	mov	sl, r0
 8008216:	2101      	movs	r1, #1
 8008218:	4620      	mov	r0, r4
 800821a:	f000 fdaf 	bl	8008d7c <__i2b>
 800821e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008220:	2b00      	cmp	r3, #0
 8008222:	4606      	mov	r6, r0
 8008224:	f340 8081 	ble.w	800832a <_dtoa_r+0x8ca>
 8008228:	461a      	mov	r2, r3
 800822a:	4601      	mov	r1, r0
 800822c:	4620      	mov	r0, r4
 800822e:	f000 fe65 	bl	8008efc <__pow5mult>
 8008232:	9b07      	ldr	r3, [sp, #28]
 8008234:	2b01      	cmp	r3, #1
 8008236:	4606      	mov	r6, r0
 8008238:	dd7a      	ble.n	8008330 <_dtoa_r+0x8d0>
 800823a:	f04f 0800 	mov.w	r8, #0
 800823e:	6933      	ldr	r3, [r6, #16]
 8008240:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008244:	6918      	ldr	r0, [r3, #16]
 8008246:	f000 fd4b 	bl	8008ce0 <__hi0bits>
 800824a:	f1c0 0020 	rsb	r0, r0, #32
 800824e:	9b06      	ldr	r3, [sp, #24]
 8008250:	4418      	add	r0, r3
 8008252:	f010 001f 	ands.w	r0, r0, #31
 8008256:	f000 8094 	beq.w	8008382 <_dtoa_r+0x922>
 800825a:	f1c0 0320 	rsb	r3, r0, #32
 800825e:	2b04      	cmp	r3, #4
 8008260:	f340 8085 	ble.w	800836e <_dtoa_r+0x90e>
 8008264:	9b05      	ldr	r3, [sp, #20]
 8008266:	f1c0 001c 	rsb	r0, r0, #28
 800826a:	4403      	add	r3, r0
 800826c:	9305      	str	r3, [sp, #20]
 800826e:	9b06      	ldr	r3, [sp, #24]
 8008270:	4403      	add	r3, r0
 8008272:	4405      	add	r5, r0
 8008274:	9306      	str	r3, [sp, #24]
 8008276:	9b05      	ldr	r3, [sp, #20]
 8008278:	2b00      	cmp	r3, #0
 800827a:	dd05      	ble.n	8008288 <_dtoa_r+0x828>
 800827c:	4651      	mov	r1, sl
 800827e:	461a      	mov	r2, r3
 8008280:	4620      	mov	r0, r4
 8008282:	f000 fe95 	bl	8008fb0 <__lshift>
 8008286:	4682      	mov	sl, r0
 8008288:	9b06      	ldr	r3, [sp, #24]
 800828a:	2b00      	cmp	r3, #0
 800828c:	dd05      	ble.n	800829a <_dtoa_r+0x83a>
 800828e:	4631      	mov	r1, r6
 8008290:	461a      	mov	r2, r3
 8008292:	4620      	mov	r0, r4
 8008294:	f000 fe8c 	bl	8008fb0 <__lshift>
 8008298:	4606      	mov	r6, r0
 800829a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800829c:	2b00      	cmp	r3, #0
 800829e:	d072      	beq.n	8008386 <_dtoa_r+0x926>
 80082a0:	4631      	mov	r1, r6
 80082a2:	4650      	mov	r0, sl
 80082a4:	f000 fef0 	bl	8009088 <__mcmp>
 80082a8:	2800      	cmp	r0, #0
 80082aa:	da6c      	bge.n	8008386 <_dtoa_r+0x926>
 80082ac:	2300      	movs	r3, #0
 80082ae:	4651      	mov	r1, sl
 80082b0:	220a      	movs	r2, #10
 80082b2:	4620      	mov	r0, r4
 80082b4:	f000 fcce 	bl	8008c54 <__multadd>
 80082b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082ba:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80082be:	4682      	mov	sl, r0
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	f000 81b0 	beq.w	8008626 <_dtoa_r+0xbc6>
 80082c6:	2300      	movs	r3, #0
 80082c8:	4639      	mov	r1, r7
 80082ca:	220a      	movs	r2, #10
 80082cc:	4620      	mov	r0, r4
 80082ce:	f000 fcc1 	bl	8008c54 <__multadd>
 80082d2:	9b01      	ldr	r3, [sp, #4]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	4607      	mov	r7, r0
 80082d8:	f300 8096 	bgt.w	8008408 <_dtoa_r+0x9a8>
 80082dc:	9b07      	ldr	r3, [sp, #28]
 80082de:	2b02      	cmp	r3, #2
 80082e0:	dc59      	bgt.n	8008396 <_dtoa_r+0x936>
 80082e2:	e091      	b.n	8008408 <_dtoa_r+0x9a8>
 80082e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80082e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80082ea:	e758      	b.n	800819e <_dtoa_r+0x73e>
 80082ec:	9b04      	ldr	r3, [sp, #16]
 80082ee:	1e5e      	subs	r6, r3, #1
 80082f0:	9b08      	ldr	r3, [sp, #32]
 80082f2:	42b3      	cmp	r3, r6
 80082f4:	bfbf      	itttt	lt
 80082f6:	9b08      	ldrlt	r3, [sp, #32]
 80082f8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80082fa:	9608      	strlt	r6, [sp, #32]
 80082fc:	1af3      	sublt	r3, r6, r3
 80082fe:	bfb4      	ite	lt
 8008300:	18d2      	addlt	r2, r2, r3
 8008302:	1b9e      	subge	r6, r3, r6
 8008304:	9b04      	ldr	r3, [sp, #16]
 8008306:	bfbc      	itt	lt
 8008308:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800830a:	2600      	movlt	r6, #0
 800830c:	2b00      	cmp	r3, #0
 800830e:	bfb7      	itett	lt
 8008310:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008314:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008318:	1a9d      	sublt	r5, r3, r2
 800831a:	2300      	movlt	r3, #0
 800831c:	e741      	b.n	80081a2 <_dtoa_r+0x742>
 800831e:	9e08      	ldr	r6, [sp, #32]
 8008320:	9d05      	ldr	r5, [sp, #20]
 8008322:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008324:	e748      	b.n	80081b8 <_dtoa_r+0x758>
 8008326:	9a08      	ldr	r2, [sp, #32]
 8008328:	e770      	b.n	800820c <_dtoa_r+0x7ac>
 800832a:	9b07      	ldr	r3, [sp, #28]
 800832c:	2b01      	cmp	r3, #1
 800832e:	dc19      	bgt.n	8008364 <_dtoa_r+0x904>
 8008330:	9b02      	ldr	r3, [sp, #8]
 8008332:	b9bb      	cbnz	r3, 8008364 <_dtoa_r+0x904>
 8008334:	9b03      	ldr	r3, [sp, #12]
 8008336:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800833a:	b99b      	cbnz	r3, 8008364 <_dtoa_r+0x904>
 800833c:	9b03      	ldr	r3, [sp, #12]
 800833e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008342:	0d1b      	lsrs	r3, r3, #20
 8008344:	051b      	lsls	r3, r3, #20
 8008346:	b183      	cbz	r3, 800836a <_dtoa_r+0x90a>
 8008348:	9b05      	ldr	r3, [sp, #20]
 800834a:	3301      	adds	r3, #1
 800834c:	9305      	str	r3, [sp, #20]
 800834e:	9b06      	ldr	r3, [sp, #24]
 8008350:	3301      	adds	r3, #1
 8008352:	9306      	str	r3, [sp, #24]
 8008354:	f04f 0801 	mov.w	r8, #1
 8008358:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800835a:	2b00      	cmp	r3, #0
 800835c:	f47f af6f 	bne.w	800823e <_dtoa_r+0x7de>
 8008360:	2001      	movs	r0, #1
 8008362:	e774      	b.n	800824e <_dtoa_r+0x7ee>
 8008364:	f04f 0800 	mov.w	r8, #0
 8008368:	e7f6      	b.n	8008358 <_dtoa_r+0x8f8>
 800836a:	4698      	mov	r8, r3
 800836c:	e7f4      	b.n	8008358 <_dtoa_r+0x8f8>
 800836e:	d082      	beq.n	8008276 <_dtoa_r+0x816>
 8008370:	9a05      	ldr	r2, [sp, #20]
 8008372:	331c      	adds	r3, #28
 8008374:	441a      	add	r2, r3
 8008376:	9205      	str	r2, [sp, #20]
 8008378:	9a06      	ldr	r2, [sp, #24]
 800837a:	441a      	add	r2, r3
 800837c:	441d      	add	r5, r3
 800837e:	9206      	str	r2, [sp, #24]
 8008380:	e779      	b.n	8008276 <_dtoa_r+0x816>
 8008382:	4603      	mov	r3, r0
 8008384:	e7f4      	b.n	8008370 <_dtoa_r+0x910>
 8008386:	9b04      	ldr	r3, [sp, #16]
 8008388:	2b00      	cmp	r3, #0
 800838a:	dc37      	bgt.n	80083fc <_dtoa_r+0x99c>
 800838c:	9b07      	ldr	r3, [sp, #28]
 800838e:	2b02      	cmp	r3, #2
 8008390:	dd34      	ble.n	80083fc <_dtoa_r+0x99c>
 8008392:	9b04      	ldr	r3, [sp, #16]
 8008394:	9301      	str	r3, [sp, #4]
 8008396:	9b01      	ldr	r3, [sp, #4]
 8008398:	b963      	cbnz	r3, 80083b4 <_dtoa_r+0x954>
 800839a:	4631      	mov	r1, r6
 800839c:	2205      	movs	r2, #5
 800839e:	4620      	mov	r0, r4
 80083a0:	f000 fc58 	bl	8008c54 <__multadd>
 80083a4:	4601      	mov	r1, r0
 80083a6:	4606      	mov	r6, r0
 80083a8:	4650      	mov	r0, sl
 80083aa:	f000 fe6d 	bl	8009088 <__mcmp>
 80083ae:	2800      	cmp	r0, #0
 80083b0:	f73f adbb 	bgt.w	8007f2a <_dtoa_r+0x4ca>
 80083b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083b6:	9d00      	ldr	r5, [sp, #0]
 80083b8:	ea6f 0b03 	mvn.w	fp, r3
 80083bc:	f04f 0800 	mov.w	r8, #0
 80083c0:	4631      	mov	r1, r6
 80083c2:	4620      	mov	r0, r4
 80083c4:	f000 fc24 	bl	8008c10 <_Bfree>
 80083c8:	2f00      	cmp	r7, #0
 80083ca:	f43f aeab 	beq.w	8008124 <_dtoa_r+0x6c4>
 80083ce:	f1b8 0f00 	cmp.w	r8, #0
 80083d2:	d005      	beq.n	80083e0 <_dtoa_r+0x980>
 80083d4:	45b8      	cmp	r8, r7
 80083d6:	d003      	beq.n	80083e0 <_dtoa_r+0x980>
 80083d8:	4641      	mov	r1, r8
 80083da:	4620      	mov	r0, r4
 80083dc:	f000 fc18 	bl	8008c10 <_Bfree>
 80083e0:	4639      	mov	r1, r7
 80083e2:	4620      	mov	r0, r4
 80083e4:	f000 fc14 	bl	8008c10 <_Bfree>
 80083e8:	e69c      	b.n	8008124 <_dtoa_r+0x6c4>
 80083ea:	2600      	movs	r6, #0
 80083ec:	4637      	mov	r7, r6
 80083ee:	e7e1      	b.n	80083b4 <_dtoa_r+0x954>
 80083f0:	46bb      	mov	fp, r7
 80083f2:	4637      	mov	r7, r6
 80083f4:	e599      	b.n	8007f2a <_dtoa_r+0x4ca>
 80083f6:	bf00      	nop
 80083f8:	40240000 	.word	0x40240000
 80083fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083fe:	2b00      	cmp	r3, #0
 8008400:	f000 80c8 	beq.w	8008594 <_dtoa_r+0xb34>
 8008404:	9b04      	ldr	r3, [sp, #16]
 8008406:	9301      	str	r3, [sp, #4]
 8008408:	2d00      	cmp	r5, #0
 800840a:	dd05      	ble.n	8008418 <_dtoa_r+0x9b8>
 800840c:	4639      	mov	r1, r7
 800840e:	462a      	mov	r2, r5
 8008410:	4620      	mov	r0, r4
 8008412:	f000 fdcd 	bl	8008fb0 <__lshift>
 8008416:	4607      	mov	r7, r0
 8008418:	f1b8 0f00 	cmp.w	r8, #0
 800841c:	d05b      	beq.n	80084d6 <_dtoa_r+0xa76>
 800841e:	6879      	ldr	r1, [r7, #4]
 8008420:	4620      	mov	r0, r4
 8008422:	f000 fbb5 	bl	8008b90 <_Balloc>
 8008426:	4605      	mov	r5, r0
 8008428:	b928      	cbnz	r0, 8008436 <_dtoa_r+0x9d6>
 800842a:	4b83      	ldr	r3, [pc, #524]	; (8008638 <_dtoa_r+0xbd8>)
 800842c:	4602      	mov	r2, r0
 800842e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008432:	f7ff bb2e 	b.w	8007a92 <_dtoa_r+0x32>
 8008436:	693a      	ldr	r2, [r7, #16]
 8008438:	3202      	adds	r2, #2
 800843a:	0092      	lsls	r2, r2, #2
 800843c:	f107 010c 	add.w	r1, r7, #12
 8008440:	300c      	adds	r0, #12
 8008442:	f001 f8d3 	bl	80095ec <memcpy>
 8008446:	2201      	movs	r2, #1
 8008448:	4629      	mov	r1, r5
 800844a:	4620      	mov	r0, r4
 800844c:	f000 fdb0 	bl	8008fb0 <__lshift>
 8008450:	9b00      	ldr	r3, [sp, #0]
 8008452:	3301      	adds	r3, #1
 8008454:	9304      	str	r3, [sp, #16]
 8008456:	e9dd 2300 	ldrd	r2, r3, [sp]
 800845a:	4413      	add	r3, r2
 800845c:	9308      	str	r3, [sp, #32]
 800845e:	9b02      	ldr	r3, [sp, #8]
 8008460:	f003 0301 	and.w	r3, r3, #1
 8008464:	46b8      	mov	r8, r7
 8008466:	9306      	str	r3, [sp, #24]
 8008468:	4607      	mov	r7, r0
 800846a:	9b04      	ldr	r3, [sp, #16]
 800846c:	4631      	mov	r1, r6
 800846e:	3b01      	subs	r3, #1
 8008470:	4650      	mov	r0, sl
 8008472:	9301      	str	r3, [sp, #4]
 8008474:	f7ff fa69 	bl	800794a <quorem>
 8008478:	4641      	mov	r1, r8
 800847a:	9002      	str	r0, [sp, #8]
 800847c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008480:	4650      	mov	r0, sl
 8008482:	f000 fe01 	bl	8009088 <__mcmp>
 8008486:	463a      	mov	r2, r7
 8008488:	9005      	str	r0, [sp, #20]
 800848a:	4631      	mov	r1, r6
 800848c:	4620      	mov	r0, r4
 800848e:	f000 fe17 	bl	80090c0 <__mdiff>
 8008492:	68c2      	ldr	r2, [r0, #12]
 8008494:	4605      	mov	r5, r0
 8008496:	bb02      	cbnz	r2, 80084da <_dtoa_r+0xa7a>
 8008498:	4601      	mov	r1, r0
 800849a:	4650      	mov	r0, sl
 800849c:	f000 fdf4 	bl	8009088 <__mcmp>
 80084a0:	4602      	mov	r2, r0
 80084a2:	4629      	mov	r1, r5
 80084a4:	4620      	mov	r0, r4
 80084a6:	9209      	str	r2, [sp, #36]	; 0x24
 80084a8:	f000 fbb2 	bl	8008c10 <_Bfree>
 80084ac:	9b07      	ldr	r3, [sp, #28]
 80084ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084b0:	9d04      	ldr	r5, [sp, #16]
 80084b2:	ea43 0102 	orr.w	r1, r3, r2
 80084b6:	9b06      	ldr	r3, [sp, #24]
 80084b8:	4319      	orrs	r1, r3
 80084ba:	d110      	bne.n	80084de <_dtoa_r+0xa7e>
 80084bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80084c0:	d029      	beq.n	8008516 <_dtoa_r+0xab6>
 80084c2:	9b05      	ldr	r3, [sp, #20]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	dd02      	ble.n	80084ce <_dtoa_r+0xa6e>
 80084c8:	9b02      	ldr	r3, [sp, #8]
 80084ca:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80084ce:	9b01      	ldr	r3, [sp, #4]
 80084d0:	f883 9000 	strb.w	r9, [r3]
 80084d4:	e774      	b.n	80083c0 <_dtoa_r+0x960>
 80084d6:	4638      	mov	r0, r7
 80084d8:	e7ba      	b.n	8008450 <_dtoa_r+0x9f0>
 80084da:	2201      	movs	r2, #1
 80084dc:	e7e1      	b.n	80084a2 <_dtoa_r+0xa42>
 80084de:	9b05      	ldr	r3, [sp, #20]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	db04      	blt.n	80084ee <_dtoa_r+0xa8e>
 80084e4:	9907      	ldr	r1, [sp, #28]
 80084e6:	430b      	orrs	r3, r1
 80084e8:	9906      	ldr	r1, [sp, #24]
 80084ea:	430b      	orrs	r3, r1
 80084ec:	d120      	bne.n	8008530 <_dtoa_r+0xad0>
 80084ee:	2a00      	cmp	r2, #0
 80084f0:	dded      	ble.n	80084ce <_dtoa_r+0xa6e>
 80084f2:	4651      	mov	r1, sl
 80084f4:	2201      	movs	r2, #1
 80084f6:	4620      	mov	r0, r4
 80084f8:	f000 fd5a 	bl	8008fb0 <__lshift>
 80084fc:	4631      	mov	r1, r6
 80084fe:	4682      	mov	sl, r0
 8008500:	f000 fdc2 	bl	8009088 <__mcmp>
 8008504:	2800      	cmp	r0, #0
 8008506:	dc03      	bgt.n	8008510 <_dtoa_r+0xab0>
 8008508:	d1e1      	bne.n	80084ce <_dtoa_r+0xa6e>
 800850a:	f019 0f01 	tst.w	r9, #1
 800850e:	d0de      	beq.n	80084ce <_dtoa_r+0xa6e>
 8008510:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008514:	d1d8      	bne.n	80084c8 <_dtoa_r+0xa68>
 8008516:	9a01      	ldr	r2, [sp, #4]
 8008518:	2339      	movs	r3, #57	; 0x39
 800851a:	7013      	strb	r3, [r2, #0]
 800851c:	462b      	mov	r3, r5
 800851e:	461d      	mov	r5, r3
 8008520:	3b01      	subs	r3, #1
 8008522:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008526:	2a39      	cmp	r2, #57	; 0x39
 8008528:	d06c      	beq.n	8008604 <_dtoa_r+0xba4>
 800852a:	3201      	adds	r2, #1
 800852c:	701a      	strb	r2, [r3, #0]
 800852e:	e747      	b.n	80083c0 <_dtoa_r+0x960>
 8008530:	2a00      	cmp	r2, #0
 8008532:	dd07      	ble.n	8008544 <_dtoa_r+0xae4>
 8008534:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008538:	d0ed      	beq.n	8008516 <_dtoa_r+0xab6>
 800853a:	9a01      	ldr	r2, [sp, #4]
 800853c:	f109 0301 	add.w	r3, r9, #1
 8008540:	7013      	strb	r3, [r2, #0]
 8008542:	e73d      	b.n	80083c0 <_dtoa_r+0x960>
 8008544:	9b04      	ldr	r3, [sp, #16]
 8008546:	9a08      	ldr	r2, [sp, #32]
 8008548:	f803 9c01 	strb.w	r9, [r3, #-1]
 800854c:	4293      	cmp	r3, r2
 800854e:	d043      	beq.n	80085d8 <_dtoa_r+0xb78>
 8008550:	4651      	mov	r1, sl
 8008552:	2300      	movs	r3, #0
 8008554:	220a      	movs	r2, #10
 8008556:	4620      	mov	r0, r4
 8008558:	f000 fb7c 	bl	8008c54 <__multadd>
 800855c:	45b8      	cmp	r8, r7
 800855e:	4682      	mov	sl, r0
 8008560:	f04f 0300 	mov.w	r3, #0
 8008564:	f04f 020a 	mov.w	r2, #10
 8008568:	4641      	mov	r1, r8
 800856a:	4620      	mov	r0, r4
 800856c:	d107      	bne.n	800857e <_dtoa_r+0xb1e>
 800856e:	f000 fb71 	bl	8008c54 <__multadd>
 8008572:	4680      	mov	r8, r0
 8008574:	4607      	mov	r7, r0
 8008576:	9b04      	ldr	r3, [sp, #16]
 8008578:	3301      	adds	r3, #1
 800857a:	9304      	str	r3, [sp, #16]
 800857c:	e775      	b.n	800846a <_dtoa_r+0xa0a>
 800857e:	f000 fb69 	bl	8008c54 <__multadd>
 8008582:	4639      	mov	r1, r7
 8008584:	4680      	mov	r8, r0
 8008586:	2300      	movs	r3, #0
 8008588:	220a      	movs	r2, #10
 800858a:	4620      	mov	r0, r4
 800858c:	f000 fb62 	bl	8008c54 <__multadd>
 8008590:	4607      	mov	r7, r0
 8008592:	e7f0      	b.n	8008576 <_dtoa_r+0xb16>
 8008594:	9b04      	ldr	r3, [sp, #16]
 8008596:	9301      	str	r3, [sp, #4]
 8008598:	9d00      	ldr	r5, [sp, #0]
 800859a:	4631      	mov	r1, r6
 800859c:	4650      	mov	r0, sl
 800859e:	f7ff f9d4 	bl	800794a <quorem>
 80085a2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80085a6:	9b00      	ldr	r3, [sp, #0]
 80085a8:	f805 9b01 	strb.w	r9, [r5], #1
 80085ac:	1aea      	subs	r2, r5, r3
 80085ae:	9b01      	ldr	r3, [sp, #4]
 80085b0:	4293      	cmp	r3, r2
 80085b2:	dd07      	ble.n	80085c4 <_dtoa_r+0xb64>
 80085b4:	4651      	mov	r1, sl
 80085b6:	2300      	movs	r3, #0
 80085b8:	220a      	movs	r2, #10
 80085ba:	4620      	mov	r0, r4
 80085bc:	f000 fb4a 	bl	8008c54 <__multadd>
 80085c0:	4682      	mov	sl, r0
 80085c2:	e7ea      	b.n	800859a <_dtoa_r+0xb3a>
 80085c4:	9b01      	ldr	r3, [sp, #4]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	bfc8      	it	gt
 80085ca:	461d      	movgt	r5, r3
 80085cc:	9b00      	ldr	r3, [sp, #0]
 80085ce:	bfd8      	it	le
 80085d0:	2501      	movle	r5, #1
 80085d2:	441d      	add	r5, r3
 80085d4:	f04f 0800 	mov.w	r8, #0
 80085d8:	4651      	mov	r1, sl
 80085da:	2201      	movs	r2, #1
 80085dc:	4620      	mov	r0, r4
 80085de:	f000 fce7 	bl	8008fb0 <__lshift>
 80085e2:	4631      	mov	r1, r6
 80085e4:	4682      	mov	sl, r0
 80085e6:	f000 fd4f 	bl	8009088 <__mcmp>
 80085ea:	2800      	cmp	r0, #0
 80085ec:	dc96      	bgt.n	800851c <_dtoa_r+0xabc>
 80085ee:	d102      	bne.n	80085f6 <_dtoa_r+0xb96>
 80085f0:	f019 0f01 	tst.w	r9, #1
 80085f4:	d192      	bne.n	800851c <_dtoa_r+0xabc>
 80085f6:	462b      	mov	r3, r5
 80085f8:	461d      	mov	r5, r3
 80085fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085fe:	2a30      	cmp	r2, #48	; 0x30
 8008600:	d0fa      	beq.n	80085f8 <_dtoa_r+0xb98>
 8008602:	e6dd      	b.n	80083c0 <_dtoa_r+0x960>
 8008604:	9a00      	ldr	r2, [sp, #0]
 8008606:	429a      	cmp	r2, r3
 8008608:	d189      	bne.n	800851e <_dtoa_r+0xabe>
 800860a:	f10b 0b01 	add.w	fp, fp, #1
 800860e:	2331      	movs	r3, #49	; 0x31
 8008610:	e796      	b.n	8008540 <_dtoa_r+0xae0>
 8008612:	4b0a      	ldr	r3, [pc, #40]	; (800863c <_dtoa_r+0xbdc>)
 8008614:	f7ff ba99 	b.w	8007b4a <_dtoa_r+0xea>
 8008618:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800861a:	2b00      	cmp	r3, #0
 800861c:	f47f aa6d 	bne.w	8007afa <_dtoa_r+0x9a>
 8008620:	4b07      	ldr	r3, [pc, #28]	; (8008640 <_dtoa_r+0xbe0>)
 8008622:	f7ff ba92 	b.w	8007b4a <_dtoa_r+0xea>
 8008626:	9b01      	ldr	r3, [sp, #4]
 8008628:	2b00      	cmp	r3, #0
 800862a:	dcb5      	bgt.n	8008598 <_dtoa_r+0xb38>
 800862c:	9b07      	ldr	r3, [sp, #28]
 800862e:	2b02      	cmp	r3, #2
 8008630:	f73f aeb1 	bgt.w	8008396 <_dtoa_r+0x936>
 8008634:	e7b0      	b.n	8008598 <_dtoa_r+0xb38>
 8008636:	bf00      	nop
 8008638:	08009cb4 	.word	0x08009cb4
 800863c:	08009c14 	.word	0x08009c14
 8008640:	08009c38 	.word	0x08009c38

08008644 <__sfputc_r>:
 8008644:	6893      	ldr	r3, [r2, #8]
 8008646:	3b01      	subs	r3, #1
 8008648:	2b00      	cmp	r3, #0
 800864a:	b410      	push	{r4}
 800864c:	6093      	str	r3, [r2, #8]
 800864e:	da08      	bge.n	8008662 <__sfputc_r+0x1e>
 8008650:	6994      	ldr	r4, [r2, #24]
 8008652:	42a3      	cmp	r3, r4
 8008654:	db01      	blt.n	800865a <__sfputc_r+0x16>
 8008656:	290a      	cmp	r1, #10
 8008658:	d103      	bne.n	8008662 <__sfputc_r+0x1e>
 800865a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800865e:	f000 be56 	b.w	800930e <__swbuf_r>
 8008662:	6813      	ldr	r3, [r2, #0]
 8008664:	1c58      	adds	r0, r3, #1
 8008666:	6010      	str	r0, [r2, #0]
 8008668:	7019      	strb	r1, [r3, #0]
 800866a:	4608      	mov	r0, r1
 800866c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008670:	4770      	bx	lr

08008672 <__sfputs_r>:
 8008672:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008674:	4606      	mov	r6, r0
 8008676:	460f      	mov	r7, r1
 8008678:	4614      	mov	r4, r2
 800867a:	18d5      	adds	r5, r2, r3
 800867c:	42ac      	cmp	r4, r5
 800867e:	d101      	bne.n	8008684 <__sfputs_r+0x12>
 8008680:	2000      	movs	r0, #0
 8008682:	e007      	b.n	8008694 <__sfputs_r+0x22>
 8008684:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008688:	463a      	mov	r2, r7
 800868a:	4630      	mov	r0, r6
 800868c:	f7ff ffda 	bl	8008644 <__sfputc_r>
 8008690:	1c43      	adds	r3, r0, #1
 8008692:	d1f3      	bne.n	800867c <__sfputs_r+0xa>
 8008694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008698 <_vfiprintf_r>:
 8008698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800869c:	460d      	mov	r5, r1
 800869e:	b09d      	sub	sp, #116	; 0x74
 80086a0:	4614      	mov	r4, r2
 80086a2:	4698      	mov	r8, r3
 80086a4:	4606      	mov	r6, r0
 80086a6:	b118      	cbz	r0, 80086b0 <_vfiprintf_r+0x18>
 80086a8:	6a03      	ldr	r3, [r0, #32]
 80086aa:	b90b      	cbnz	r3, 80086b0 <_vfiprintf_r+0x18>
 80086ac:	f7ff f870 	bl	8007790 <__sinit>
 80086b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086b2:	07d9      	lsls	r1, r3, #31
 80086b4:	d405      	bmi.n	80086c2 <_vfiprintf_r+0x2a>
 80086b6:	89ab      	ldrh	r3, [r5, #12]
 80086b8:	059a      	lsls	r2, r3, #22
 80086ba:	d402      	bmi.n	80086c2 <_vfiprintf_r+0x2a>
 80086bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086be:	f7ff f942 	bl	8007946 <__retarget_lock_acquire_recursive>
 80086c2:	89ab      	ldrh	r3, [r5, #12]
 80086c4:	071b      	lsls	r3, r3, #28
 80086c6:	d501      	bpl.n	80086cc <_vfiprintf_r+0x34>
 80086c8:	692b      	ldr	r3, [r5, #16]
 80086ca:	b99b      	cbnz	r3, 80086f4 <_vfiprintf_r+0x5c>
 80086cc:	4629      	mov	r1, r5
 80086ce:	4630      	mov	r0, r6
 80086d0:	f000 fe5a 	bl	8009388 <__swsetup_r>
 80086d4:	b170      	cbz	r0, 80086f4 <_vfiprintf_r+0x5c>
 80086d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086d8:	07dc      	lsls	r4, r3, #31
 80086da:	d504      	bpl.n	80086e6 <_vfiprintf_r+0x4e>
 80086dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086e0:	b01d      	add	sp, #116	; 0x74
 80086e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086e6:	89ab      	ldrh	r3, [r5, #12]
 80086e8:	0598      	lsls	r0, r3, #22
 80086ea:	d4f7      	bmi.n	80086dc <_vfiprintf_r+0x44>
 80086ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086ee:	f7ff f92b 	bl	8007948 <__retarget_lock_release_recursive>
 80086f2:	e7f3      	b.n	80086dc <_vfiprintf_r+0x44>
 80086f4:	2300      	movs	r3, #0
 80086f6:	9309      	str	r3, [sp, #36]	; 0x24
 80086f8:	2320      	movs	r3, #32
 80086fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8008702:	2330      	movs	r3, #48	; 0x30
 8008704:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80088b8 <_vfiprintf_r+0x220>
 8008708:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800870c:	f04f 0901 	mov.w	r9, #1
 8008710:	4623      	mov	r3, r4
 8008712:	469a      	mov	sl, r3
 8008714:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008718:	b10a      	cbz	r2, 800871e <_vfiprintf_r+0x86>
 800871a:	2a25      	cmp	r2, #37	; 0x25
 800871c:	d1f9      	bne.n	8008712 <_vfiprintf_r+0x7a>
 800871e:	ebba 0b04 	subs.w	fp, sl, r4
 8008722:	d00b      	beq.n	800873c <_vfiprintf_r+0xa4>
 8008724:	465b      	mov	r3, fp
 8008726:	4622      	mov	r2, r4
 8008728:	4629      	mov	r1, r5
 800872a:	4630      	mov	r0, r6
 800872c:	f7ff ffa1 	bl	8008672 <__sfputs_r>
 8008730:	3001      	adds	r0, #1
 8008732:	f000 80a9 	beq.w	8008888 <_vfiprintf_r+0x1f0>
 8008736:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008738:	445a      	add	r2, fp
 800873a:	9209      	str	r2, [sp, #36]	; 0x24
 800873c:	f89a 3000 	ldrb.w	r3, [sl]
 8008740:	2b00      	cmp	r3, #0
 8008742:	f000 80a1 	beq.w	8008888 <_vfiprintf_r+0x1f0>
 8008746:	2300      	movs	r3, #0
 8008748:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800874c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008750:	f10a 0a01 	add.w	sl, sl, #1
 8008754:	9304      	str	r3, [sp, #16]
 8008756:	9307      	str	r3, [sp, #28]
 8008758:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800875c:	931a      	str	r3, [sp, #104]	; 0x68
 800875e:	4654      	mov	r4, sl
 8008760:	2205      	movs	r2, #5
 8008762:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008766:	4854      	ldr	r0, [pc, #336]	; (80088b8 <_vfiprintf_r+0x220>)
 8008768:	f7f7 fd32 	bl	80001d0 <memchr>
 800876c:	9a04      	ldr	r2, [sp, #16]
 800876e:	b9d8      	cbnz	r0, 80087a8 <_vfiprintf_r+0x110>
 8008770:	06d1      	lsls	r1, r2, #27
 8008772:	bf44      	itt	mi
 8008774:	2320      	movmi	r3, #32
 8008776:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800877a:	0713      	lsls	r3, r2, #28
 800877c:	bf44      	itt	mi
 800877e:	232b      	movmi	r3, #43	; 0x2b
 8008780:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008784:	f89a 3000 	ldrb.w	r3, [sl]
 8008788:	2b2a      	cmp	r3, #42	; 0x2a
 800878a:	d015      	beq.n	80087b8 <_vfiprintf_r+0x120>
 800878c:	9a07      	ldr	r2, [sp, #28]
 800878e:	4654      	mov	r4, sl
 8008790:	2000      	movs	r0, #0
 8008792:	f04f 0c0a 	mov.w	ip, #10
 8008796:	4621      	mov	r1, r4
 8008798:	f811 3b01 	ldrb.w	r3, [r1], #1
 800879c:	3b30      	subs	r3, #48	; 0x30
 800879e:	2b09      	cmp	r3, #9
 80087a0:	d94d      	bls.n	800883e <_vfiprintf_r+0x1a6>
 80087a2:	b1b0      	cbz	r0, 80087d2 <_vfiprintf_r+0x13a>
 80087a4:	9207      	str	r2, [sp, #28]
 80087a6:	e014      	b.n	80087d2 <_vfiprintf_r+0x13a>
 80087a8:	eba0 0308 	sub.w	r3, r0, r8
 80087ac:	fa09 f303 	lsl.w	r3, r9, r3
 80087b0:	4313      	orrs	r3, r2
 80087b2:	9304      	str	r3, [sp, #16]
 80087b4:	46a2      	mov	sl, r4
 80087b6:	e7d2      	b.n	800875e <_vfiprintf_r+0xc6>
 80087b8:	9b03      	ldr	r3, [sp, #12]
 80087ba:	1d19      	adds	r1, r3, #4
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	9103      	str	r1, [sp, #12]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	bfbb      	ittet	lt
 80087c4:	425b      	neglt	r3, r3
 80087c6:	f042 0202 	orrlt.w	r2, r2, #2
 80087ca:	9307      	strge	r3, [sp, #28]
 80087cc:	9307      	strlt	r3, [sp, #28]
 80087ce:	bfb8      	it	lt
 80087d0:	9204      	strlt	r2, [sp, #16]
 80087d2:	7823      	ldrb	r3, [r4, #0]
 80087d4:	2b2e      	cmp	r3, #46	; 0x2e
 80087d6:	d10c      	bne.n	80087f2 <_vfiprintf_r+0x15a>
 80087d8:	7863      	ldrb	r3, [r4, #1]
 80087da:	2b2a      	cmp	r3, #42	; 0x2a
 80087dc:	d134      	bne.n	8008848 <_vfiprintf_r+0x1b0>
 80087de:	9b03      	ldr	r3, [sp, #12]
 80087e0:	1d1a      	adds	r2, r3, #4
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	9203      	str	r2, [sp, #12]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	bfb8      	it	lt
 80087ea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80087ee:	3402      	adds	r4, #2
 80087f0:	9305      	str	r3, [sp, #20]
 80087f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80088c8 <_vfiprintf_r+0x230>
 80087f6:	7821      	ldrb	r1, [r4, #0]
 80087f8:	2203      	movs	r2, #3
 80087fa:	4650      	mov	r0, sl
 80087fc:	f7f7 fce8 	bl	80001d0 <memchr>
 8008800:	b138      	cbz	r0, 8008812 <_vfiprintf_r+0x17a>
 8008802:	9b04      	ldr	r3, [sp, #16]
 8008804:	eba0 000a 	sub.w	r0, r0, sl
 8008808:	2240      	movs	r2, #64	; 0x40
 800880a:	4082      	lsls	r2, r0
 800880c:	4313      	orrs	r3, r2
 800880e:	3401      	adds	r4, #1
 8008810:	9304      	str	r3, [sp, #16]
 8008812:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008816:	4829      	ldr	r0, [pc, #164]	; (80088bc <_vfiprintf_r+0x224>)
 8008818:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800881c:	2206      	movs	r2, #6
 800881e:	f7f7 fcd7 	bl	80001d0 <memchr>
 8008822:	2800      	cmp	r0, #0
 8008824:	d03f      	beq.n	80088a6 <_vfiprintf_r+0x20e>
 8008826:	4b26      	ldr	r3, [pc, #152]	; (80088c0 <_vfiprintf_r+0x228>)
 8008828:	bb1b      	cbnz	r3, 8008872 <_vfiprintf_r+0x1da>
 800882a:	9b03      	ldr	r3, [sp, #12]
 800882c:	3307      	adds	r3, #7
 800882e:	f023 0307 	bic.w	r3, r3, #7
 8008832:	3308      	adds	r3, #8
 8008834:	9303      	str	r3, [sp, #12]
 8008836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008838:	443b      	add	r3, r7
 800883a:	9309      	str	r3, [sp, #36]	; 0x24
 800883c:	e768      	b.n	8008710 <_vfiprintf_r+0x78>
 800883e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008842:	460c      	mov	r4, r1
 8008844:	2001      	movs	r0, #1
 8008846:	e7a6      	b.n	8008796 <_vfiprintf_r+0xfe>
 8008848:	2300      	movs	r3, #0
 800884a:	3401      	adds	r4, #1
 800884c:	9305      	str	r3, [sp, #20]
 800884e:	4619      	mov	r1, r3
 8008850:	f04f 0c0a 	mov.w	ip, #10
 8008854:	4620      	mov	r0, r4
 8008856:	f810 2b01 	ldrb.w	r2, [r0], #1
 800885a:	3a30      	subs	r2, #48	; 0x30
 800885c:	2a09      	cmp	r2, #9
 800885e:	d903      	bls.n	8008868 <_vfiprintf_r+0x1d0>
 8008860:	2b00      	cmp	r3, #0
 8008862:	d0c6      	beq.n	80087f2 <_vfiprintf_r+0x15a>
 8008864:	9105      	str	r1, [sp, #20]
 8008866:	e7c4      	b.n	80087f2 <_vfiprintf_r+0x15a>
 8008868:	fb0c 2101 	mla	r1, ip, r1, r2
 800886c:	4604      	mov	r4, r0
 800886e:	2301      	movs	r3, #1
 8008870:	e7f0      	b.n	8008854 <_vfiprintf_r+0x1bc>
 8008872:	ab03      	add	r3, sp, #12
 8008874:	9300      	str	r3, [sp, #0]
 8008876:	462a      	mov	r2, r5
 8008878:	4b12      	ldr	r3, [pc, #72]	; (80088c4 <_vfiprintf_r+0x22c>)
 800887a:	a904      	add	r1, sp, #16
 800887c:	4630      	mov	r0, r6
 800887e:	f7fe fb35 	bl	8006eec <_printf_float>
 8008882:	4607      	mov	r7, r0
 8008884:	1c78      	adds	r0, r7, #1
 8008886:	d1d6      	bne.n	8008836 <_vfiprintf_r+0x19e>
 8008888:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800888a:	07d9      	lsls	r1, r3, #31
 800888c:	d405      	bmi.n	800889a <_vfiprintf_r+0x202>
 800888e:	89ab      	ldrh	r3, [r5, #12]
 8008890:	059a      	lsls	r2, r3, #22
 8008892:	d402      	bmi.n	800889a <_vfiprintf_r+0x202>
 8008894:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008896:	f7ff f857 	bl	8007948 <__retarget_lock_release_recursive>
 800889a:	89ab      	ldrh	r3, [r5, #12]
 800889c:	065b      	lsls	r3, r3, #25
 800889e:	f53f af1d 	bmi.w	80086dc <_vfiprintf_r+0x44>
 80088a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088a4:	e71c      	b.n	80086e0 <_vfiprintf_r+0x48>
 80088a6:	ab03      	add	r3, sp, #12
 80088a8:	9300      	str	r3, [sp, #0]
 80088aa:	462a      	mov	r2, r5
 80088ac:	4b05      	ldr	r3, [pc, #20]	; (80088c4 <_vfiprintf_r+0x22c>)
 80088ae:	a904      	add	r1, sp, #16
 80088b0:	4630      	mov	r0, r6
 80088b2:	f7fe fdbf 	bl	8007434 <_printf_i>
 80088b6:	e7e4      	b.n	8008882 <_vfiprintf_r+0x1ea>
 80088b8:	08009cc5 	.word	0x08009cc5
 80088bc:	08009ccf 	.word	0x08009ccf
 80088c0:	08006eed 	.word	0x08006eed
 80088c4:	08008673 	.word	0x08008673
 80088c8:	08009ccb 	.word	0x08009ccb

080088cc <malloc>:
 80088cc:	4b02      	ldr	r3, [pc, #8]	; (80088d8 <malloc+0xc>)
 80088ce:	4601      	mov	r1, r0
 80088d0:	6818      	ldr	r0, [r3, #0]
 80088d2:	f000 b823 	b.w	800891c <_malloc_r>
 80088d6:	bf00      	nop
 80088d8:	20000068 	.word	0x20000068

080088dc <sbrk_aligned>:
 80088dc:	b570      	push	{r4, r5, r6, lr}
 80088de:	4e0e      	ldr	r6, [pc, #56]	; (8008918 <sbrk_aligned+0x3c>)
 80088e0:	460c      	mov	r4, r1
 80088e2:	6831      	ldr	r1, [r6, #0]
 80088e4:	4605      	mov	r5, r0
 80088e6:	b911      	cbnz	r1, 80088ee <sbrk_aligned+0x12>
 80088e8:	f000 fe5e 	bl	80095a8 <_sbrk_r>
 80088ec:	6030      	str	r0, [r6, #0]
 80088ee:	4621      	mov	r1, r4
 80088f0:	4628      	mov	r0, r5
 80088f2:	f000 fe59 	bl	80095a8 <_sbrk_r>
 80088f6:	1c43      	adds	r3, r0, #1
 80088f8:	d00a      	beq.n	8008910 <sbrk_aligned+0x34>
 80088fa:	1cc4      	adds	r4, r0, #3
 80088fc:	f024 0403 	bic.w	r4, r4, #3
 8008900:	42a0      	cmp	r0, r4
 8008902:	d007      	beq.n	8008914 <sbrk_aligned+0x38>
 8008904:	1a21      	subs	r1, r4, r0
 8008906:	4628      	mov	r0, r5
 8008908:	f000 fe4e 	bl	80095a8 <_sbrk_r>
 800890c:	3001      	adds	r0, #1
 800890e:	d101      	bne.n	8008914 <sbrk_aligned+0x38>
 8008910:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008914:	4620      	mov	r0, r4
 8008916:	bd70      	pop	{r4, r5, r6, pc}
 8008918:	20000654 	.word	0x20000654

0800891c <_malloc_r>:
 800891c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008920:	1ccd      	adds	r5, r1, #3
 8008922:	f025 0503 	bic.w	r5, r5, #3
 8008926:	3508      	adds	r5, #8
 8008928:	2d0c      	cmp	r5, #12
 800892a:	bf38      	it	cc
 800892c:	250c      	movcc	r5, #12
 800892e:	2d00      	cmp	r5, #0
 8008930:	4607      	mov	r7, r0
 8008932:	db01      	blt.n	8008938 <_malloc_r+0x1c>
 8008934:	42a9      	cmp	r1, r5
 8008936:	d905      	bls.n	8008944 <_malloc_r+0x28>
 8008938:	230c      	movs	r3, #12
 800893a:	603b      	str	r3, [r7, #0]
 800893c:	2600      	movs	r6, #0
 800893e:	4630      	mov	r0, r6
 8008940:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008944:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008a18 <_malloc_r+0xfc>
 8008948:	f000 f916 	bl	8008b78 <__malloc_lock>
 800894c:	f8d8 3000 	ldr.w	r3, [r8]
 8008950:	461c      	mov	r4, r3
 8008952:	bb5c      	cbnz	r4, 80089ac <_malloc_r+0x90>
 8008954:	4629      	mov	r1, r5
 8008956:	4638      	mov	r0, r7
 8008958:	f7ff ffc0 	bl	80088dc <sbrk_aligned>
 800895c:	1c43      	adds	r3, r0, #1
 800895e:	4604      	mov	r4, r0
 8008960:	d155      	bne.n	8008a0e <_malloc_r+0xf2>
 8008962:	f8d8 4000 	ldr.w	r4, [r8]
 8008966:	4626      	mov	r6, r4
 8008968:	2e00      	cmp	r6, #0
 800896a:	d145      	bne.n	80089f8 <_malloc_r+0xdc>
 800896c:	2c00      	cmp	r4, #0
 800896e:	d048      	beq.n	8008a02 <_malloc_r+0xe6>
 8008970:	6823      	ldr	r3, [r4, #0]
 8008972:	4631      	mov	r1, r6
 8008974:	4638      	mov	r0, r7
 8008976:	eb04 0903 	add.w	r9, r4, r3
 800897a:	f000 fe15 	bl	80095a8 <_sbrk_r>
 800897e:	4581      	cmp	r9, r0
 8008980:	d13f      	bne.n	8008a02 <_malloc_r+0xe6>
 8008982:	6821      	ldr	r1, [r4, #0]
 8008984:	1a6d      	subs	r5, r5, r1
 8008986:	4629      	mov	r1, r5
 8008988:	4638      	mov	r0, r7
 800898a:	f7ff ffa7 	bl	80088dc <sbrk_aligned>
 800898e:	3001      	adds	r0, #1
 8008990:	d037      	beq.n	8008a02 <_malloc_r+0xe6>
 8008992:	6823      	ldr	r3, [r4, #0]
 8008994:	442b      	add	r3, r5
 8008996:	6023      	str	r3, [r4, #0]
 8008998:	f8d8 3000 	ldr.w	r3, [r8]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d038      	beq.n	8008a12 <_malloc_r+0xf6>
 80089a0:	685a      	ldr	r2, [r3, #4]
 80089a2:	42a2      	cmp	r2, r4
 80089a4:	d12b      	bne.n	80089fe <_malloc_r+0xe2>
 80089a6:	2200      	movs	r2, #0
 80089a8:	605a      	str	r2, [r3, #4]
 80089aa:	e00f      	b.n	80089cc <_malloc_r+0xb0>
 80089ac:	6822      	ldr	r2, [r4, #0]
 80089ae:	1b52      	subs	r2, r2, r5
 80089b0:	d41f      	bmi.n	80089f2 <_malloc_r+0xd6>
 80089b2:	2a0b      	cmp	r2, #11
 80089b4:	d917      	bls.n	80089e6 <_malloc_r+0xca>
 80089b6:	1961      	adds	r1, r4, r5
 80089b8:	42a3      	cmp	r3, r4
 80089ba:	6025      	str	r5, [r4, #0]
 80089bc:	bf18      	it	ne
 80089be:	6059      	strne	r1, [r3, #4]
 80089c0:	6863      	ldr	r3, [r4, #4]
 80089c2:	bf08      	it	eq
 80089c4:	f8c8 1000 	streq.w	r1, [r8]
 80089c8:	5162      	str	r2, [r4, r5]
 80089ca:	604b      	str	r3, [r1, #4]
 80089cc:	4638      	mov	r0, r7
 80089ce:	f104 060b 	add.w	r6, r4, #11
 80089d2:	f000 f8d7 	bl	8008b84 <__malloc_unlock>
 80089d6:	f026 0607 	bic.w	r6, r6, #7
 80089da:	1d23      	adds	r3, r4, #4
 80089dc:	1af2      	subs	r2, r6, r3
 80089de:	d0ae      	beq.n	800893e <_malloc_r+0x22>
 80089e0:	1b9b      	subs	r3, r3, r6
 80089e2:	50a3      	str	r3, [r4, r2]
 80089e4:	e7ab      	b.n	800893e <_malloc_r+0x22>
 80089e6:	42a3      	cmp	r3, r4
 80089e8:	6862      	ldr	r2, [r4, #4]
 80089ea:	d1dd      	bne.n	80089a8 <_malloc_r+0x8c>
 80089ec:	f8c8 2000 	str.w	r2, [r8]
 80089f0:	e7ec      	b.n	80089cc <_malloc_r+0xb0>
 80089f2:	4623      	mov	r3, r4
 80089f4:	6864      	ldr	r4, [r4, #4]
 80089f6:	e7ac      	b.n	8008952 <_malloc_r+0x36>
 80089f8:	4634      	mov	r4, r6
 80089fa:	6876      	ldr	r6, [r6, #4]
 80089fc:	e7b4      	b.n	8008968 <_malloc_r+0x4c>
 80089fe:	4613      	mov	r3, r2
 8008a00:	e7cc      	b.n	800899c <_malloc_r+0x80>
 8008a02:	230c      	movs	r3, #12
 8008a04:	603b      	str	r3, [r7, #0]
 8008a06:	4638      	mov	r0, r7
 8008a08:	f000 f8bc 	bl	8008b84 <__malloc_unlock>
 8008a0c:	e797      	b.n	800893e <_malloc_r+0x22>
 8008a0e:	6025      	str	r5, [r4, #0]
 8008a10:	e7dc      	b.n	80089cc <_malloc_r+0xb0>
 8008a12:	605b      	str	r3, [r3, #4]
 8008a14:	deff      	udf	#255	; 0xff
 8008a16:	bf00      	nop
 8008a18:	20000650 	.word	0x20000650

08008a1c <__sflush_r>:
 8008a1c:	898a      	ldrh	r2, [r1, #12]
 8008a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a22:	4605      	mov	r5, r0
 8008a24:	0710      	lsls	r0, r2, #28
 8008a26:	460c      	mov	r4, r1
 8008a28:	d458      	bmi.n	8008adc <__sflush_r+0xc0>
 8008a2a:	684b      	ldr	r3, [r1, #4]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	dc05      	bgt.n	8008a3c <__sflush_r+0x20>
 8008a30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	dc02      	bgt.n	8008a3c <__sflush_r+0x20>
 8008a36:	2000      	movs	r0, #0
 8008a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a3e:	2e00      	cmp	r6, #0
 8008a40:	d0f9      	beq.n	8008a36 <__sflush_r+0x1a>
 8008a42:	2300      	movs	r3, #0
 8008a44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008a48:	682f      	ldr	r7, [r5, #0]
 8008a4a:	6a21      	ldr	r1, [r4, #32]
 8008a4c:	602b      	str	r3, [r5, #0]
 8008a4e:	d032      	beq.n	8008ab6 <__sflush_r+0x9a>
 8008a50:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008a52:	89a3      	ldrh	r3, [r4, #12]
 8008a54:	075a      	lsls	r2, r3, #29
 8008a56:	d505      	bpl.n	8008a64 <__sflush_r+0x48>
 8008a58:	6863      	ldr	r3, [r4, #4]
 8008a5a:	1ac0      	subs	r0, r0, r3
 8008a5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a5e:	b10b      	cbz	r3, 8008a64 <__sflush_r+0x48>
 8008a60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a62:	1ac0      	subs	r0, r0, r3
 8008a64:	2300      	movs	r3, #0
 8008a66:	4602      	mov	r2, r0
 8008a68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a6a:	6a21      	ldr	r1, [r4, #32]
 8008a6c:	4628      	mov	r0, r5
 8008a6e:	47b0      	blx	r6
 8008a70:	1c43      	adds	r3, r0, #1
 8008a72:	89a3      	ldrh	r3, [r4, #12]
 8008a74:	d106      	bne.n	8008a84 <__sflush_r+0x68>
 8008a76:	6829      	ldr	r1, [r5, #0]
 8008a78:	291d      	cmp	r1, #29
 8008a7a:	d82b      	bhi.n	8008ad4 <__sflush_r+0xb8>
 8008a7c:	4a29      	ldr	r2, [pc, #164]	; (8008b24 <__sflush_r+0x108>)
 8008a7e:	410a      	asrs	r2, r1
 8008a80:	07d6      	lsls	r6, r2, #31
 8008a82:	d427      	bmi.n	8008ad4 <__sflush_r+0xb8>
 8008a84:	2200      	movs	r2, #0
 8008a86:	6062      	str	r2, [r4, #4]
 8008a88:	04d9      	lsls	r1, r3, #19
 8008a8a:	6922      	ldr	r2, [r4, #16]
 8008a8c:	6022      	str	r2, [r4, #0]
 8008a8e:	d504      	bpl.n	8008a9a <__sflush_r+0x7e>
 8008a90:	1c42      	adds	r2, r0, #1
 8008a92:	d101      	bne.n	8008a98 <__sflush_r+0x7c>
 8008a94:	682b      	ldr	r3, [r5, #0]
 8008a96:	b903      	cbnz	r3, 8008a9a <__sflush_r+0x7e>
 8008a98:	6560      	str	r0, [r4, #84]	; 0x54
 8008a9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a9c:	602f      	str	r7, [r5, #0]
 8008a9e:	2900      	cmp	r1, #0
 8008aa0:	d0c9      	beq.n	8008a36 <__sflush_r+0x1a>
 8008aa2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008aa6:	4299      	cmp	r1, r3
 8008aa8:	d002      	beq.n	8008ab0 <__sflush_r+0x94>
 8008aaa:	4628      	mov	r0, r5
 8008aac:	f000 fde0 	bl	8009670 <_free_r>
 8008ab0:	2000      	movs	r0, #0
 8008ab2:	6360      	str	r0, [r4, #52]	; 0x34
 8008ab4:	e7c0      	b.n	8008a38 <__sflush_r+0x1c>
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	4628      	mov	r0, r5
 8008aba:	47b0      	blx	r6
 8008abc:	1c41      	adds	r1, r0, #1
 8008abe:	d1c8      	bne.n	8008a52 <__sflush_r+0x36>
 8008ac0:	682b      	ldr	r3, [r5, #0]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d0c5      	beq.n	8008a52 <__sflush_r+0x36>
 8008ac6:	2b1d      	cmp	r3, #29
 8008ac8:	d001      	beq.n	8008ace <__sflush_r+0xb2>
 8008aca:	2b16      	cmp	r3, #22
 8008acc:	d101      	bne.n	8008ad2 <__sflush_r+0xb6>
 8008ace:	602f      	str	r7, [r5, #0]
 8008ad0:	e7b1      	b.n	8008a36 <__sflush_r+0x1a>
 8008ad2:	89a3      	ldrh	r3, [r4, #12]
 8008ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ad8:	81a3      	strh	r3, [r4, #12]
 8008ada:	e7ad      	b.n	8008a38 <__sflush_r+0x1c>
 8008adc:	690f      	ldr	r7, [r1, #16]
 8008ade:	2f00      	cmp	r7, #0
 8008ae0:	d0a9      	beq.n	8008a36 <__sflush_r+0x1a>
 8008ae2:	0793      	lsls	r3, r2, #30
 8008ae4:	680e      	ldr	r6, [r1, #0]
 8008ae6:	bf08      	it	eq
 8008ae8:	694b      	ldreq	r3, [r1, #20]
 8008aea:	600f      	str	r7, [r1, #0]
 8008aec:	bf18      	it	ne
 8008aee:	2300      	movne	r3, #0
 8008af0:	eba6 0807 	sub.w	r8, r6, r7
 8008af4:	608b      	str	r3, [r1, #8]
 8008af6:	f1b8 0f00 	cmp.w	r8, #0
 8008afa:	dd9c      	ble.n	8008a36 <__sflush_r+0x1a>
 8008afc:	6a21      	ldr	r1, [r4, #32]
 8008afe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008b00:	4643      	mov	r3, r8
 8008b02:	463a      	mov	r2, r7
 8008b04:	4628      	mov	r0, r5
 8008b06:	47b0      	blx	r6
 8008b08:	2800      	cmp	r0, #0
 8008b0a:	dc06      	bgt.n	8008b1a <__sflush_r+0xfe>
 8008b0c:	89a3      	ldrh	r3, [r4, #12]
 8008b0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b12:	81a3      	strh	r3, [r4, #12]
 8008b14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b18:	e78e      	b.n	8008a38 <__sflush_r+0x1c>
 8008b1a:	4407      	add	r7, r0
 8008b1c:	eba8 0800 	sub.w	r8, r8, r0
 8008b20:	e7e9      	b.n	8008af6 <__sflush_r+0xda>
 8008b22:	bf00      	nop
 8008b24:	dfbffffe 	.word	0xdfbffffe

08008b28 <_fflush_r>:
 8008b28:	b538      	push	{r3, r4, r5, lr}
 8008b2a:	690b      	ldr	r3, [r1, #16]
 8008b2c:	4605      	mov	r5, r0
 8008b2e:	460c      	mov	r4, r1
 8008b30:	b913      	cbnz	r3, 8008b38 <_fflush_r+0x10>
 8008b32:	2500      	movs	r5, #0
 8008b34:	4628      	mov	r0, r5
 8008b36:	bd38      	pop	{r3, r4, r5, pc}
 8008b38:	b118      	cbz	r0, 8008b42 <_fflush_r+0x1a>
 8008b3a:	6a03      	ldr	r3, [r0, #32]
 8008b3c:	b90b      	cbnz	r3, 8008b42 <_fflush_r+0x1a>
 8008b3e:	f7fe fe27 	bl	8007790 <__sinit>
 8008b42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d0f3      	beq.n	8008b32 <_fflush_r+0xa>
 8008b4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008b4c:	07d0      	lsls	r0, r2, #31
 8008b4e:	d404      	bmi.n	8008b5a <_fflush_r+0x32>
 8008b50:	0599      	lsls	r1, r3, #22
 8008b52:	d402      	bmi.n	8008b5a <_fflush_r+0x32>
 8008b54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b56:	f7fe fef6 	bl	8007946 <__retarget_lock_acquire_recursive>
 8008b5a:	4628      	mov	r0, r5
 8008b5c:	4621      	mov	r1, r4
 8008b5e:	f7ff ff5d 	bl	8008a1c <__sflush_r>
 8008b62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b64:	07da      	lsls	r2, r3, #31
 8008b66:	4605      	mov	r5, r0
 8008b68:	d4e4      	bmi.n	8008b34 <_fflush_r+0xc>
 8008b6a:	89a3      	ldrh	r3, [r4, #12]
 8008b6c:	059b      	lsls	r3, r3, #22
 8008b6e:	d4e1      	bmi.n	8008b34 <_fflush_r+0xc>
 8008b70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b72:	f7fe fee9 	bl	8007948 <__retarget_lock_release_recursive>
 8008b76:	e7dd      	b.n	8008b34 <_fflush_r+0xc>

08008b78 <__malloc_lock>:
 8008b78:	4801      	ldr	r0, [pc, #4]	; (8008b80 <__malloc_lock+0x8>)
 8008b7a:	f7fe bee4 	b.w	8007946 <__retarget_lock_acquire_recursive>
 8008b7e:	bf00      	nop
 8008b80:	2000064c 	.word	0x2000064c

08008b84 <__malloc_unlock>:
 8008b84:	4801      	ldr	r0, [pc, #4]	; (8008b8c <__malloc_unlock+0x8>)
 8008b86:	f7fe bedf 	b.w	8007948 <__retarget_lock_release_recursive>
 8008b8a:	bf00      	nop
 8008b8c:	2000064c 	.word	0x2000064c

08008b90 <_Balloc>:
 8008b90:	b570      	push	{r4, r5, r6, lr}
 8008b92:	69c6      	ldr	r6, [r0, #28]
 8008b94:	4604      	mov	r4, r0
 8008b96:	460d      	mov	r5, r1
 8008b98:	b976      	cbnz	r6, 8008bb8 <_Balloc+0x28>
 8008b9a:	2010      	movs	r0, #16
 8008b9c:	f7ff fe96 	bl	80088cc <malloc>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	61e0      	str	r0, [r4, #28]
 8008ba4:	b920      	cbnz	r0, 8008bb0 <_Balloc+0x20>
 8008ba6:	4b18      	ldr	r3, [pc, #96]	; (8008c08 <_Balloc+0x78>)
 8008ba8:	4818      	ldr	r0, [pc, #96]	; (8008c0c <_Balloc+0x7c>)
 8008baa:	216b      	movs	r1, #107	; 0x6b
 8008bac:	f000 fd2c 	bl	8009608 <__assert_func>
 8008bb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008bb4:	6006      	str	r6, [r0, #0]
 8008bb6:	60c6      	str	r6, [r0, #12]
 8008bb8:	69e6      	ldr	r6, [r4, #28]
 8008bba:	68f3      	ldr	r3, [r6, #12]
 8008bbc:	b183      	cbz	r3, 8008be0 <_Balloc+0x50>
 8008bbe:	69e3      	ldr	r3, [r4, #28]
 8008bc0:	68db      	ldr	r3, [r3, #12]
 8008bc2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008bc6:	b9b8      	cbnz	r0, 8008bf8 <_Balloc+0x68>
 8008bc8:	2101      	movs	r1, #1
 8008bca:	fa01 f605 	lsl.w	r6, r1, r5
 8008bce:	1d72      	adds	r2, r6, #5
 8008bd0:	0092      	lsls	r2, r2, #2
 8008bd2:	4620      	mov	r0, r4
 8008bd4:	f000 fd36 	bl	8009644 <_calloc_r>
 8008bd8:	b160      	cbz	r0, 8008bf4 <_Balloc+0x64>
 8008bda:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008bde:	e00e      	b.n	8008bfe <_Balloc+0x6e>
 8008be0:	2221      	movs	r2, #33	; 0x21
 8008be2:	2104      	movs	r1, #4
 8008be4:	4620      	mov	r0, r4
 8008be6:	f000 fd2d 	bl	8009644 <_calloc_r>
 8008bea:	69e3      	ldr	r3, [r4, #28]
 8008bec:	60f0      	str	r0, [r6, #12]
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d1e4      	bne.n	8008bbe <_Balloc+0x2e>
 8008bf4:	2000      	movs	r0, #0
 8008bf6:	bd70      	pop	{r4, r5, r6, pc}
 8008bf8:	6802      	ldr	r2, [r0, #0]
 8008bfa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008bfe:	2300      	movs	r3, #0
 8008c00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008c04:	e7f7      	b.n	8008bf6 <_Balloc+0x66>
 8008c06:	bf00      	nop
 8008c08:	08009c45 	.word	0x08009c45
 8008c0c:	08009cd6 	.word	0x08009cd6

08008c10 <_Bfree>:
 8008c10:	b570      	push	{r4, r5, r6, lr}
 8008c12:	69c6      	ldr	r6, [r0, #28]
 8008c14:	4605      	mov	r5, r0
 8008c16:	460c      	mov	r4, r1
 8008c18:	b976      	cbnz	r6, 8008c38 <_Bfree+0x28>
 8008c1a:	2010      	movs	r0, #16
 8008c1c:	f7ff fe56 	bl	80088cc <malloc>
 8008c20:	4602      	mov	r2, r0
 8008c22:	61e8      	str	r0, [r5, #28]
 8008c24:	b920      	cbnz	r0, 8008c30 <_Bfree+0x20>
 8008c26:	4b09      	ldr	r3, [pc, #36]	; (8008c4c <_Bfree+0x3c>)
 8008c28:	4809      	ldr	r0, [pc, #36]	; (8008c50 <_Bfree+0x40>)
 8008c2a:	218f      	movs	r1, #143	; 0x8f
 8008c2c:	f000 fcec 	bl	8009608 <__assert_func>
 8008c30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c34:	6006      	str	r6, [r0, #0]
 8008c36:	60c6      	str	r6, [r0, #12]
 8008c38:	b13c      	cbz	r4, 8008c4a <_Bfree+0x3a>
 8008c3a:	69eb      	ldr	r3, [r5, #28]
 8008c3c:	6862      	ldr	r2, [r4, #4]
 8008c3e:	68db      	ldr	r3, [r3, #12]
 8008c40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c44:	6021      	str	r1, [r4, #0]
 8008c46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008c4a:	bd70      	pop	{r4, r5, r6, pc}
 8008c4c:	08009c45 	.word	0x08009c45
 8008c50:	08009cd6 	.word	0x08009cd6

08008c54 <__multadd>:
 8008c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c58:	690d      	ldr	r5, [r1, #16]
 8008c5a:	4607      	mov	r7, r0
 8008c5c:	460c      	mov	r4, r1
 8008c5e:	461e      	mov	r6, r3
 8008c60:	f101 0c14 	add.w	ip, r1, #20
 8008c64:	2000      	movs	r0, #0
 8008c66:	f8dc 3000 	ldr.w	r3, [ip]
 8008c6a:	b299      	uxth	r1, r3
 8008c6c:	fb02 6101 	mla	r1, r2, r1, r6
 8008c70:	0c1e      	lsrs	r6, r3, #16
 8008c72:	0c0b      	lsrs	r3, r1, #16
 8008c74:	fb02 3306 	mla	r3, r2, r6, r3
 8008c78:	b289      	uxth	r1, r1
 8008c7a:	3001      	adds	r0, #1
 8008c7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008c80:	4285      	cmp	r5, r0
 8008c82:	f84c 1b04 	str.w	r1, [ip], #4
 8008c86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008c8a:	dcec      	bgt.n	8008c66 <__multadd+0x12>
 8008c8c:	b30e      	cbz	r6, 8008cd2 <__multadd+0x7e>
 8008c8e:	68a3      	ldr	r3, [r4, #8]
 8008c90:	42ab      	cmp	r3, r5
 8008c92:	dc19      	bgt.n	8008cc8 <__multadd+0x74>
 8008c94:	6861      	ldr	r1, [r4, #4]
 8008c96:	4638      	mov	r0, r7
 8008c98:	3101      	adds	r1, #1
 8008c9a:	f7ff ff79 	bl	8008b90 <_Balloc>
 8008c9e:	4680      	mov	r8, r0
 8008ca0:	b928      	cbnz	r0, 8008cae <__multadd+0x5a>
 8008ca2:	4602      	mov	r2, r0
 8008ca4:	4b0c      	ldr	r3, [pc, #48]	; (8008cd8 <__multadd+0x84>)
 8008ca6:	480d      	ldr	r0, [pc, #52]	; (8008cdc <__multadd+0x88>)
 8008ca8:	21ba      	movs	r1, #186	; 0xba
 8008caa:	f000 fcad 	bl	8009608 <__assert_func>
 8008cae:	6922      	ldr	r2, [r4, #16]
 8008cb0:	3202      	adds	r2, #2
 8008cb2:	f104 010c 	add.w	r1, r4, #12
 8008cb6:	0092      	lsls	r2, r2, #2
 8008cb8:	300c      	adds	r0, #12
 8008cba:	f000 fc97 	bl	80095ec <memcpy>
 8008cbe:	4621      	mov	r1, r4
 8008cc0:	4638      	mov	r0, r7
 8008cc2:	f7ff ffa5 	bl	8008c10 <_Bfree>
 8008cc6:	4644      	mov	r4, r8
 8008cc8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008ccc:	3501      	adds	r5, #1
 8008cce:	615e      	str	r6, [r3, #20]
 8008cd0:	6125      	str	r5, [r4, #16]
 8008cd2:	4620      	mov	r0, r4
 8008cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cd8:	08009cb4 	.word	0x08009cb4
 8008cdc:	08009cd6 	.word	0x08009cd6

08008ce0 <__hi0bits>:
 8008ce0:	0c03      	lsrs	r3, r0, #16
 8008ce2:	041b      	lsls	r3, r3, #16
 8008ce4:	b9d3      	cbnz	r3, 8008d1c <__hi0bits+0x3c>
 8008ce6:	0400      	lsls	r0, r0, #16
 8008ce8:	2310      	movs	r3, #16
 8008cea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008cee:	bf04      	itt	eq
 8008cf0:	0200      	lsleq	r0, r0, #8
 8008cf2:	3308      	addeq	r3, #8
 8008cf4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008cf8:	bf04      	itt	eq
 8008cfa:	0100      	lsleq	r0, r0, #4
 8008cfc:	3304      	addeq	r3, #4
 8008cfe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008d02:	bf04      	itt	eq
 8008d04:	0080      	lsleq	r0, r0, #2
 8008d06:	3302      	addeq	r3, #2
 8008d08:	2800      	cmp	r0, #0
 8008d0a:	db05      	blt.n	8008d18 <__hi0bits+0x38>
 8008d0c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008d10:	f103 0301 	add.w	r3, r3, #1
 8008d14:	bf08      	it	eq
 8008d16:	2320      	moveq	r3, #32
 8008d18:	4618      	mov	r0, r3
 8008d1a:	4770      	bx	lr
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	e7e4      	b.n	8008cea <__hi0bits+0xa>

08008d20 <__lo0bits>:
 8008d20:	6803      	ldr	r3, [r0, #0]
 8008d22:	f013 0207 	ands.w	r2, r3, #7
 8008d26:	d00c      	beq.n	8008d42 <__lo0bits+0x22>
 8008d28:	07d9      	lsls	r1, r3, #31
 8008d2a:	d422      	bmi.n	8008d72 <__lo0bits+0x52>
 8008d2c:	079a      	lsls	r2, r3, #30
 8008d2e:	bf49      	itett	mi
 8008d30:	085b      	lsrmi	r3, r3, #1
 8008d32:	089b      	lsrpl	r3, r3, #2
 8008d34:	6003      	strmi	r3, [r0, #0]
 8008d36:	2201      	movmi	r2, #1
 8008d38:	bf5c      	itt	pl
 8008d3a:	6003      	strpl	r3, [r0, #0]
 8008d3c:	2202      	movpl	r2, #2
 8008d3e:	4610      	mov	r0, r2
 8008d40:	4770      	bx	lr
 8008d42:	b299      	uxth	r1, r3
 8008d44:	b909      	cbnz	r1, 8008d4a <__lo0bits+0x2a>
 8008d46:	0c1b      	lsrs	r3, r3, #16
 8008d48:	2210      	movs	r2, #16
 8008d4a:	b2d9      	uxtb	r1, r3
 8008d4c:	b909      	cbnz	r1, 8008d52 <__lo0bits+0x32>
 8008d4e:	3208      	adds	r2, #8
 8008d50:	0a1b      	lsrs	r3, r3, #8
 8008d52:	0719      	lsls	r1, r3, #28
 8008d54:	bf04      	itt	eq
 8008d56:	091b      	lsreq	r3, r3, #4
 8008d58:	3204      	addeq	r2, #4
 8008d5a:	0799      	lsls	r1, r3, #30
 8008d5c:	bf04      	itt	eq
 8008d5e:	089b      	lsreq	r3, r3, #2
 8008d60:	3202      	addeq	r2, #2
 8008d62:	07d9      	lsls	r1, r3, #31
 8008d64:	d403      	bmi.n	8008d6e <__lo0bits+0x4e>
 8008d66:	085b      	lsrs	r3, r3, #1
 8008d68:	f102 0201 	add.w	r2, r2, #1
 8008d6c:	d003      	beq.n	8008d76 <__lo0bits+0x56>
 8008d6e:	6003      	str	r3, [r0, #0]
 8008d70:	e7e5      	b.n	8008d3e <__lo0bits+0x1e>
 8008d72:	2200      	movs	r2, #0
 8008d74:	e7e3      	b.n	8008d3e <__lo0bits+0x1e>
 8008d76:	2220      	movs	r2, #32
 8008d78:	e7e1      	b.n	8008d3e <__lo0bits+0x1e>
	...

08008d7c <__i2b>:
 8008d7c:	b510      	push	{r4, lr}
 8008d7e:	460c      	mov	r4, r1
 8008d80:	2101      	movs	r1, #1
 8008d82:	f7ff ff05 	bl	8008b90 <_Balloc>
 8008d86:	4602      	mov	r2, r0
 8008d88:	b928      	cbnz	r0, 8008d96 <__i2b+0x1a>
 8008d8a:	4b05      	ldr	r3, [pc, #20]	; (8008da0 <__i2b+0x24>)
 8008d8c:	4805      	ldr	r0, [pc, #20]	; (8008da4 <__i2b+0x28>)
 8008d8e:	f240 1145 	movw	r1, #325	; 0x145
 8008d92:	f000 fc39 	bl	8009608 <__assert_func>
 8008d96:	2301      	movs	r3, #1
 8008d98:	6144      	str	r4, [r0, #20]
 8008d9a:	6103      	str	r3, [r0, #16]
 8008d9c:	bd10      	pop	{r4, pc}
 8008d9e:	bf00      	nop
 8008da0:	08009cb4 	.word	0x08009cb4
 8008da4:	08009cd6 	.word	0x08009cd6

08008da8 <__multiply>:
 8008da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dac:	4691      	mov	r9, r2
 8008dae:	690a      	ldr	r2, [r1, #16]
 8008db0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	bfb8      	it	lt
 8008db8:	460b      	movlt	r3, r1
 8008dba:	460c      	mov	r4, r1
 8008dbc:	bfbc      	itt	lt
 8008dbe:	464c      	movlt	r4, r9
 8008dc0:	4699      	movlt	r9, r3
 8008dc2:	6927      	ldr	r7, [r4, #16]
 8008dc4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008dc8:	68a3      	ldr	r3, [r4, #8]
 8008dca:	6861      	ldr	r1, [r4, #4]
 8008dcc:	eb07 060a 	add.w	r6, r7, sl
 8008dd0:	42b3      	cmp	r3, r6
 8008dd2:	b085      	sub	sp, #20
 8008dd4:	bfb8      	it	lt
 8008dd6:	3101      	addlt	r1, #1
 8008dd8:	f7ff feda 	bl	8008b90 <_Balloc>
 8008ddc:	b930      	cbnz	r0, 8008dec <__multiply+0x44>
 8008dde:	4602      	mov	r2, r0
 8008de0:	4b44      	ldr	r3, [pc, #272]	; (8008ef4 <__multiply+0x14c>)
 8008de2:	4845      	ldr	r0, [pc, #276]	; (8008ef8 <__multiply+0x150>)
 8008de4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008de8:	f000 fc0e 	bl	8009608 <__assert_func>
 8008dec:	f100 0514 	add.w	r5, r0, #20
 8008df0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008df4:	462b      	mov	r3, r5
 8008df6:	2200      	movs	r2, #0
 8008df8:	4543      	cmp	r3, r8
 8008dfa:	d321      	bcc.n	8008e40 <__multiply+0x98>
 8008dfc:	f104 0314 	add.w	r3, r4, #20
 8008e00:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008e04:	f109 0314 	add.w	r3, r9, #20
 8008e08:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008e0c:	9202      	str	r2, [sp, #8]
 8008e0e:	1b3a      	subs	r2, r7, r4
 8008e10:	3a15      	subs	r2, #21
 8008e12:	f022 0203 	bic.w	r2, r2, #3
 8008e16:	3204      	adds	r2, #4
 8008e18:	f104 0115 	add.w	r1, r4, #21
 8008e1c:	428f      	cmp	r7, r1
 8008e1e:	bf38      	it	cc
 8008e20:	2204      	movcc	r2, #4
 8008e22:	9201      	str	r2, [sp, #4]
 8008e24:	9a02      	ldr	r2, [sp, #8]
 8008e26:	9303      	str	r3, [sp, #12]
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d80c      	bhi.n	8008e46 <__multiply+0x9e>
 8008e2c:	2e00      	cmp	r6, #0
 8008e2e:	dd03      	ble.n	8008e38 <__multiply+0x90>
 8008e30:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d05b      	beq.n	8008ef0 <__multiply+0x148>
 8008e38:	6106      	str	r6, [r0, #16]
 8008e3a:	b005      	add	sp, #20
 8008e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e40:	f843 2b04 	str.w	r2, [r3], #4
 8008e44:	e7d8      	b.n	8008df8 <__multiply+0x50>
 8008e46:	f8b3 a000 	ldrh.w	sl, [r3]
 8008e4a:	f1ba 0f00 	cmp.w	sl, #0
 8008e4e:	d024      	beq.n	8008e9a <__multiply+0xf2>
 8008e50:	f104 0e14 	add.w	lr, r4, #20
 8008e54:	46a9      	mov	r9, r5
 8008e56:	f04f 0c00 	mov.w	ip, #0
 8008e5a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008e5e:	f8d9 1000 	ldr.w	r1, [r9]
 8008e62:	fa1f fb82 	uxth.w	fp, r2
 8008e66:	b289      	uxth	r1, r1
 8008e68:	fb0a 110b 	mla	r1, sl, fp, r1
 8008e6c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008e70:	f8d9 2000 	ldr.w	r2, [r9]
 8008e74:	4461      	add	r1, ip
 8008e76:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008e7a:	fb0a c20b 	mla	r2, sl, fp, ip
 8008e7e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008e82:	b289      	uxth	r1, r1
 8008e84:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008e88:	4577      	cmp	r7, lr
 8008e8a:	f849 1b04 	str.w	r1, [r9], #4
 8008e8e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008e92:	d8e2      	bhi.n	8008e5a <__multiply+0xb2>
 8008e94:	9a01      	ldr	r2, [sp, #4]
 8008e96:	f845 c002 	str.w	ip, [r5, r2]
 8008e9a:	9a03      	ldr	r2, [sp, #12]
 8008e9c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008ea0:	3304      	adds	r3, #4
 8008ea2:	f1b9 0f00 	cmp.w	r9, #0
 8008ea6:	d021      	beq.n	8008eec <__multiply+0x144>
 8008ea8:	6829      	ldr	r1, [r5, #0]
 8008eaa:	f104 0c14 	add.w	ip, r4, #20
 8008eae:	46ae      	mov	lr, r5
 8008eb0:	f04f 0a00 	mov.w	sl, #0
 8008eb4:	f8bc b000 	ldrh.w	fp, [ip]
 8008eb8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008ebc:	fb09 220b 	mla	r2, r9, fp, r2
 8008ec0:	4452      	add	r2, sl
 8008ec2:	b289      	uxth	r1, r1
 8008ec4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008ec8:	f84e 1b04 	str.w	r1, [lr], #4
 8008ecc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008ed0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008ed4:	f8be 1000 	ldrh.w	r1, [lr]
 8008ed8:	fb09 110a 	mla	r1, r9, sl, r1
 8008edc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008ee0:	4567      	cmp	r7, ip
 8008ee2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008ee6:	d8e5      	bhi.n	8008eb4 <__multiply+0x10c>
 8008ee8:	9a01      	ldr	r2, [sp, #4]
 8008eea:	50a9      	str	r1, [r5, r2]
 8008eec:	3504      	adds	r5, #4
 8008eee:	e799      	b.n	8008e24 <__multiply+0x7c>
 8008ef0:	3e01      	subs	r6, #1
 8008ef2:	e79b      	b.n	8008e2c <__multiply+0x84>
 8008ef4:	08009cb4 	.word	0x08009cb4
 8008ef8:	08009cd6 	.word	0x08009cd6

08008efc <__pow5mult>:
 8008efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f00:	4615      	mov	r5, r2
 8008f02:	f012 0203 	ands.w	r2, r2, #3
 8008f06:	4606      	mov	r6, r0
 8008f08:	460f      	mov	r7, r1
 8008f0a:	d007      	beq.n	8008f1c <__pow5mult+0x20>
 8008f0c:	4c25      	ldr	r4, [pc, #148]	; (8008fa4 <__pow5mult+0xa8>)
 8008f0e:	3a01      	subs	r2, #1
 8008f10:	2300      	movs	r3, #0
 8008f12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008f16:	f7ff fe9d 	bl	8008c54 <__multadd>
 8008f1a:	4607      	mov	r7, r0
 8008f1c:	10ad      	asrs	r5, r5, #2
 8008f1e:	d03d      	beq.n	8008f9c <__pow5mult+0xa0>
 8008f20:	69f4      	ldr	r4, [r6, #28]
 8008f22:	b97c      	cbnz	r4, 8008f44 <__pow5mult+0x48>
 8008f24:	2010      	movs	r0, #16
 8008f26:	f7ff fcd1 	bl	80088cc <malloc>
 8008f2a:	4602      	mov	r2, r0
 8008f2c:	61f0      	str	r0, [r6, #28]
 8008f2e:	b928      	cbnz	r0, 8008f3c <__pow5mult+0x40>
 8008f30:	4b1d      	ldr	r3, [pc, #116]	; (8008fa8 <__pow5mult+0xac>)
 8008f32:	481e      	ldr	r0, [pc, #120]	; (8008fac <__pow5mult+0xb0>)
 8008f34:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008f38:	f000 fb66 	bl	8009608 <__assert_func>
 8008f3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008f40:	6004      	str	r4, [r0, #0]
 8008f42:	60c4      	str	r4, [r0, #12]
 8008f44:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008f48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008f4c:	b94c      	cbnz	r4, 8008f62 <__pow5mult+0x66>
 8008f4e:	f240 2171 	movw	r1, #625	; 0x271
 8008f52:	4630      	mov	r0, r6
 8008f54:	f7ff ff12 	bl	8008d7c <__i2b>
 8008f58:	2300      	movs	r3, #0
 8008f5a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008f5e:	4604      	mov	r4, r0
 8008f60:	6003      	str	r3, [r0, #0]
 8008f62:	f04f 0900 	mov.w	r9, #0
 8008f66:	07eb      	lsls	r3, r5, #31
 8008f68:	d50a      	bpl.n	8008f80 <__pow5mult+0x84>
 8008f6a:	4639      	mov	r1, r7
 8008f6c:	4622      	mov	r2, r4
 8008f6e:	4630      	mov	r0, r6
 8008f70:	f7ff ff1a 	bl	8008da8 <__multiply>
 8008f74:	4639      	mov	r1, r7
 8008f76:	4680      	mov	r8, r0
 8008f78:	4630      	mov	r0, r6
 8008f7a:	f7ff fe49 	bl	8008c10 <_Bfree>
 8008f7e:	4647      	mov	r7, r8
 8008f80:	106d      	asrs	r5, r5, #1
 8008f82:	d00b      	beq.n	8008f9c <__pow5mult+0xa0>
 8008f84:	6820      	ldr	r0, [r4, #0]
 8008f86:	b938      	cbnz	r0, 8008f98 <__pow5mult+0x9c>
 8008f88:	4622      	mov	r2, r4
 8008f8a:	4621      	mov	r1, r4
 8008f8c:	4630      	mov	r0, r6
 8008f8e:	f7ff ff0b 	bl	8008da8 <__multiply>
 8008f92:	6020      	str	r0, [r4, #0]
 8008f94:	f8c0 9000 	str.w	r9, [r0]
 8008f98:	4604      	mov	r4, r0
 8008f9a:	e7e4      	b.n	8008f66 <__pow5mult+0x6a>
 8008f9c:	4638      	mov	r0, r7
 8008f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fa2:	bf00      	nop
 8008fa4:	08009e20 	.word	0x08009e20
 8008fa8:	08009c45 	.word	0x08009c45
 8008fac:	08009cd6 	.word	0x08009cd6

08008fb0 <__lshift>:
 8008fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fb4:	460c      	mov	r4, r1
 8008fb6:	6849      	ldr	r1, [r1, #4]
 8008fb8:	6923      	ldr	r3, [r4, #16]
 8008fba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008fbe:	68a3      	ldr	r3, [r4, #8]
 8008fc0:	4607      	mov	r7, r0
 8008fc2:	4691      	mov	r9, r2
 8008fc4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008fc8:	f108 0601 	add.w	r6, r8, #1
 8008fcc:	42b3      	cmp	r3, r6
 8008fce:	db0b      	blt.n	8008fe8 <__lshift+0x38>
 8008fd0:	4638      	mov	r0, r7
 8008fd2:	f7ff fddd 	bl	8008b90 <_Balloc>
 8008fd6:	4605      	mov	r5, r0
 8008fd8:	b948      	cbnz	r0, 8008fee <__lshift+0x3e>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	4b28      	ldr	r3, [pc, #160]	; (8009080 <__lshift+0xd0>)
 8008fde:	4829      	ldr	r0, [pc, #164]	; (8009084 <__lshift+0xd4>)
 8008fe0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008fe4:	f000 fb10 	bl	8009608 <__assert_func>
 8008fe8:	3101      	adds	r1, #1
 8008fea:	005b      	lsls	r3, r3, #1
 8008fec:	e7ee      	b.n	8008fcc <__lshift+0x1c>
 8008fee:	2300      	movs	r3, #0
 8008ff0:	f100 0114 	add.w	r1, r0, #20
 8008ff4:	f100 0210 	add.w	r2, r0, #16
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	4553      	cmp	r3, sl
 8008ffc:	db33      	blt.n	8009066 <__lshift+0xb6>
 8008ffe:	6920      	ldr	r0, [r4, #16]
 8009000:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009004:	f104 0314 	add.w	r3, r4, #20
 8009008:	f019 091f 	ands.w	r9, r9, #31
 800900c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009010:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009014:	d02b      	beq.n	800906e <__lshift+0xbe>
 8009016:	f1c9 0e20 	rsb	lr, r9, #32
 800901a:	468a      	mov	sl, r1
 800901c:	2200      	movs	r2, #0
 800901e:	6818      	ldr	r0, [r3, #0]
 8009020:	fa00 f009 	lsl.w	r0, r0, r9
 8009024:	4310      	orrs	r0, r2
 8009026:	f84a 0b04 	str.w	r0, [sl], #4
 800902a:	f853 2b04 	ldr.w	r2, [r3], #4
 800902e:	459c      	cmp	ip, r3
 8009030:	fa22 f20e 	lsr.w	r2, r2, lr
 8009034:	d8f3      	bhi.n	800901e <__lshift+0x6e>
 8009036:	ebac 0304 	sub.w	r3, ip, r4
 800903a:	3b15      	subs	r3, #21
 800903c:	f023 0303 	bic.w	r3, r3, #3
 8009040:	3304      	adds	r3, #4
 8009042:	f104 0015 	add.w	r0, r4, #21
 8009046:	4584      	cmp	ip, r0
 8009048:	bf38      	it	cc
 800904a:	2304      	movcc	r3, #4
 800904c:	50ca      	str	r2, [r1, r3]
 800904e:	b10a      	cbz	r2, 8009054 <__lshift+0xa4>
 8009050:	f108 0602 	add.w	r6, r8, #2
 8009054:	3e01      	subs	r6, #1
 8009056:	4638      	mov	r0, r7
 8009058:	612e      	str	r6, [r5, #16]
 800905a:	4621      	mov	r1, r4
 800905c:	f7ff fdd8 	bl	8008c10 <_Bfree>
 8009060:	4628      	mov	r0, r5
 8009062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009066:	f842 0f04 	str.w	r0, [r2, #4]!
 800906a:	3301      	adds	r3, #1
 800906c:	e7c5      	b.n	8008ffa <__lshift+0x4a>
 800906e:	3904      	subs	r1, #4
 8009070:	f853 2b04 	ldr.w	r2, [r3], #4
 8009074:	f841 2f04 	str.w	r2, [r1, #4]!
 8009078:	459c      	cmp	ip, r3
 800907a:	d8f9      	bhi.n	8009070 <__lshift+0xc0>
 800907c:	e7ea      	b.n	8009054 <__lshift+0xa4>
 800907e:	bf00      	nop
 8009080:	08009cb4 	.word	0x08009cb4
 8009084:	08009cd6 	.word	0x08009cd6

08009088 <__mcmp>:
 8009088:	b530      	push	{r4, r5, lr}
 800908a:	6902      	ldr	r2, [r0, #16]
 800908c:	690c      	ldr	r4, [r1, #16]
 800908e:	1b12      	subs	r2, r2, r4
 8009090:	d10e      	bne.n	80090b0 <__mcmp+0x28>
 8009092:	f100 0314 	add.w	r3, r0, #20
 8009096:	3114      	adds	r1, #20
 8009098:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800909c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80090a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80090a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80090a8:	42a5      	cmp	r5, r4
 80090aa:	d003      	beq.n	80090b4 <__mcmp+0x2c>
 80090ac:	d305      	bcc.n	80090ba <__mcmp+0x32>
 80090ae:	2201      	movs	r2, #1
 80090b0:	4610      	mov	r0, r2
 80090b2:	bd30      	pop	{r4, r5, pc}
 80090b4:	4283      	cmp	r3, r0
 80090b6:	d3f3      	bcc.n	80090a0 <__mcmp+0x18>
 80090b8:	e7fa      	b.n	80090b0 <__mcmp+0x28>
 80090ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80090be:	e7f7      	b.n	80090b0 <__mcmp+0x28>

080090c0 <__mdiff>:
 80090c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c4:	460c      	mov	r4, r1
 80090c6:	4606      	mov	r6, r0
 80090c8:	4611      	mov	r1, r2
 80090ca:	4620      	mov	r0, r4
 80090cc:	4690      	mov	r8, r2
 80090ce:	f7ff ffdb 	bl	8009088 <__mcmp>
 80090d2:	1e05      	subs	r5, r0, #0
 80090d4:	d110      	bne.n	80090f8 <__mdiff+0x38>
 80090d6:	4629      	mov	r1, r5
 80090d8:	4630      	mov	r0, r6
 80090da:	f7ff fd59 	bl	8008b90 <_Balloc>
 80090de:	b930      	cbnz	r0, 80090ee <__mdiff+0x2e>
 80090e0:	4b3a      	ldr	r3, [pc, #232]	; (80091cc <__mdiff+0x10c>)
 80090e2:	4602      	mov	r2, r0
 80090e4:	f240 2137 	movw	r1, #567	; 0x237
 80090e8:	4839      	ldr	r0, [pc, #228]	; (80091d0 <__mdiff+0x110>)
 80090ea:	f000 fa8d 	bl	8009608 <__assert_func>
 80090ee:	2301      	movs	r3, #1
 80090f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80090f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090f8:	bfa4      	itt	ge
 80090fa:	4643      	movge	r3, r8
 80090fc:	46a0      	movge	r8, r4
 80090fe:	4630      	mov	r0, r6
 8009100:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009104:	bfa6      	itte	ge
 8009106:	461c      	movge	r4, r3
 8009108:	2500      	movge	r5, #0
 800910a:	2501      	movlt	r5, #1
 800910c:	f7ff fd40 	bl	8008b90 <_Balloc>
 8009110:	b920      	cbnz	r0, 800911c <__mdiff+0x5c>
 8009112:	4b2e      	ldr	r3, [pc, #184]	; (80091cc <__mdiff+0x10c>)
 8009114:	4602      	mov	r2, r0
 8009116:	f240 2145 	movw	r1, #581	; 0x245
 800911a:	e7e5      	b.n	80090e8 <__mdiff+0x28>
 800911c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009120:	6926      	ldr	r6, [r4, #16]
 8009122:	60c5      	str	r5, [r0, #12]
 8009124:	f104 0914 	add.w	r9, r4, #20
 8009128:	f108 0514 	add.w	r5, r8, #20
 800912c:	f100 0e14 	add.w	lr, r0, #20
 8009130:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009134:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009138:	f108 0210 	add.w	r2, r8, #16
 800913c:	46f2      	mov	sl, lr
 800913e:	2100      	movs	r1, #0
 8009140:	f859 3b04 	ldr.w	r3, [r9], #4
 8009144:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009148:	fa11 f88b 	uxtah	r8, r1, fp
 800914c:	b299      	uxth	r1, r3
 800914e:	0c1b      	lsrs	r3, r3, #16
 8009150:	eba8 0801 	sub.w	r8, r8, r1
 8009154:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009158:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800915c:	fa1f f888 	uxth.w	r8, r8
 8009160:	1419      	asrs	r1, r3, #16
 8009162:	454e      	cmp	r6, r9
 8009164:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009168:	f84a 3b04 	str.w	r3, [sl], #4
 800916c:	d8e8      	bhi.n	8009140 <__mdiff+0x80>
 800916e:	1b33      	subs	r3, r6, r4
 8009170:	3b15      	subs	r3, #21
 8009172:	f023 0303 	bic.w	r3, r3, #3
 8009176:	3304      	adds	r3, #4
 8009178:	3415      	adds	r4, #21
 800917a:	42a6      	cmp	r6, r4
 800917c:	bf38      	it	cc
 800917e:	2304      	movcc	r3, #4
 8009180:	441d      	add	r5, r3
 8009182:	4473      	add	r3, lr
 8009184:	469e      	mov	lr, r3
 8009186:	462e      	mov	r6, r5
 8009188:	4566      	cmp	r6, ip
 800918a:	d30e      	bcc.n	80091aa <__mdiff+0xea>
 800918c:	f10c 0203 	add.w	r2, ip, #3
 8009190:	1b52      	subs	r2, r2, r5
 8009192:	f022 0203 	bic.w	r2, r2, #3
 8009196:	3d03      	subs	r5, #3
 8009198:	45ac      	cmp	ip, r5
 800919a:	bf38      	it	cc
 800919c:	2200      	movcc	r2, #0
 800919e:	4413      	add	r3, r2
 80091a0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80091a4:	b17a      	cbz	r2, 80091c6 <__mdiff+0x106>
 80091a6:	6107      	str	r7, [r0, #16]
 80091a8:	e7a4      	b.n	80090f4 <__mdiff+0x34>
 80091aa:	f856 8b04 	ldr.w	r8, [r6], #4
 80091ae:	fa11 f288 	uxtah	r2, r1, r8
 80091b2:	1414      	asrs	r4, r2, #16
 80091b4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80091b8:	b292      	uxth	r2, r2
 80091ba:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80091be:	f84e 2b04 	str.w	r2, [lr], #4
 80091c2:	1421      	asrs	r1, r4, #16
 80091c4:	e7e0      	b.n	8009188 <__mdiff+0xc8>
 80091c6:	3f01      	subs	r7, #1
 80091c8:	e7ea      	b.n	80091a0 <__mdiff+0xe0>
 80091ca:	bf00      	nop
 80091cc:	08009cb4 	.word	0x08009cb4
 80091d0:	08009cd6 	.word	0x08009cd6

080091d4 <__d2b>:
 80091d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80091d8:	460f      	mov	r7, r1
 80091da:	2101      	movs	r1, #1
 80091dc:	ec59 8b10 	vmov	r8, r9, d0
 80091e0:	4616      	mov	r6, r2
 80091e2:	f7ff fcd5 	bl	8008b90 <_Balloc>
 80091e6:	4604      	mov	r4, r0
 80091e8:	b930      	cbnz	r0, 80091f8 <__d2b+0x24>
 80091ea:	4602      	mov	r2, r0
 80091ec:	4b24      	ldr	r3, [pc, #144]	; (8009280 <__d2b+0xac>)
 80091ee:	4825      	ldr	r0, [pc, #148]	; (8009284 <__d2b+0xb0>)
 80091f0:	f240 310f 	movw	r1, #783	; 0x30f
 80091f4:	f000 fa08 	bl	8009608 <__assert_func>
 80091f8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80091fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009200:	bb2d      	cbnz	r5, 800924e <__d2b+0x7a>
 8009202:	9301      	str	r3, [sp, #4]
 8009204:	f1b8 0300 	subs.w	r3, r8, #0
 8009208:	d026      	beq.n	8009258 <__d2b+0x84>
 800920a:	4668      	mov	r0, sp
 800920c:	9300      	str	r3, [sp, #0]
 800920e:	f7ff fd87 	bl	8008d20 <__lo0bits>
 8009212:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009216:	b1e8      	cbz	r0, 8009254 <__d2b+0x80>
 8009218:	f1c0 0320 	rsb	r3, r0, #32
 800921c:	fa02 f303 	lsl.w	r3, r2, r3
 8009220:	430b      	orrs	r3, r1
 8009222:	40c2      	lsrs	r2, r0
 8009224:	6163      	str	r3, [r4, #20]
 8009226:	9201      	str	r2, [sp, #4]
 8009228:	9b01      	ldr	r3, [sp, #4]
 800922a:	61a3      	str	r3, [r4, #24]
 800922c:	2b00      	cmp	r3, #0
 800922e:	bf14      	ite	ne
 8009230:	2202      	movne	r2, #2
 8009232:	2201      	moveq	r2, #1
 8009234:	6122      	str	r2, [r4, #16]
 8009236:	b1bd      	cbz	r5, 8009268 <__d2b+0x94>
 8009238:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800923c:	4405      	add	r5, r0
 800923e:	603d      	str	r5, [r7, #0]
 8009240:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009244:	6030      	str	r0, [r6, #0]
 8009246:	4620      	mov	r0, r4
 8009248:	b003      	add	sp, #12
 800924a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800924e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009252:	e7d6      	b.n	8009202 <__d2b+0x2e>
 8009254:	6161      	str	r1, [r4, #20]
 8009256:	e7e7      	b.n	8009228 <__d2b+0x54>
 8009258:	a801      	add	r0, sp, #4
 800925a:	f7ff fd61 	bl	8008d20 <__lo0bits>
 800925e:	9b01      	ldr	r3, [sp, #4]
 8009260:	6163      	str	r3, [r4, #20]
 8009262:	3020      	adds	r0, #32
 8009264:	2201      	movs	r2, #1
 8009266:	e7e5      	b.n	8009234 <__d2b+0x60>
 8009268:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800926c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009270:	6038      	str	r0, [r7, #0]
 8009272:	6918      	ldr	r0, [r3, #16]
 8009274:	f7ff fd34 	bl	8008ce0 <__hi0bits>
 8009278:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800927c:	e7e2      	b.n	8009244 <__d2b+0x70>
 800927e:	bf00      	nop
 8009280:	08009cb4 	.word	0x08009cb4
 8009284:	08009cd6 	.word	0x08009cd6

08009288 <__sread>:
 8009288:	b510      	push	{r4, lr}
 800928a:	460c      	mov	r4, r1
 800928c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009290:	f000 f978 	bl	8009584 <_read_r>
 8009294:	2800      	cmp	r0, #0
 8009296:	bfab      	itete	ge
 8009298:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800929a:	89a3      	ldrhlt	r3, [r4, #12]
 800929c:	181b      	addge	r3, r3, r0
 800929e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80092a2:	bfac      	ite	ge
 80092a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80092a6:	81a3      	strhlt	r3, [r4, #12]
 80092a8:	bd10      	pop	{r4, pc}

080092aa <__swrite>:
 80092aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092ae:	461f      	mov	r7, r3
 80092b0:	898b      	ldrh	r3, [r1, #12]
 80092b2:	05db      	lsls	r3, r3, #23
 80092b4:	4605      	mov	r5, r0
 80092b6:	460c      	mov	r4, r1
 80092b8:	4616      	mov	r6, r2
 80092ba:	d505      	bpl.n	80092c8 <__swrite+0x1e>
 80092bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092c0:	2302      	movs	r3, #2
 80092c2:	2200      	movs	r2, #0
 80092c4:	f000 f94c 	bl	8009560 <_lseek_r>
 80092c8:	89a3      	ldrh	r3, [r4, #12]
 80092ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80092d2:	81a3      	strh	r3, [r4, #12]
 80092d4:	4632      	mov	r2, r6
 80092d6:	463b      	mov	r3, r7
 80092d8:	4628      	mov	r0, r5
 80092da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092de:	f000 b973 	b.w	80095c8 <_write_r>

080092e2 <__sseek>:
 80092e2:	b510      	push	{r4, lr}
 80092e4:	460c      	mov	r4, r1
 80092e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092ea:	f000 f939 	bl	8009560 <_lseek_r>
 80092ee:	1c43      	adds	r3, r0, #1
 80092f0:	89a3      	ldrh	r3, [r4, #12]
 80092f2:	bf15      	itete	ne
 80092f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80092f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80092fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80092fe:	81a3      	strheq	r3, [r4, #12]
 8009300:	bf18      	it	ne
 8009302:	81a3      	strhne	r3, [r4, #12]
 8009304:	bd10      	pop	{r4, pc}

08009306 <__sclose>:
 8009306:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800930a:	f000 b8f7 	b.w	80094fc <_close_r>

0800930e <__swbuf_r>:
 800930e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009310:	460e      	mov	r6, r1
 8009312:	4614      	mov	r4, r2
 8009314:	4605      	mov	r5, r0
 8009316:	b118      	cbz	r0, 8009320 <__swbuf_r+0x12>
 8009318:	6a03      	ldr	r3, [r0, #32]
 800931a:	b90b      	cbnz	r3, 8009320 <__swbuf_r+0x12>
 800931c:	f7fe fa38 	bl	8007790 <__sinit>
 8009320:	69a3      	ldr	r3, [r4, #24]
 8009322:	60a3      	str	r3, [r4, #8]
 8009324:	89a3      	ldrh	r3, [r4, #12]
 8009326:	071a      	lsls	r2, r3, #28
 8009328:	d525      	bpl.n	8009376 <__swbuf_r+0x68>
 800932a:	6923      	ldr	r3, [r4, #16]
 800932c:	b31b      	cbz	r3, 8009376 <__swbuf_r+0x68>
 800932e:	6823      	ldr	r3, [r4, #0]
 8009330:	6922      	ldr	r2, [r4, #16]
 8009332:	1a98      	subs	r0, r3, r2
 8009334:	6963      	ldr	r3, [r4, #20]
 8009336:	b2f6      	uxtb	r6, r6
 8009338:	4283      	cmp	r3, r0
 800933a:	4637      	mov	r7, r6
 800933c:	dc04      	bgt.n	8009348 <__swbuf_r+0x3a>
 800933e:	4621      	mov	r1, r4
 8009340:	4628      	mov	r0, r5
 8009342:	f7ff fbf1 	bl	8008b28 <_fflush_r>
 8009346:	b9e0      	cbnz	r0, 8009382 <__swbuf_r+0x74>
 8009348:	68a3      	ldr	r3, [r4, #8]
 800934a:	3b01      	subs	r3, #1
 800934c:	60a3      	str	r3, [r4, #8]
 800934e:	6823      	ldr	r3, [r4, #0]
 8009350:	1c5a      	adds	r2, r3, #1
 8009352:	6022      	str	r2, [r4, #0]
 8009354:	701e      	strb	r6, [r3, #0]
 8009356:	6962      	ldr	r2, [r4, #20]
 8009358:	1c43      	adds	r3, r0, #1
 800935a:	429a      	cmp	r2, r3
 800935c:	d004      	beq.n	8009368 <__swbuf_r+0x5a>
 800935e:	89a3      	ldrh	r3, [r4, #12]
 8009360:	07db      	lsls	r3, r3, #31
 8009362:	d506      	bpl.n	8009372 <__swbuf_r+0x64>
 8009364:	2e0a      	cmp	r6, #10
 8009366:	d104      	bne.n	8009372 <__swbuf_r+0x64>
 8009368:	4621      	mov	r1, r4
 800936a:	4628      	mov	r0, r5
 800936c:	f7ff fbdc 	bl	8008b28 <_fflush_r>
 8009370:	b938      	cbnz	r0, 8009382 <__swbuf_r+0x74>
 8009372:	4638      	mov	r0, r7
 8009374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009376:	4621      	mov	r1, r4
 8009378:	4628      	mov	r0, r5
 800937a:	f000 f805 	bl	8009388 <__swsetup_r>
 800937e:	2800      	cmp	r0, #0
 8009380:	d0d5      	beq.n	800932e <__swbuf_r+0x20>
 8009382:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009386:	e7f4      	b.n	8009372 <__swbuf_r+0x64>

08009388 <__swsetup_r>:
 8009388:	b538      	push	{r3, r4, r5, lr}
 800938a:	4b2a      	ldr	r3, [pc, #168]	; (8009434 <__swsetup_r+0xac>)
 800938c:	4605      	mov	r5, r0
 800938e:	6818      	ldr	r0, [r3, #0]
 8009390:	460c      	mov	r4, r1
 8009392:	b118      	cbz	r0, 800939c <__swsetup_r+0x14>
 8009394:	6a03      	ldr	r3, [r0, #32]
 8009396:	b90b      	cbnz	r3, 800939c <__swsetup_r+0x14>
 8009398:	f7fe f9fa 	bl	8007790 <__sinit>
 800939c:	89a3      	ldrh	r3, [r4, #12]
 800939e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093a2:	0718      	lsls	r0, r3, #28
 80093a4:	d422      	bmi.n	80093ec <__swsetup_r+0x64>
 80093a6:	06d9      	lsls	r1, r3, #27
 80093a8:	d407      	bmi.n	80093ba <__swsetup_r+0x32>
 80093aa:	2309      	movs	r3, #9
 80093ac:	602b      	str	r3, [r5, #0]
 80093ae:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80093b2:	81a3      	strh	r3, [r4, #12]
 80093b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093b8:	e034      	b.n	8009424 <__swsetup_r+0x9c>
 80093ba:	0758      	lsls	r0, r3, #29
 80093bc:	d512      	bpl.n	80093e4 <__swsetup_r+0x5c>
 80093be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093c0:	b141      	cbz	r1, 80093d4 <__swsetup_r+0x4c>
 80093c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093c6:	4299      	cmp	r1, r3
 80093c8:	d002      	beq.n	80093d0 <__swsetup_r+0x48>
 80093ca:	4628      	mov	r0, r5
 80093cc:	f000 f950 	bl	8009670 <_free_r>
 80093d0:	2300      	movs	r3, #0
 80093d2:	6363      	str	r3, [r4, #52]	; 0x34
 80093d4:	89a3      	ldrh	r3, [r4, #12]
 80093d6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80093da:	81a3      	strh	r3, [r4, #12]
 80093dc:	2300      	movs	r3, #0
 80093de:	6063      	str	r3, [r4, #4]
 80093e0:	6923      	ldr	r3, [r4, #16]
 80093e2:	6023      	str	r3, [r4, #0]
 80093e4:	89a3      	ldrh	r3, [r4, #12]
 80093e6:	f043 0308 	orr.w	r3, r3, #8
 80093ea:	81a3      	strh	r3, [r4, #12]
 80093ec:	6923      	ldr	r3, [r4, #16]
 80093ee:	b94b      	cbnz	r3, 8009404 <__swsetup_r+0x7c>
 80093f0:	89a3      	ldrh	r3, [r4, #12]
 80093f2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80093f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093fa:	d003      	beq.n	8009404 <__swsetup_r+0x7c>
 80093fc:	4621      	mov	r1, r4
 80093fe:	4628      	mov	r0, r5
 8009400:	f000 f840 	bl	8009484 <__smakebuf_r>
 8009404:	89a0      	ldrh	r0, [r4, #12]
 8009406:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800940a:	f010 0301 	ands.w	r3, r0, #1
 800940e:	d00a      	beq.n	8009426 <__swsetup_r+0x9e>
 8009410:	2300      	movs	r3, #0
 8009412:	60a3      	str	r3, [r4, #8]
 8009414:	6963      	ldr	r3, [r4, #20]
 8009416:	425b      	negs	r3, r3
 8009418:	61a3      	str	r3, [r4, #24]
 800941a:	6923      	ldr	r3, [r4, #16]
 800941c:	b943      	cbnz	r3, 8009430 <__swsetup_r+0xa8>
 800941e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009422:	d1c4      	bne.n	80093ae <__swsetup_r+0x26>
 8009424:	bd38      	pop	{r3, r4, r5, pc}
 8009426:	0781      	lsls	r1, r0, #30
 8009428:	bf58      	it	pl
 800942a:	6963      	ldrpl	r3, [r4, #20]
 800942c:	60a3      	str	r3, [r4, #8]
 800942e:	e7f4      	b.n	800941a <__swsetup_r+0x92>
 8009430:	2000      	movs	r0, #0
 8009432:	e7f7      	b.n	8009424 <__swsetup_r+0x9c>
 8009434:	20000068 	.word	0x20000068

08009438 <__swhatbuf_r>:
 8009438:	b570      	push	{r4, r5, r6, lr}
 800943a:	460c      	mov	r4, r1
 800943c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009440:	2900      	cmp	r1, #0
 8009442:	b096      	sub	sp, #88	; 0x58
 8009444:	4615      	mov	r5, r2
 8009446:	461e      	mov	r6, r3
 8009448:	da0d      	bge.n	8009466 <__swhatbuf_r+0x2e>
 800944a:	89a3      	ldrh	r3, [r4, #12]
 800944c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009450:	f04f 0100 	mov.w	r1, #0
 8009454:	bf0c      	ite	eq
 8009456:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800945a:	2340      	movne	r3, #64	; 0x40
 800945c:	2000      	movs	r0, #0
 800945e:	6031      	str	r1, [r6, #0]
 8009460:	602b      	str	r3, [r5, #0]
 8009462:	b016      	add	sp, #88	; 0x58
 8009464:	bd70      	pop	{r4, r5, r6, pc}
 8009466:	466a      	mov	r2, sp
 8009468:	f000 f858 	bl	800951c <_fstat_r>
 800946c:	2800      	cmp	r0, #0
 800946e:	dbec      	blt.n	800944a <__swhatbuf_r+0x12>
 8009470:	9901      	ldr	r1, [sp, #4]
 8009472:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009476:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800947a:	4259      	negs	r1, r3
 800947c:	4159      	adcs	r1, r3
 800947e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009482:	e7eb      	b.n	800945c <__swhatbuf_r+0x24>

08009484 <__smakebuf_r>:
 8009484:	898b      	ldrh	r3, [r1, #12]
 8009486:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009488:	079d      	lsls	r5, r3, #30
 800948a:	4606      	mov	r6, r0
 800948c:	460c      	mov	r4, r1
 800948e:	d507      	bpl.n	80094a0 <__smakebuf_r+0x1c>
 8009490:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009494:	6023      	str	r3, [r4, #0]
 8009496:	6123      	str	r3, [r4, #16]
 8009498:	2301      	movs	r3, #1
 800949a:	6163      	str	r3, [r4, #20]
 800949c:	b002      	add	sp, #8
 800949e:	bd70      	pop	{r4, r5, r6, pc}
 80094a0:	ab01      	add	r3, sp, #4
 80094a2:	466a      	mov	r2, sp
 80094a4:	f7ff ffc8 	bl	8009438 <__swhatbuf_r>
 80094a8:	9900      	ldr	r1, [sp, #0]
 80094aa:	4605      	mov	r5, r0
 80094ac:	4630      	mov	r0, r6
 80094ae:	f7ff fa35 	bl	800891c <_malloc_r>
 80094b2:	b948      	cbnz	r0, 80094c8 <__smakebuf_r+0x44>
 80094b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094b8:	059a      	lsls	r2, r3, #22
 80094ba:	d4ef      	bmi.n	800949c <__smakebuf_r+0x18>
 80094bc:	f023 0303 	bic.w	r3, r3, #3
 80094c0:	f043 0302 	orr.w	r3, r3, #2
 80094c4:	81a3      	strh	r3, [r4, #12]
 80094c6:	e7e3      	b.n	8009490 <__smakebuf_r+0xc>
 80094c8:	89a3      	ldrh	r3, [r4, #12]
 80094ca:	6020      	str	r0, [r4, #0]
 80094cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094d0:	81a3      	strh	r3, [r4, #12]
 80094d2:	9b00      	ldr	r3, [sp, #0]
 80094d4:	6163      	str	r3, [r4, #20]
 80094d6:	9b01      	ldr	r3, [sp, #4]
 80094d8:	6120      	str	r0, [r4, #16]
 80094da:	b15b      	cbz	r3, 80094f4 <__smakebuf_r+0x70>
 80094dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094e0:	4630      	mov	r0, r6
 80094e2:	f000 f82d 	bl	8009540 <_isatty_r>
 80094e6:	b128      	cbz	r0, 80094f4 <__smakebuf_r+0x70>
 80094e8:	89a3      	ldrh	r3, [r4, #12]
 80094ea:	f023 0303 	bic.w	r3, r3, #3
 80094ee:	f043 0301 	orr.w	r3, r3, #1
 80094f2:	81a3      	strh	r3, [r4, #12]
 80094f4:	89a3      	ldrh	r3, [r4, #12]
 80094f6:	431d      	orrs	r5, r3
 80094f8:	81a5      	strh	r5, [r4, #12]
 80094fa:	e7cf      	b.n	800949c <__smakebuf_r+0x18>

080094fc <_close_r>:
 80094fc:	b538      	push	{r3, r4, r5, lr}
 80094fe:	4d06      	ldr	r5, [pc, #24]	; (8009518 <_close_r+0x1c>)
 8009500:	2300      	movs	r3, #0
 8009502:	4604      	mov	r4, r0
 8009504:	4608      	mov	r0, r1
 8009506:	602b      	str	r3, [r5, #0]
 8009508:	f7f8 fccf 	bl	8001eaa <_close>
 800950c:	1c43      	adds	r3, r0, #1
 800950e:	d102      	bne.n	8009516 <_close_r+0x1a>
 8009510:	682b      	ldr	r3, [r5, #0]
 8009512:	b103      	cbz	r3, 8009516 <_close_r+0x1a>
 8009514:	6023      	str	r3, [r4, #0]
 8009516:	bd38      	pop	{r3, r4, r5, pc}
 8009518:	20000658 	.word	0x20000658

0800951c <_fstat_r>:
 800951c:	b538      	push	{r3, r4, r5, lr}
 800951e:	4d07      	ldr	r5, [pc, #28]	; (800953c <_fstat_r+0x20>)
 8009520:	2300      	movs	r3, #0
 8009522:	4604      	mov	r4, r0
 8009524:	4608      	mov	r0, r1
 8009526:	4611      	mov	r1, r2
 8009528:	602b      	str	r3, [r5, #0]
 800952a:	f7f8 fcca 	bl	8001ec2 <_fstat>
 800952e:	1c43      	adds	r3, r0, #1
 8009530:	d102      	bne.n	8009538 <_fstat_r+0x1c>
 8009532:	682b      	ldr	r3, [r5, #0]
 8009534:	b103      	cbz	r3, 8009538 <_fstat_r+0x1c>
 8009536:	6023      	str	r3, [r4, #0]
 8009538:	bd38      	pop	{r3, r4, r5, pc}
 800953a:	bf00      	nop
 800953c:	20000658 	.word	0x20000658

08009540 <_isatty_r>:
 8009540:	b538      	push	{r3, r4, r5, lr}
 8009542:	4d06      	ldr	r5, [pc, #24]	; (800955c <_isatty_r+0x1c>)
 8009544:	2300      	movs	r3, #0
 8009546:	4604      	mov	r4, r0
 8009548:	4608      	mov	r0, r1
 800954a:	602b      	str	r3, [r5, #0]
 800954c:	f7f8 fcc9 	bl	8001ee2 <_isatty>
 8009550:	1c43      	adds	r3, r0, #1
 8009552:	d102      	bne.n	800955a <_isatty_r+0x1a>
 8009554:	682b      	ldr	r3, [r5, #0]
 8009556:	b103      	cbz	r3, 800955a <_isatty_r+0x1a>
 8009558:	6023      	str	r3, [r4, #0]
 800955a:	bd38      	pop	{r3, r4, r5, pc}
 800955c:	20000658 	.word	0x20000658

08009560 <_lseek_r>:
 8009560:	b538      	push	{r3, r4, r5, lr}
 8009562:	4d07      	ldr	r5, [pc, #28]	; (8009580 <_lseek_r+0x20>)
 8009564:	4604      	mov	r4, r0
 8009566:	4608      	mov	r0, r1
 8009568:	4611      	mov	r1, r2
 800956a:	2200      	movs	r2, #0
 800956c:	602a      	str	r2, [r5, #0]
 800956e:	461a      	mov	r2, r3
 8009570:	f7f8 fcc2 	bl	8001ef8 <_lseek>
 8009574:	1c43      	adds	r3, r0, #1
 8009576:	d102      	bne.n	800957e <_lseek_r+0x1e>
 8009578:	682b      	ldr	r3, [r5, #0]
 800957a:	b103      	cbz	r3, 800957e <_lseek_r+0x1e>
 800957c:	6023      	str	r3, [r4, #0]
 800957e:	bd38      	pop	{r3, r4, r5, pc}
 8009580:	20000658 	.word	0x20000658

08009584 <_read_r>:
 8009584:	b538      	push	{r3, r4, r5, lr}
 8009586:	4d07      	ldr	r5, [pc, #28]	; (80095a4 <_read_r+0x20>)
 8009588:	4604      	mov	r4, r0
 800958a:	4608      	mov	r0, r1
 800958c:	4611      	mov	r1, r2
 800958e:	2200      	movs	r2, #0
 8009590:	602a      	str	r2, [r5, #0]
 8009592:	461a      	mov	r2, r3
 8009594:	f7f8 fc50 	bl	8001e38 <_read>
 8009598:	1c43      	adds	r3, r0, #1
 800959a:	d102      	bne.n	80095a2 <_read_r+0x1e>
 800959c:	682b      	ldr	r3, [r5, #0]
 800959e:	b103      	cbz	r3, 80095a2 <_read_r+0x1e>
 80095a0:	6023      	str	r3, [r4, #0]
 80095a2:	bd38      	pop	{r3, r4, r5, pc}
 80095a4:	20000658 	.word	0x20000658

080095a8 <_sbrk_r>:
 80095a8:	b538      	push	{r3, r4, r5, lr}
 80095aa:	4d06      	ldr	r5, [pc, #24]	; (80095c4 <_sbrk_r+0x1c>)
 80095ac:	2300      	movs	r3, #0
 80095ae:	4604      	mov	r4, r0
 80095b0:	4608      	mov	r0, r1
 80095b2:	602b      	str	r3, [r5, #0]
 80095b4:	f7f8 fcae 	bl	8001f14 <_sbrk>
 80095b8:	1c43      	adds	r3, r0, #1
 80095ba:	d102      	bne.n	80095c2 <_sbrk_r+0x1a>
 80095bc:	682b      	ldr	r3, [r5, #0]
 80095be:	b103      	cbz	r3, 80095c2 <_sbrk_r+0x1a>
 80095c0:	6023      	str	r3, [r4, #0]
 80095c2:	bd38      	pop	{r3, r4, r5, pc}
 80095c4:	20000658 	.word	0x20000658

080095c8 <_write_r>:
 80095c8:	b538      	push	{r3, r4, r5, lr}
 80095ca:	4d07      	ldr	r5, [pc, #28]	; (80095e8 <_write_r+0x20>)
 80095cc:	4604      	mov	r4, r0
 80095ce:	4608      	mov	r0, r1
 80095d0:	4611      	mov	r1, r2
 80095d2:	2200      	movs	r2, #0
 80095d4:	602a      	str	r2, [r5, #0]
 80095d6:	461a      	mov	r2, r3
 80095d8:	f7f8 fc4b 	bl	8001e72 <_write>
 80095dc:	1c43      	adds	r3, r0, #1
 80095de:	d102      	bne.n	80095e6 <_write_r+0x1e>
 80095e0:	682b      	ldr	r3, [r5, #0]
 80095e2:	b103      	cbz	r3, 80095e6 <_write_r+0x1e>
 80095e4:	6023      	str	r3, [r4, #0]
 80095e6:	bd38      	pop	{r3, r4, r5, pc}
 80095e8:	20000658 	.word	0x20000658

080095ec <memcpy>:
 80095ec:	440a      	add	r2, r1
 80095ee:	4291      	cmp	r1, r2
 80095f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80095f4:	d100      	bne.n	80095f8 <memcpy+0xc>
 80095f6:	4770      	bx	lr
 80095f8:	b510      	push	{r4, lr}
 80095fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009602:	4291      	cmp	r1, r2
 8009604:	d1f9      	bne.n	80095fa <memcpy+0xe>
 8009606:	bd10      	pop	{r4, pc}

08009608 <__assert_func>:
 8009608:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800960a:	4614      	mov	r4, r2
 800960c:	461a      	mov	r2, r3
 800960e:	4b09      	ldr	r3, [pc, #36]	; (8009634 <__assert_func+0x2c>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4605      	mov	r5, r0
 8009614:	68d8      	ldr	r0, [r3, #12]
 8009616:	b14c      	cbz	r4, 800962c <__assert_func+0x24>
 8009618:	4b07      	ldr	r3, [pc, #28]	; (8009638 <__assert_func+0x30>)
 800961a:	9100      	str	r1, [sp, #0]
 800961c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009620:	4906      	ldr	r1, [pc, #24]	; (800963c <__assert_func+0x34>)
 8009622:	462b      	mov	r3, r5
 8009624:	f000 f882 	bl	800972c <fiprintf>
 8009628:	f000 f89f 	bl	800976a <abort>
 800962c:	4b04      	ldr	r3, [pc, #16]	; (8009640 <__assert_func+0x38>)
 800962e:	461c      	mov	r4, r3
 8009630:	e7f3      	b.n	800961a <__assert_func+0x12>
 8009632:	bf00      	nop
 8009634:	20000068 	.word	0x20000068
 8009638:	08009f37 	.word	0x08009f37
 800963c:	08009f44 	.word	0x08009f44
 8009640:	08009f72 	.word	0x08009f72

08009644 <_calloc_r>:
 8009644:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009646:	fba1 2402 	umull	r2, r4, r1, r2
 800964a:	b94c      	cbnz	r4, 8009660 <_calloc_r+0x1c>
 800964c:	4611      	mov	r1, r2
 800964e:	9201      	str	r2, [sp, #4]
 8009650:	f7ff f964 	bl	800891c <_malloc_r>
 8009654:	9a01      	ldr	r2, [sp, #4]
 8009656:	4605      	mov	r5, r0
 8009658:	b930      	cbnz	r0, 8009668 <_calloc_r+0x24>
 800965a:	4628      	mov	r0, r5
 800965c:	b003      	add	sp, #12
 800965e:	bd30      	pop	{r4, r5, pc}
 8009660:	220c      	movs	r2, #12
 8009662:	6002      	str	r2, [r0, #0]
 8009664:	2500      	movs	r5, #0
 8009666:	e7f8      	b.n	800965a <_calloc_r+0x16>
 8009668:	4621      	mov	r1, r4
 800966a:	f7fe f935 	bl	80078d8 <memset>
 800966e:	e7f4      	b.n	800965a <_calloc_r+0x16>

08009670 <_free_r>:
 8009670:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009672:	2900      	cmp	r1, #0
 8009674:	d044      	beq.n	8009700 <_free_r+0x90>
 8009676:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800967a:	9001      	str	r0, [sp, #4]
 800967c:	2b00      	cmp	r3, #0
 800967e:	f1a1 0404 	sub.w	r4, r1, #4
 8009682:	bfb8      	it	lt
 8009684:	18e4      	addlt	r4, r4, r3
 8009686:	f7ff fa77 	bl	8008b78 <__malloc_lock>
 800968a:	4a1e      	ldr	r2, [pc, #120]	; (8009704 <_free_r+0x94>)
 800968c:	9801      	ldr	r0, [sp, #4]
 800968e:	6813      	ldr	r3, [r2, #0]
 8009690:	b933      	cbnz	r3, 80096a0 <_free_r+0x30>
 8009692:	6063      	str	r3, [r4, #4]
 8009694:	6014      	str	r4, [r2, #0]
 8009696:	b003      	add	sp, #12
 8009698:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800969c:	f7ff ba72 	b.w	8008b84 <__malloc_unlock>
 80096a0:	42a3      	cmp	r3, r4
 80096a2:	d908      	bls.n	80096b6 <_free_r+0x46>
 80096a4:	6825      	ldr	r5, [r4, #0]
 80096a6:	1961      	adds	r1, r4, r5
 80096a8:	428b      	cmp	r3, r1
 80096aa:	bf01      	itttt	eq
 80096ac:	6819      	ldreq	r1, [r3, #0]
 80096ae:	685b      	ldreq	r3, [r3, #4]
 80096b0:	1949      	addeq	r1, r1, r5
 80096b2:	6021      	streq	r1, [r4, #0]
 80096b4:	e7ed      	b.n	8009692 <_free_r+0x22>
 80096b6:	461a      	mov	r2, r3
 80096b8:	685b      	ldr	r3, [r3, #4]
 80096ba:	b10b      	cbz	r3, 80096c0 <_free_r+0x50>
 80096bc:	42a3      	cmp	r3, r4
 80096be:	d9fa      	bls.n	80096b6 <_free_r+0x46>
 80096c0:	6811      	ldr	r1, [r2, #0]
 80096c2:	1855      	adds	r5, r2, r1
 80096c4:	42a5      	cmp	r5, r4
 80096c6:	d10b      	bne.n	80096e0 <_free_r+0x70>
 80096c8:	6824      	ldr	r4, [r4, #0]
 80096ca:	4421      	add	r1, r4
 80096cc:	1854      	adds	r4, r2, r1
 80096ce:	42a3      	cmp	r3, r4
 80096d0:	6011      	str	r1, [r2, #0]
 80096d2:	d1e0      	bne.n	8009696 <_free_r+0x26>
 80096d4:	681c      	ldr	r4, [r3, #0]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	6053      	str	r3, [r2, #4]
 80096da:	440c      	add	r4, r1
 80096dc:	6014      	str	r4, [r2, #0]
 80096de:	e7da      	b.n	8009696 <_free_r+0x26>
 80096e0:	d902      	bls.n	80096e8 <_free_r+0x78>
 80096e2:	230c      	movs	r3, #12
 80096e4:	6003      	str	r3, [r0, #0]
 80096e6:	e7d6      	b.n	8009696 <_free_r+0x26>
 80096e8:	6825      	ldr	r5, [r4, #0]
 80096ea:	1961      	adds	r1, r4, r5
 80096ec:	428b      	cmp	r3, r1
 80096ee:	bf04      	itt	eq
 80096f0:	6819      	ldreq	r1, [r3, #0]
 80096f2:	685b      	ldreq	r3, [r3, #4]
 80096f4:	6063      	str	r3, [r4, #4]
 80096f6:	bf04      	itt	eq
 80096f8:	1949      	addeq	r1, r1, r5
 80096fa:	6021      	streq	r1, [r4, #0]
 80096fc:	6054      	str	r4, [r2, #4]
 80096fe:	e7ca      	b.n	8009696 <_free_r+0x26>
 8009700:	b003      	add	sp, #12
 8009702:	bd30      	pop	{r4, r5, pc}
 8009704:	20000650 	.word	0x20000650

08009708 <__ascii_mbtowc>:
 8009708:	b082      	sub	sp, #8
 800970a:	b901      	cbnz	r1, 800970e <__ascii_mbtowc+0x6>
 800970c:	a901      	add	r1, sp, #4
 800970e:	b142      	cbz	r2, 8009722 <__ascii_mbtowc+0x1a>
 8009710:	b14b      	cbz	r3, 8009726 <__ascii_mbtowc+0x1e>
 8009712:	7813      	ldrb	r3, [r2, #0]
 8009714:	600b      	str	r3, [r1, #0]
 8009716:	7812      	ldrb	r2, [r2, #0]
 8009718:	1e10      	subs	r0, r2, #0
 800971a:	bf18      	it	ne
 800971c:	2001      	movne	r0, #1
 800971e:	b002      	add	sp, #8
 8009720:	4770      	bx	lr
 8009722:	4610      	mov	r0, r2
 8009724:	e7fb      	b.n	800971e <__ascii_mbtowc+0x16>
 8009726:	f06f 0001 	mvn.w	r0, #1
 800972a:	e7f8      	b.n	800971e <__ascii_mbtowc+0x16>

0800972c <fiprintf>:
 800972c:	b40e      	push	{r1, r2, r3}
 800972e:	b503      	push	{r0, r1, lr}
 8009730:	4601      	mov	r1, r0
 8009732:	ab03      	add	r3, sp, #12
 8009734:	4805      	ldr	r0, [pc, #20]	; (800974c <fiprintf+0x20>)
 8009736:	f853 2b04 	ldr.w	r2, [r3], #4
 800973a:	6800      	ldr	r0, [r0, #0]
 800973c:	9301      	str	r3, [sp, #4]
 800973e:	f7fe ffab 	bl	8008698 <_vfiprintf_r>
 8009742:	b002      	add	sp, #8
 8009744:	f85d eb04 	ldr.w	lr, [sp], #4
 8009748:	b003      	add	sp, #12
 800974a:	4770      	bx	lr
 800974c:	20000068 	.word	0x20000068

08009750 <__ascii_wctomb>:
 8009750:	b149      	cbz	r1, 8009766 <__ascii_wctomb+0x16>
 8009752:	2aff      	cmp	r2, #255	; 0xff
 8009754:	bf85      	ittet	hi
 8009756:	238a      	movhi	r3, #138	; 0x8a
 8009758:	6003      	strhi	r3, [r0, #0]
 800975a:	700a      	strbls	r2, [r1, #0]
 800975c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009760:	bf98      	it	ls
 8009762:	2001      	movls	r0, #1
 8009764:	4770      	bx	lr
 8009766:	4608      	mov	r0, r1
 8009768:	4770      	bx	lr

0800976a <abort>:
 800976a:	b508      	push	{r3, lr}
 800976c:	2006      	movs	r0, #6
 800976e:	f000 f82b 	bl	80097c8 <raise>
 8009772:	2001      	movs	r0, #1
 8009774:	f7f8 fb56 	bl	8001e24 <_exit>

08009778 <_raise_r>:
 8009778:	291f      	cmp	r1, #31
 800977a:	b538      	push	{r3, r4, r5, lr}
 800977c:	4604      	mov	r4, r0
 800977e:	460d      	mov	r5, r1
 8009780:	d904      	bls.n	800978c <_raise_r+0x14>
 8009782:	2316      	movs	r3, #22
 8009784:	6003      	str	r3, [r0, #0]
 8009786:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800978a:	bd38      	pop	{r3, r4, r5, pc}
 800978c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800978e:	b112      	cbz	r2, 8009796 <_raise_r+0x1e>
 8009790:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009794:	b94b      	cbnz	r3, 80097aa <_raise_r+0x32>
 8009796:	4620      	mov	r0, r4
 8009798:	f000 f830 	bl	80097fc <_getpid_r>
 800979c:	462a      	mov	r2, r5
 800979e:	4601      	mov	r1, r0
 80097a0:	4620      	mov	r0, r4
 80097a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097a6:	f000 b817 	b.w	80097d8 <_kill_r>
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d00a      	beq.n	80097c4 <_raise_r+0x4c>
 80097ae:	1c59      	adds	r1, r3, #1
 80097b0:	d103      	bne.n	80097ba <_raise_r+0x42>
 80097b2:	2316      	movs	r3, #22
 80097b4:	6003      	str	r3, [r0, #0]
 80097b6:	2001      	movs	r0, #1
 80097b8:	e7e7      	b.n	800978a <_raise_r+0x12>
 80097ba:	2400      	movs	r4, #0
 80097bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80097c0:	4628      	mov	r0, r5
 80097c2:	4798      	blx	r3
 80097c4:	2000      	movs	r0, #0
 80097c6:	e7e0      	b.n	800978a <_raise_r+0x12>

080097c8 <raise>:
 80097c8:	4b02      	ldr	r3, [pc, #8]	; (80097d4 <raise+0xc>)
 80097ca:	4601      	mov	r1, r0
 80097cc:	6818      	ldr	r0, [r3, #0]
 80097ce:	f7ff bfd3 	b.w	8009778 <_raise_r>
 80097d2:	bf00      	nop
 80097d4:	20000068 	.word	0x20000068

080097d8 <_kill_r>:
 80097d8:	b538      	push	{r3, r4, r5, lr}
 80097da:	4d07      	ldr	r5, [pc, #28]	; (80097f8 <_kill_r+0x20>)
 80097dc:	2300      	movs	r3, #0
 80097de:	4604      	mov	r4, r0
 80097e0:	4608      	mov	r0, r1
 80097e2:	4611      	mov	r1, r2
 80097e4:	602b      	str	r3, [r5, #0]
 80097e6:	f7f8 fb0d 	bl	8001e04 <_kill>
 80097ea:	1c43      	adds	r3, r0, #1
 80097ec:	d102      	bne.n	80097f4 <_kill_r+0x1c>
 80097ee:	682b      	ldr	r3, [r5, #0]
 80097f0:	b103      	cbz	r3, 80097f4 <_kill_r+0x1c>
 80097f2:	6023      	str	r3, [r4, #0]
 80097f4:	bd38      	pop	{r3, r4, r5, pc}
 80097f6:	bf00      	nop
 80097f8:	20000658 	.word	0x20000658

080097fc <_getpid_r>:
 80097fc:	f7f8 bafa 	b.w	8001df4 <_getpid>

08009800 <_init>:
 8009800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009802:	bf00      	nop
 8009804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009806:	bc08      	pop	{r3}
 8009808:	469e      	mov	lr, r3
 800980a:	4770      	bx	lr

0800980c <_fini>:
 800980c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800980e:	bf00      	nop
 8009810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009812:	bc08      	pop	{r3}
 8009814:	469e      	mov	lr, r3
 8009816:	4770      	bx	lr
