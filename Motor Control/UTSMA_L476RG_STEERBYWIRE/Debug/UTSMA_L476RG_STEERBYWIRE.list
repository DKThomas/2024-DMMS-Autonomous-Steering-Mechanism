
UTSMA_L476RG_STEERBYWIRE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009390  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000072c  08009520  08009520  00019520  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c4c  08009c4c  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  08009c4c  08009c4c  00019c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c54  08009c54  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c54  08009c54  00019c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c58  08009c58  00019c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08009c5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000046c  200001d8  08009e34  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000644  08009e34  00020644  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016972  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ba2  00000000  00000000  00036bbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014e0  00000000  00000000  00039760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000104c  00000000  00000000  0003ac40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a295  00000000  00000000  0003bc8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016f58  00000000  00000000  00065f21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010aa94  00000000  00000000  0007ce79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006a78  00000000  00000000  00187910  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  0018e388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009508 	.word	0x08009508

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08009508 	.word	0x08009508

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <uint_to_float>:
	return (int) ((x - x_min) * ((float)((1 << bits) / span)));
}

// (p. 44)
// When receiving, convert all values to floating-point numbers using the following function:
float uint_to_float(int x_int, float x_min, float x_max, int bits) {
 8000ea4:	b480      	push	{r7}
 8000ea6:	b087      	sub	sp, #28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	ed87 0a02 	vstr	s0, [r7, #8]
 8000eb0:	edc7 0a01 	vstr	s1, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
	/// converts unsigned int to float, given range and number of bits ///
	float span = x_max - x_min;
 8000eb6:	ed97 7a01 	vldr	s14, [r7, #4]
 8000eba:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ebe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ec2:	edc7 7a05 	vstr	s15, [r7, #20]
	float offset = x_min;
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	613b      	str	r3, [r7, #16]
	return ((float)x_int) * span / ((float)((1 << bits) - 1)) + offset;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	ee07 3a90 	vmov	s15, r3
 8000ed0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ed4:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ed8:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000edc:	2201      	movs	r2, #1
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	3b01      	subs	r3, #1
 8000ee6:	ee07 3a90 	vmov	s15, r3
 8000eea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000ef2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ef6:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000efa:	eeb0 0a67 	vmov.f32	s0, s15
 8000efe:	371c      	adds	r7, #28
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <cubemars_get_can_cmd4debug>:
		*temperature = T;
		*error = (mc_fault_code)e_int;
	}
}

void cubemars_get_can_cmd4debug(uint8_t *RxData) {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08a      	sub	sp, #40	; 0x28
 8000f0c:	af02      	add	r7, sp, #8
 8000f0e:	6078      	str	r0, [r7, #4]
	// Print raw data
	print_raw_data(RxData);
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f000 f8cd 	bl	80010b0 <print_raw_data>

	// Define local variables
	float p_ref, v_ref, kp_ref, kd_ref, t_ref;

	// Unpack received message
	unpack_cmd4debug(RxData, &p_ref, &v_ref, &kp_ref, &kd_ref, &t_ref);
 8000f16:	f107 0014 	add.w	r0, r7, #20
 8000f1a:	f107 0218 	add.w	r2, r7, #24
 8000f1e:	f107 011c 	add.w	r1, r7, #28
 8000f22:	f107 030c 	add.w	r3, r7, #12
 8000f26:	9301      	str	r3, [sp, #4]
 8000f28:	f107 0310 	add.w	r3, r7, #16
 8000f2c:	9300      	str	r3, [sp, #0]
 8000f2e:	4603      	mov	r3, r0
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f000 f81b 	bl	8000f6c <unpack_cmd4debug>

	// Print data and fault description
	print_cmd4debug(p_ref, v_ref, kp_ref, kd_ref, t_ref);
 8000f36:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f3a:	ed97 7a06 	vldr	s14, [r7, #24]
 8000f3e:	edd7 6a05 	vldr	s13, [r7, #20]
 8000f42:	ed97 6a04 	vldr	s12, [r7, #16]
 8000f46:	edd7 5a03 	vldr	s11, [r7, #12]
 8000f4a:	eeb0 2a65 	vmov.f32	s4, s11
 8000f4e:	eef0 1a46 	vmov.f32	s3, s12
 8000f52:	eeb0 1a66 	vmov.f32	s2, s13
 8000f56:	eef0 0a47 	vmov.f32	s1, s14
 8000f5a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f5e:	f000 f8db 	bl	8001118 <print_cmd4debug>
}
 8000f62:	bf00      	nop
 8000f64:	3720      	adds	r7, #32
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <unpack_cmd4debug>:

void unpack_cmd4debug(uint8_t data[8], float *p_ref, float *v_ref, float *kp_ref, float *kd_ref, float *t_ref) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08e      	sub	sp, #56	; 0x38
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
 8000f78:	603b      	str	r3, [r7, #0]
	/// unpack ints from can buffer ///
	int p_int = (data[0] << 8) |  data[1]; 			// Motor Position Data
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	021b      	lsls	r3, r3, #8
 8000f80:	68fa      	ldr	r2, [r7, #12]
 8000f82:	3201      	adds	r2, #1
 8000f84:	7812      	ldrb	r2, [r2, #0]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	637b      	str	r3, [r7, #52]	; 0x34
	int v_int = (data[2] << 4) | (data[3]>>4); 		// Motor Speed Data
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	3302      	adds	r3, #2
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	011b      	lsls	r3, r3, #4
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	3203      	adds	r2, #3
 8000f96:	7812      	ldrb	r2, [r2, #0]
 8000f98:	0912      	lsrs	r2, r2, #4
 8000f9a:	b2d2      	uxtb	r2, r2
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	633b      	str	r3, [r7, #48]	; 0x30
	int kp_int = ((data[3] & 0xF) << 8) | data[4];	// Motor Torque Data
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	3303      	adds	r3, #3
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	021b      	lsls	r3, r3, #8
 8000fa8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000fac:	68fa      	ldr	r2, [r7, #12]
 8000fae:	3204      	adds	r2, #4
 8000fb0:	7812      	ldrb	r2, [r2, #0]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
	int kd_int = ((data[5] & 0xF) << 8) | data[6];	// Motor Temperature Data
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	3305      	adds	r3, #5
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	021b      	lsls	r3, r3, #8
 8000fbe:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	3206      	adds	r2, #6
 8000fc6:	7812      	ldrb	r2, [r2, #0]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	62bb      	str	r3, [r7, #40]	; 0x28
	int t_int = ((data[6] & 0xF) << 8) | data[7];	// Motor Error Code
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	3306      	adds	r3, #6
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	021b      	lsls	r3, r3, #8
 8000fd4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000fd8:	68fa      	ldr	r2, [r7, #12]
 8000fda:	3207      	adds	r2, #7
 8000fdc:	7812      	ldrb	r2, [r2, #0]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24

	/// convert ints to floats ///
	float p_des = uint_to_float( p_int,   P_MIN,  P_MAX, 16);
 8000fe2:	eefa 7a09 	vmov.f32	s15, #169	; 0xc1480000 -12.5
 8000fe6:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8000fea:	2110      	movs	r1, #16
 8000fec:	eef0 0a47 	vmov.f32	s1, s14
 8000ff0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ff4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000ff6:	f7ff ff55 	bl	8000ea4 <uint_to_float>
 8000ffa:	ed87 0a08 	vstr	s0, [r7, #32]
	float v_des = uint_to_float( v_int,   V_MIN,  V_MAX, 12);
 8000ffe:	eddf 7a28 	vldr	s15, [pc, #160]	; 80010a0 <unpack_cmd4debug+0x134>
 8001002:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80010a4 <unpack_cmd4debug+0x138>
 8001006:	210c      	movs	r1, #12
 8001008:	eef0 0a47 	vmov.f32	s1, s14
 800100c:	eeb0 0a67 	vmov.f32	s0, s15
 8001010:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001012:	f7ff ff47 	bl	8000ea4 <uint_to_float>
 8001016:	ed87 0a07 	vstr	s0, [r7, #28]
	float kp =    uint_to_float(kp_int, -KP_MIN, KP_MAX, 12);
 800101a:	eddf 7a23 	vldr	s15, [pc, #140]	; 80010a8 <unpack_cmd4debug+0x13c>
 800101e:	eef1 7a67 	vneg.f32	s15, s15
 8001022:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80010ac <unpack_cmd4debug+0x140>
 8001026:	210c      	movs	r1, #12
 8001028:	eef0 0a47 	vmov.f32	s1, s14
 800102c:	eeb0 0a67 	vmov.f32	s0, s15
 8001030:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001032:	f7ff ff37 	bl	8000ea4 <uint_to_float>
 8001036:	ed87 0a06 	vstr	s0, [r7, #24]
	float kd =    uint_to_float(kd_int, -KD_MIN, KD_MAX, 12);
 800103a:	eddf 7a1b 	vldr	s15, [pc, #108]	; 80010a8 <unpack_cmd4debug+0x13c>
 800103e:	eef1 7a67 	vneg.f32	s15, s15
 8001042:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001046:	210c      	movs	r1, #12
 8001048:	eef0 0a47 	vmov.f32	s1, s14
 800104c:	eeb0 0a67 	vmov.f32	s0, s15
 8001050:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001052:	f7ff ff27 	bl	8000ea4 <uint_to_float>
 8001056:	ed87 0a05 	vstr	s0, [r7, #20]
	float t_ff =  uint_to_float( t_int,  -T_MIN,  T_MAX, 12);
 800105a:	eefb 7a02 	vmov.f32	s15, #178	; 0xc1900000 -18.0
 800105e:	eef1 7a67 	vneg.f32	s15, s15
 8001062:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8001066:	210c      	movs	r1, #12
 8001068:	eef0 0a47 	vmov.f32	s1, s14
 800106c:	eeb0 0a67 	vmov.f32	s0, s15
 8001070:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001072:	f7ff ff17 	bl	8000ea4 <uint_to_float>
 8001076:	ed87 0a04 	vstr	s0, [r7, #16]

	// Read corresponding data
	*p_ref = p_des;
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	6a3a      	ldr	r2, [r7, #32]
 800107e:	601a      	str	r2, [r3, #0]
	*v_ref = v_des;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	69fa      	ldr	r2, [r7, #28]
 8001084:	601a      	str	r2, [r3, #0]
	*kp_ref = kp;
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	601a      	str	r2, [r3, #0]
	*kd_ref = kd;
 800108c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800108e:	697a      	ldr	r2, [r7, #20]
 8001090:	601a      	str	r2, [r3, #0]
	*t_ref = t_ff;
 8001092:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	601a      	str	r2, [r3, #0]
}
 8001098:	bf00      	nop
 800109a:	3738      	adds	r7, #56	; 0x38
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	c2480000 	.word	0xc2480000
 80010a4:	42480000 	.word	0x42480000
 80010a8:	00000000 	.word	0x00000000
 80010ac:	43fa0000 	.word	0x43fa0000

080010b0 <print_raw_data>:

void print_raw_data(uint8_t data[8]) {
 80010b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010b2:	b089      	sub	sp, #36	; 0x24
 80010b4:	af06      	add	r7, sp, #24
 80010b6:	6078      	str	r0, [r7, #4]
    printf("Raw Data: %d %d %d %d %d %d %d %d\n", data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7]);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	461d      	mov	r5, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	3301      	adds	r3, #1
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	461e      	mov	r6, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3302      	adds	r3, #2
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	469c      	mov	ip, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3303      	adds	r3, #3
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	461a      	mov	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3304      	adds	r3, #4
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	4619      	mov	r1, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	3305      	adds	r3, #5
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	4618      	mov	r0, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	3306      	adds	r3, #6
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	461c      	mov	r4, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	3307      	adds	r3, #7
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	9304      	str	r3, [sp, #16]
 80010f6:	9403      	str	r4, [sp, #12]
 80010f8:	9002      	str	r0, [sp, #8]
 80010fa:	9101      	str	r1, [sp, #4]
 80010fc:	9200      	str	r2, [sp, #0]
 80010fe:	4663      	mov	r3, ip
 8001100:	4632      	mov	r2, r6
 8001102:	4629      	mov	r1, r5
 8001104:	4803      	ldr	r0, [pc, #12]	; (8001114 <print_raw_data+0x64>)
 8001106:	f006 fa5b 	bl	80075c0 <iprintf>
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001112:	bf00      	nop
 8001114:	08009588 	.word	0x08009588

08001118 <print_cmd4debug>:

void print_motor_data(float position, float speed, float torque, float temperature) {
    printf("Position = %f, Speed = %f, Torque = %f, Temp = %f\n", position, speed, torque, temperature);
}

void print_cmd4debug(float p_ref, float v_ref, float kp_ref, float kd_ref, float t_ref) {
 8001118:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800111c:	b090      	sub	sp, #64	; 0x40
 800111e:	af08      	add	r7, sp, #32
 8001120:	ed87 0a07 	vstr	s0, [r7, #28]
 8001124:	edc7 0a06 	vstr	s1, [r7, #24]
 8001128:	ed87 1a05 	vstr	s2, [r7, #20]
 800112c:	edc7 1a04 	vstr	s3, [r7, #16]
 8001130:	ed87 2a03 	vstr	s4, [r7, #12]
    printf("CMD Received: p_des = %f, v_des = %f, kp = %f, kd = %f, t_ff = %f\n", p_ref, v_ref, kp_ref, kd_ref, t_ref);
 8001134:	69f8      	ldr	r0, [r7, #28]
 8001136:	f7ff fa07 	bl	8000548 <__aeabi_f2d>
 800113a:	e9c7 0100 	strd	r0, r1, [r7]
 800113e:	69b8      	ldr	r0, [r7, #24]
 8001140:	f7ff fa02 	bl	8000548 <__aeabi_f2d>
 8001144:	4604      	mov	r4, r0
 8001146:	460d      	mov	r5, r1
 8001148:	6978      	ldr	r0, [r7, #20]
 800114a:	f7ff f9fd 	bl	8000548 <__aeabi_f2d>
 800114e:	4680      	mov	r8, r0
 8001150:	4689      	mov	r9, r1
 8001152:	6938      	ldr	r0, [r7, #16]
 8001154:	f7ff f9f8 	bl	8000548 <__aeabi_f2d>
 8001158:	4682      	mov	sl, r0
 800115a:	468b      	mov	fp, r1
 800115c:	68f8      	ldr	r0, [r7, #12]
 800115e:	f7ff f9f3 	bl	8000548 <__aeabi_f2d>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800116a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800116e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001172:	e9cd 4500 	strd	r4, r5, [sp]
 8001176:	e9d7 2300 	ldrd	r2, r3, [r7]
 800117a:	4804      	ldr	r0, [pc, #16]	; (800118c <print_cmd4debug+0x74>)
 800117c:	f006 fa20 	bl	80075c0 <iprintf>
}
 8001180:	bf00      	nop
 8001182:	3720      	adds	r7, #32
 8001184:	46bd      	mov	sp, r7
 8001186:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800118a:	bf00      	nop
 800118c:	080095e0 	.word	0x080095e0

08001190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001194:	f001 f802 	bl	800219c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001198:	f000 f86e 	bl	8001278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800119c:	f000 fbce 	bl	800193c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011a0:	f000 fb9c 	bl	80018dc <MX_USART2_UART_Init>
  MX_CAN1_Init();
 80011a4:	f000 f9e4 	bl	8001570 <MX_CAN1_Init>
  MX_ADC1_Init();
 80011a8:	f000 f8b8 	bl	800131c <MX_ADC1_Init>
  MX_TIM2_Init();
 80011ac:	f000 fa16 	bl	80015dc <MX_TIM2_Init>
  MX_TIM3_Init();
 80011b0:	f000 fa68 	bl	8001684 <MX_TIM3_Init>
  MX_TIM4_Init();
 80011b4:	f000 fabc 	bl	8001730 <MX_TIM4_Init>
  MX_TIM8_Init();
 80011b8:	f000 fb10 	bl	80017dc <MX_TIM8_Init>
  MX_TIM16_Init();
 80011bc:	f000 fb68 	bl	8001890 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */


  sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 80011c0:	4b28      	ldr	r3, [pc, #160]	; (8001264 <main+0xd4>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	621a      	str	r2, [r3, #32]
  sFilterConfig.FilterBank = 10;  // anything between 0 to SlaveStartFilterBank
 80011c6:	4b27      	ldr	r3, [pc, #156]	; (8001264 <main+0xd4>)
 80011c8:	220a      	movs	r2, #10
 80011ca:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80011cc:	4b25      	ldr	r3, [pc, #148]	; (8001264 <main+0xd4>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterIdHigh = 0;
 80011d2:	4b24      	ldr	r3, [pc, #144]	; (8001264 <main+0xd4>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80011d8:	4b22      	ldr	r3, [pc, #136]	; (8001264 <main+0xd4>)
 80011da:	2200      	movs	r2, #0
 80011dc:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0;
 80011de:	4b21      	ldr	r3, [pc, #132]	; (8001264 <main+0xd4>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80011e4:	4b1f      	ldr	r3, [pc, #124]	; (8001264 <main+0xd4>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80011ea:	4b1e      	ldr	r3, [pc, #120]	; (8001264 <main+0xd4>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80011f0:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <main+0xd4>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	61da      	str	r2, [r3, #28]
  sFilterConfig.SlaveStartFilterBank = 0;  // 13 to 27 are assigned to slave CAN (CAN 2) OR 0 to 12 are assgned to CAN1
 80011f6:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <main+0xd4>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	625a      	str	r2, [r3, #36]	; 0x24
//  sFilterConfig.FilterFIFOAssignment=CAN_RX_FIFO0;
//  sFilterConfig.FilterActivation=ENABLE;
//  sFilterConfig.SlaveStartFilterBank=14;


  if(HAL_CAN_ConfigFilter(&hcan1,&sFilterConfig)!=HAL_OK)
 80011fc:	4919      	ldr	r1, [pc, #100]	; (8001264 <main+0xd4>)
 80011fe:	481a      	ldr	r0, [pc, #104]	; (8001268 <main+0xd8>)
 8001200:	f002 fa81 	bl	8003706 <HAL_CAN_ConfigFilter>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <main+0x7e>
  {
	  /* Filter configuration Error */ Error_Handler();
 800120a:	f000 fc4d 	bl	8001aa8 <Error_Handler>

  }

  if(HAL_CAN_Start(&hcan1)!=HAL_OK)
 800120e:	4816      	ldr	r0, [pc, #88]	; (8001268 <main+0xd8>)
 8001210:	f002 fb43 	bl	800389a <HAL_CAN_Start>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <main+0x8e>
  {
	  /* Start Error */ Error_Handler();
 800121a:	f000 fc45 	bl	8001aa8 <Error_Handler>
  }

  if(HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING |CAN_IT_TX_MAILBOX_EMPTY)!=HAL_OK)
 800121e:	2103      	movs	r1, #3
 8001220:	4811      	ldr	r0, [pc, #68]	; (8001268 <main+0xd8>)
 8001222:	f002 fca0 	bl	8003b66 <HAL_CAN_ActivateNotification>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <main+0xa0>
  {
	  /* Notification Error */ Error_Handler();
 800122c:	f000 fc3c 	bl	8001aa8 <Error_Handler>
  }


  TxHeader.StdId=CAN_SENDER_ID;
 8001230:	4b0e      	ldr	r3, [pc, #56]	; (800126c <main+0xdc>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a0e      	ldr	r2, [pc, #56]	; (8001270 <main+0xe0>)
 8001236:	6013      	str	r3, [r2, #0]
  TxHeader.ExtId=0;
 8001238:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <main+0xe0>)
 800123a:	2200      	movs	r2, #0
 800123c:	605a      	str	r2, [r3, #4]
  TxHeader.RTR=CAN_RTR_DATA;
 800123e:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <main+0xe0>)
 8001240:	2200      	movs	r2, #0
 8001242:	60da      	str	r2, [r3, #12]
  TxHeader.IDE=CAN_ID_STD;
 8001244:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <main+0xe0>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  TxHeader.DLC=8;
 800124a:	4b09      	ldr	r3, [pc, #36]	; (8001270 <main+0xe0>)
 800124c:	2208      	movs	r2, #8
 800124e:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime=DISABLE;
 8001250:	4b07      	ldr	r3, [pc, #28]	; (8001270 <main+0xe0>)
 8001252:	2200      	movs	r2, #0
 8001254:	751a      	strb	r2, [r3, #20]
  //TxData[0]=0; TxData[1]=0; TxData[2]=0; TxData[3]=0; TxData[4]=0; TxData[5]=1; TxData[6]=1; TxData[7]=1;
  //HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData,&TxMailbox);



  HAL_ADC_Start(&hadc1);
 8001256:	4807      	ldr	r0, [pc, #28]	; (8001274 <main+0xe4>)
 8001258:	f001 fb52 	bl	8002900 <HAL_ADC_Start>

	  //HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	  //HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, !buttonValue);
	  //HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, !RxData[2]);

	  HAL_Delay(250);
 800125c:	20fa      	movs	r0, #250	; 0xfa
 800125e:	f001 f819 	bl	8002294 <HAL_Delay>
 8001262:	e7fb      	b.n	800125c <main+0xcc>
 8001264:	2000048c 	.word	0x2000048c
 8001268:	20000258 	.word	0x20000258
 800126c:	20000000 	.word	0x20000000
 8001270:	200004b4 	.word	0x200004b4
 8001274:	200001f4 	.word	0x200001f4

08001278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b096      	sub	sp, #88	; 0x58
 800127c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127e:	f107 0314 	add.w	r3, r7, #20
 8001282:	2244      	movs	r2, #68	; 0x44
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f006 f9ac 	bl	80075e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800128c:	463b      	mov	r3, r7
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
 8001298:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800129a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800129e:	f003 f98f 	bl	80045c0 <HAL_PWREx_ControlVoltageScaling>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80012a8:	f000 fbfe 	bl	8001aa8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012ac:	2302      	movs	r3, #2
 80012ae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012b6:	2310      	movs	r3, #16
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ba:	2302      	movs	r3, #2
 80012bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012be:	2302      	movs	r3, #2
 80012c0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80012c2:	2301      	movs	r3, #1
 80012c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80012c6:	230a      	movs	r3, #10
 80012c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80012ca:	2307      	movs	r3, #7
 80012cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012ce:	2302      	movs	r3, #2
 80012d0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012d2:	2302      	movs	r3, #2
 80012d4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	4618      	mov	r0, r3
 80012dc:	f003 f9c6 	bl	800466c <HAL_RCC_OscConfig>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <SystemClock_Config+0x72>
  {
    Error_Handler();
 80012e6:	f000 fbdf 	bl	8001aa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ea:	230f      	movs	r3, #15
 80012ec:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ee:	2303      	movs	r3, #3
 80012f0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f2:	2300      	movs	r3, #0
 80012f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012fe:	463b      	mov	r3, r7
 8001300:	2104      	movs	r1, #4
 8001302:	4618      	mov	r0, r3
 8001304:	f003 fd8e 	bl	8004e24 <HAL_RCC_ClockConfig>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800130e:	f000 fbcb 	bl	8001aa8 <Error_Handler>
  }
}
 8001312:	bf00      	nop
 8001314:	3758      	adds	r7, #88	; 0x58
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	; 0x28
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001322:	f107 031c 	add.w	r3, r7, #28
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
 800133c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800133e:	4b89      	ldr	r3, [pc, #548]	; (8001564 <MX_ADC1_Init+0x248>)
 8001340:	4a89      	ldr	r2, [pc, #548]	; (8001568 <MX_ADC1_Init+0x24c>)
 8001342:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001344:	4b87      	ldr	r3, [pc, #540]	; (8001564 <MX_ADC1_Init+0x248>)
 8001346:	2200      	movs	r2, #0
 8001348:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800134a:	4b86      	ldr	r3, [pc, #536]	; (8001564 <MX_ADC1_Init+0x248>)
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001350:	4b84      	ldr	r3, [pc, #528]	; (8001564 <MX_ADC1_Init+0x248>)
 8001352:	2200      	movs	r2, #0
 8001354:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001356:	4b83      	ldr	r3, [pc, #524]	; (8001564 <MX_ADC1_Init+0x248>)
 8001358:	2201      	movs	r2, #1
 800135a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800135c:	4b81      	ldr	r3, [pc, #516]	; (8001564 <MX_ADC1_Init+0x248>)
 800135e:	2204      	movs	r2, #4
 8001360:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001362:	4b80      	ldr	r3, [pc, #512]	; (8001564 <MX_ADC1_Init+0x248>)
 8001364:	2200      	movs	r2, #0
 8001366:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001368:	4b7e      	ldr	r3, [pc, #504]	; (8001564 <MX_ADC1_Init+0x248>)
 800136a:	2200      	movs	r2, #0
 800136c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 15;
 800136e:	4b7d      	ldr	r3, [pc, #500]	; (8001564 <MX_ADC1_Init+0x248>)
 8001370:	220f      	movs	r2, #15
 8001372:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001374:	4b7b      	ldr	r3, [pc, #492]	; (8001564 <MX_ADC1_Init+0x248>)
 8001376:	2200      	movs	r2, #0
 8001378:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800137c:	4b79      	ldr	r3, [pc, #484]	; (8001564 <MX_ADC1_Init+0x248>)
 800137e:	2200      	movs	r2, #0
 8001380:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001382:	4b78      	ldr	r3, [pc, #480]	; (8001564 <MX_ADC1_Init+0x248>)
 8001384:	2200      	movs	r2, #0
 8001386:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001388:	4b76      	ldr	r3, [pc, #472]	; (8001564 <MX_ADC1_Init+0x248>)
 800138a:	2200      	movs	r2, #0
 800138c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001390:	4b74      	ldr	r3, [pc, #464]	; (8001564 <MX_ADC1_Init+0x248>)
 8001392:	2200      	movs	r2, #0
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001396:	4b73      	ldr	r3, [pc, #460]	; (8001564 <MX_ADC1_Init+0x248>)
 8001398:	2200      	movs	r2, #0
 800139a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800139e:	4871      	ldr	r0, [pc, #452]	; (8001564 <MX_ADC1_Init+0x248>)
 80013a0:	f001 f95e 	bl	8002660 <HAL_ADC_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80013aa:	f000 fb7d 	bl	8001aa8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80013b2:	f107 031c 	add.w	r3, r7, #28
 80013b6:	4619      	mov	r1, r3
 80013b8:	486a      	ldr	r0, [pc, #424]	; (8001564 <MX_ADC1_Init+0x248>)
 80013ba:	f001 fff9 	bl	80033b0 <HAL_ADCEx_MultiModeConfigChannel>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80013c4:	f000 fb70 	bl	8001aa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013c8:	4b68      	ldr	r3, [pc, #416]	; (800156c <MX_ADC1_Init+0x250>)
 80013ca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013cc:	2306      	movs	r3, #6
 80013ce:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80013d0:	2300      	movs	r3, #0
 80013d2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013d4:	237f      	movs	r3, #127	; 0x7f
 80013d6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013d8:	2304      	movs	r3, #4
 80013da:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	4619      	mov	r1, r3
 80013e4:	485f      	ldr	r0, [pc, #380]	; (8001564 <MX_ADC1_Init+0x248>)
 80013e6:	f001 fb45 	bl	8002a74 <HAL_ADC_ConfigChannel>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80013f0:	f000 fb5a 	bl	8001aa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80013f4:	230c      	movs	r3, #12
 80013f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	4619      	mov	r1, r3
 80013fc:	4859      	ldr	r0, [pc, #356]	; (8001564 <MX_ADC1_Init+0x248>)
 80013fe:	f001 fb39 	bl	8002a74 <HAL_ADC_ConfigChannel>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8001408:	f000 fb4e 	bl	8001aa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800140c:	2312      	movs	r3, #18
 800140e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	4619      	mov	r1, r3
 8001414:	4853      	ldr	r0, [pc, #332]	; (8001564 <MX_ADC1_Init+0x248>)
 8001416:	f001 fb2d 	bl	8002a74 <HAL_ADC_ConfigChannel>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8001420:	f000 fb42 	bl	8001aa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001424:	2318      	movs	r3, #24
 8001426:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	4619      	mov	r1, r3
 800142c:	484d      	ldr	r0, [pc, #308]	; (8001564 <MX_ADC1_Init+0x248>)
 800142e:	f001 fb21 	bl	8002a74 <HAL_ADC_ConfigChannel>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 8001438:	f000 fb36 	bl	8001aa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800143c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001440:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	4619      	mov	r1, r3
 8001446:	4847      	ldr	r0, [pc, #284]	; (8001564 <MX_ADC1_Init+0x248>)
 8001448:	f001 fb14 	bl	8002a74 <HAL_ADC_ConfigChannel>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_ADC1_Init+0x13a>
  {
    Error_Handler();
 8001452:	f000 fb29 	bl	8001aa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001456:	f44f 7383 	mov.w	r3, #262	; 0x106
 800145a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	4619      	mov	r1, r3
 8001460:	4840      	ldr	r0, [pc, #256]	; (8001564 <MX_ADC1_Init+0x248>)
 8001462:	f001 fb07 	bl	8002a74 <HAL_ADC_ConfigChannel>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 800146c:	f000 fb1c 	bl	8001aa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001470:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8001474:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	4619      	mov	r1, r3
 800147a:	483a      	ldr	r0, [pc, #232]	; (8001564 <MX_ADC1_Init+0x248>)
 800147c:	f001 fafa 	bl	8002a74 <HAL_ADC_ConfigChannel>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 8001486:	f000 fb0f 	bl	8001aa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800148a:	f44f 7389 	mov.w	r3, #274	; 0x112
 800148e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	4619      	mov	r1, r3
 8001494:	4833      	ldr	r0, [pc, #204]	; (8001564 <MX_ADC1_Init+0x248>)
 8001496:	f001 faed 	bl	8002a74 <HAL_ADC_ConfigChannel>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_ADC1_Init+0x188>
  {
    Error_Handler();
 80014a0:	f000 fb02 	bl	8001aa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80014a4:	f44f 738c 	mov.w	r3, #280	; 0x118
 80014a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	4619      	mov	r1, r3
 80014ae:	482d      	ldr	r0, [pc, #180]	; (8001564 <MX_ADC1_Init+0x248>)
 80014b0:	f001 fae0 	bl	8002a74 <HAL_ADC_ConfigChannel>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_ADC1_Init+0x1a2>
  {
    Error_Handler();
 80014ba:	f000 faf5 	bl	8001aa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80014be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	4619      	mov	r1, r3
 80014c8:	4826      	ldr	r0, [pc, #152]	; (8001564 <MX_ADC1_Init+0x248>)
 80014ca:	f001 fad3 	bl	8002a74 <HAL_ADC_ConfigChannel>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_ADC1_Init+0x1bc>
  {
    Error_Handler();
 80014d4:	f000 fae8 	bl	8001aa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80014d8:	f240 2306 	movw	r3, #518	; 0x206
 80014dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	4619      	mov	r1, r3
 80014e2:	4820      	ldr	r0, [pc, #128]	; (8001564 <MX_ADC1_Init+0x248>)
 80014e4:	f001 fac6 	bl	8002a74 <HAL_ADC_ConfigChannel>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_ADC1_Init+0x1d6>
  {
    Error_Handler();
 80014ee:	f000 fadb 	bl	8001aa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_12;
 80014f2:	f44f 7303 	mov.w	r3, #524	; 0x20c
 80014f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	4619      	mov	r1, r3
 80014fc:	4819      	ldr	r0, [pc, #100]	; (8001564 <MX_ADC1_Init+0x248>)
 80014fe:	f001 fab9 	bl	8002a74 <HAL_ADC_ConfigChannel>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_ADC1_Init+0x1f0>
  {
    Error_Handler();
 8001508:	f000 face 	bl	8001aa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_13;
 800150c:	f240 2312 	movw	r3, #530	; 0x212
 8001510:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	4619      	mov	r1, r3
 8001516:	4813      	ldr	r0, [pc, #76]	; (8001564 <MX_ADC1_Init+0x248>)
 8001518:	f001 faac 	bl	8002a74 <HAL_ADC_ConfigChannel>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_ADC1_Init+0x20a>
  {
    Error_Handler();
 8001522:	f000 fac1 	bl	8001aa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_14;
 8001526:	f44f 7306 	mov.w	r3, #536	; 0x218
 800152a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	4619      	mov	r1, r3
 8001530:	480c      	ldr	r0, [pc, #48]	; (8001564 <MX_ADC1_Init+0x248>)
 8001532:	f001 fa9f 	bl	8002a74 <HAL_ADC_ConfigChannel>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_ADC1_Init+0x224>
  {
    Error_Handler();
 800153c:	f000 fab4 	bl	8001aa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_15;
 8001540:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001544:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	4619      	mov	r1, r3
 800154a:	4806      	ldr	r0, [pc, #24]	; (8001564 <MX_ADC1_Init+0x248>)
 800154c:	f001 fa92 	bl	8002a74 <HAL_ADC_ConfigChannel>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_ADC1_Init+0x23e>
  {
    Error_Handler();
 8001556:	f000 faa7 	bl	8001aa8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800155a:	bf00      	nop
 800155c:	3728      	adds	r7, #40	; 0x28
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	200001f4 	.word	0x200001f4
 8001568:	50040000 	.word	0x50040000
 800156c:	04300002 	.word	0x04300002

08001570 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001574:	4b17      	ldr	r3, [pc, #92]	; (80015d4 <MX_CAN1_Init+0x64>)
 8001576:	4a18      	ldr	r2, [pc, #96]	; (80015d8 <MX_CAN1_Init+0x68>)
 8001578:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 800157a:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <MX_CAN1_Init+0x64>)
 800157c:	2205      	movs	r2, #5
 800157e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001580:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <MX_CAN1_Init+0x64>)
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001586:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <MX_CAN1_Init+0x64>)
 8001588:	2200      	movs	r2, #0
 800158a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 800158c:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <MX_CAN1_Init+0x64>)
 800158e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8001592:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001594:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <MX_CAN1_Init+0x64>)
 8001596:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800159a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800159c:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <MX_CAN1_Init+0x64>)
 800159e:	2200      	movs	r2, #0
 80015a0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80015a2:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <MX_CAN1_Init+0x64>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80015a8:	4b0a      	ldr	r3, [pc, #40]	; (80015d4 <MX_CAN1_Init+0x64>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80015ae:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <MX_CAN1_Init+0x64>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80015b4:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <MX_CAN1_Init+0x64>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <MX_CAN1_Init+0x64>)
 80015bc:	2200      	movs	r2, #0
 80015be:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80015c0:	4804      	ldr	r0, [pc, #16]	; (80015d4 <MX_CAN1_Init+0x64>)
 80015c2:	f001 ffa5 	bl	8003510 <HAL_CAN_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80015cc:	f000 fa6c 	bl	8001aa8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20000258 	.word	0x20000258
 80015d8:	40006400 	.word	0x40006400

080015dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08c      	sub	sp, #48	; 0x30
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015e2:	f107 030c 	add.w	r3, r7, #12
 80015e6:	2224      	movs	r2, #36	; 0x24
 80015e8:	2100      	movs	r1, #0
 80015ea:	4618      	mov	r0, r3
 80015ec:	f005 fffa 	bl	80075e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f0:	463b      	mov	r3, r7
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015fa:	4b21      	ldr	r3, [pc, #132]	; (8001680 <MX_TIM2_Init+0xa4>)
 80015fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001600:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001602:	4b1f      	ldr	r3, [pc, #124]	; (8001680 <MX_TIM2_Init+0xa4>)
 8001604:	2200      	movs	r2, #0
 8001606:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001608:	4b1d      	ldr	r3, [pc, #116]	; (8001680 <MX_TIM2_Init+0xa4>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800160e:	4b1c      	ldr	r3, [pc, #112]	; (8001680 <MX_TIM2_Init+0xa4>)
 8001610:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001614:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001616:	4b1a      	ldr	r3, [pc, #104]	; (8001680 <MX_TIM2_Init+0xa4>)
 8001618:	2200      	movs	r2, #0
 800161a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800161c:	4b18      	ldr	r3, [pc, #96]	; (8001680 <MX_TIM2_Init+0xa4>)
 800161e:	2200      	movs	r2, #0
 8001620:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001622:	2301      	movs	r3, #1
 8001624:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001626:	2300      	movs	r3, #0
 8001628:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800162a:	2301      	movs	r3, #1
 800162c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800162e:	2300      	movs	r3, #0
 8001630:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001636:	2300      	movs	r3, #0
 8001638:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800163a:	2301      	movs	r3, #1
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800163e:	2300      	movs	r3, #0
 8001640:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001642:	2300      	movs	r3, #0
 8001644:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001646:	f107 030c 	add.w	r3, r7, #12
 800164a:	4619      	mov	r1, r3
 800164c:	480c      	ldr	r0, [pc, #48]	; (8001680 <MX_TIM2_Init+0xa4>)
 800164e:	f004 fb20 	bl	8005c92 <HAL_TIM_Encoder_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001658:	f000 fa26 	bl	8001aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800165c:	2300      	movs	r3, #0
 800165e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001660:	2300      	movs	r3, #0
 8001662:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001664:	463b      	mov	r3, r7
 8001666:	4619      	mov	r1, r3
 8001668:	4805      	ldr	r0, [pc, #20]	; (8001680 <MX_TIM2_Init+0xa4>)
 800166a:	f004 fc53 	bl	8005f14 <HAL_TIMEx_MasterConfigSynchronization>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001674:	f000 fa18 	bl	8001aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001678:	bf00      	nop
 800167a:	3730      	adds	r7, #48	; 0x30
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000280 	.word	0x20000280

08001684 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08c      	sub	sp, #48	; 0x30
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800168a:	f107 030c 	add.w	r3, r7, #12
 800168e:	2224      	movs	r2, #36	; 0x24
 8001690:	2100      	movs	r1, #0
 8001692:	4618      	mov	r0, r3
 8001694:	f005 ffa6 	bl	80075e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001698:	463b      	mov	r3, r7
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	605a      	str	r2, [r3, #4]
 80016a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016a2:	4b21      	ldr	r3, [pc, #132]	; (8001728 <MX_TIM3_Init+0xa4>)
 80016a4:	4a21      	ldr	r2, [pc, #132]	; (800172c <MX_TIM3_Init+0xa8>)
 80016a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80016a8:	4b1f      	ldr	r3, [pc, #124]	; (8001728 <MX_TIM3_Init+0xa4>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ae:	4b1e      	ldr	r3, [pc, #120]	; (8001728 <MX_TIM3_Init+0xa4>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80016b4:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <MX_TIM3_Init+0xa4>)
 80016b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016bc:	4b1a      	ldr	r3, [pc, #104]	; (8001728 <MX_TIM3_Init+0xa4>)
 80016be:	2200      	movs	r2, #0
 80016c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c2:	4b19      	ldr	r3, [pc, #100]	; (8001728 <MX_TIM3_Init+0xa4>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80016c8:	2301      	movs	r3, #1
 80016ca:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016cc:	2300      	movs	r3, #0
 80016ce:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016d0:	2301      	movs	r3, #1
 80016d2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016dc:	2300      	movs	r3, #0
 80016de:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016e0:	2301      	movs	r3, #1
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016e4:	2300      	movs	r3, #0
 80016e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80016ec:	f107 030c 	add.w	r3, r7, #12
 80016f0:	4619      	mov	r1, r3
 80016f2:	480d      	ldr	r0, [pc, #52]	; (8001728 <MX_TIM3_Init+0xa4>)
 80016f4:	f004 facd 	bl	8005c92 <HAL_TIM_Encoder_Init>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80016fe:	f000 f9d3 	bl	8001aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001702:	2300      	movs	r3, #0
 8001704:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001706:	2300      	movs	r3, #0
 8001708:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800170a:	463b      	mov	r3, r7
 800170c:	4619      	mov	r1, r3
 800170e:	4806      	ldr	r0, [pc, #24]	; (8001728 <MX_TIM3_Init+0xa4>)
 8001710:	f004 fc00 	bl	8005f14 <HAL_TIMEx_MasterConfigSynchronization>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800171a:	f000 f9c5 	bl	8001aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800171e:	bf00      	nop
 8001720:	3730      	adds	r7, #48	; 0x30
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	200002cc 	.word	0x200002cc
 800172c:	40000400 	.word	0x40000400

08001730 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08c      	sub	sp, #48	; 0x30
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001736:	f107 030c 	add.w	r3, r7, #12
 800173a:	2224      	movs	r2, #36	; 0x24
 800173c:	2100      	movs	r1, #0
 800173e:	4618      	mov	r0, r3
 8001740:	f005 ff50 	bl	80075e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001744:	463b      	mov	r3, r7
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]
 800174c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800174e:	4b21      	ldr	r3, [pc, #132]	; (80017d4 <MX_TIM4_Init+0xa4>)
 8001750:	4a21      	ldr	r2, [pc, #132]	; (80017d8 <MX_TIM4_Init+0xa8>)
 8001752:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001754:	4b1f      	ldr	r3, [pc, #124]	; (80017d4 <MX_TIM4_Init+0xa4>)
 8001756:	2200      	movs	r2, #0
 8001758:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800175a:	4b1e      	ldr	r3, [pc, #120]	; (80017d4 <MX_TIM4_Init+0xa4>)
 800175c:	2200      	movs	r2, #0
 800175e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001760:	4b1c      	ldr	r3, [pc, #112]	; (80017d4 <MX_TIM4_Init+0xa4>)
 8001762:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001766:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001768:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <MX_TIM4_Init+0xa4>)
 800176a:	2200      	movs	r2, #0
 800176c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800176e:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <MX_TIM4_Init+0xa4>)
 8001770:	2200      	movs	r2, #0
 8001772:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001774:	2301      	movs	r3, #1
 8001776:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001778:	2300      	movs	r3, #0
 800177a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800177c:	2301      	movs	r3, #1
 800177e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001780:	2300      	movs	r3, #0
 8001782:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001788:	2300      	movs	r3, #0
 800178a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800178c:	2301      	movs	r3, #1
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001790:	2300      	movs	r3, #0
 8001792:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001798:	f107 030c 	add.w	r3, r7, #12
 800179c:	4619      	mov	r1, r3
 800179e:	480d      	ldr	r0, [pc, #52]	; (80017d4 <MX_TIM4_Init+0xa4>)
 80017a0:	f004 fa77 	bl	8005c92 <HAL_TIM_Encoder_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80017aa:	f000 f97d 	bl	8001aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ae:	2300      	movs	r3, #0
 80017b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b2:	2300      	movs	r3, #0
 80017b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017b6:	463b      	mov	r3, r7
 80017b8:	4619      	mov	r1, r3
 80017ba:	4806      	ldr	r0, [pc, #24]	; (80017d4 <MX_TIM4_Init+0xa4>)
 80017bc:	f004 fbaa 	bl	8005f14 <HAL_TIMEx_MasterConfigSynchronization>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80017c6:	f000 f96f 	bl	8001aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80017ca:	bf00      	nop
 80017cc:	3730      	adds	r7, #48	; 0x30
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000318 	.word	0x20000318
 80017d8:	40000800 	.word	0x40000800

080017dc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08c      	sub	sp, #48	; 0x30
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017e2:	f107 030c 	add.w	r3, r7, #12
 80017e6:	2224      	movs	r2, #36	; 0x24
 80017e8:	2100      	movs	r1, #0
 80017ea:	4618      	mov	r0, r3
 80017ec:	f005 fefa 	bl	80075e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f0:	463b      	mov	r3, r7
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80017fa:	4b23      	ldr	r3, [pc, #140]	; (8001888 <MX_TIM8_Init+0xac>)
 80017fc:	4a23      	ldr	r2, [pc, #140]	; (800188c <MX_TIM8_Init+0xb0>)
 80017fe:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001800:	4b21      	ldr	r3, [pc, #132]	; (8001888 <MX_TIM8_Init+0xac>)
 8001802:	2200      	movs	r2, #0
 8001804:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001806:	4b20      	ldr	r3, [pc, #128]	; (8001888 <MX_TIM8_Init+0xac>)
 8001808:	2200      	movs	r2, #0
 800180a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800180c:	4b1e      	ldr	r3, [pc, #120]	; (8001888 <MX_TIM8_Init+0xac>)
 800180e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001812:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001814:	4b1c      	ldr	r3, [pc, #112]	; (8001888 <MX_TIM8_Init+0xac>)
 8001816:	2200      	movs	r2, #0
 8001818:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800181a:	4b1b      	ldr	r3, [pc, #108]	; (8001888 <MX_TIM8_Init+0xac>)
 800181c:	2200      	movs	r2, #0
 800181e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001820:	4b19      	ldr	r3, [pc, #100]	; (8001888 <MX_TIM8_Init+0xac>)
 8001822:	2200      	movs	r2, #0
 8001824:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001826:	2301      	movs	r3, #1
 8001828:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800182a:	2300      	movs	r3, #0
 800182c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800182e:	2301      	movs	r3, #1
 8001830:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001832:	2300      	movs	r3, #0
 8001834:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800183a:	2300      	movs	r3, #0
 800183c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800183e:	2301      	movs	r3, #1
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001842:	2300      	movs	r3, #0
 8001844:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001846:	2300      	movs	r3, #0
 8001848:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800184a:	f107 030c 	add.w	r3, r7, #12
 800184e:	4619      	mov	r1, r3
 8001850:	480d      	ldr	r0, [pc, #52]	; (8001888 <MX_TIM8_Init+0xac>)
 8001852:	f004 fa1e 	bl	8005c92 <HAL_TIM_Encoder_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 800185c:	f000 f924 	bl	8001aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001860:	2300      	movs	r3, #0
 8001862:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001864:	2300      	movs	r3, #0
 8001866:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001868:	2300      	movs	r3, #0
 800186a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800186c:	463b      	mov	r3, r7
 800186e:	4619      	mov	r1, r3
 8001870:	4805      	ldr	r0, [pc, #20]	; (8001888 <MX_TIM8_Init+0xac>)
 8001872:	f004 fb4f 	bl	8005f14 <HAL_TIMEx_MasterConfigSynchronization>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800187c:	f000 f914 	bl	8001aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001880:	bf00      	nop
 8001882:	3730      	adds	r7, #48	; 0x30
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20000364 	.word	0x20000364
 800188c:	40013400 	.word	0x40013400

08001890 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001894:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <MX_TIM16_Init+0x44>)
 8001896:	4a10      	ldr	r2, [pc, #64]	; (80018d8 <MX_TIM16_Init+0x48>)
 8001898:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800189a:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <MX_TIM16_Init+0x44>)
 800189c:	2200      	movs	r2, #0
 800189e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a0:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <MX_TIM16_Init+0x44>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80018a6:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <MX_TIM16_Init+0x44>)
 80018a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018ac:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ae:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <MX_TIM16_Init+0x44>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80018b4:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <MX_TIM16_Init+0x44>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ba:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <MX_TIM16_Init+0x44>)
 80018bc:	2200      	movs	r2, #0
 80018be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80018c0:	4804      	ldr	r0, [pc, #16]	; (80018d4 <MX_TIM16_Init+0x44>)
 80018c2:	f004 f98f 	bl	8005be4 <HAL_TIM_Base_Init>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80018cc:	f000 f8ec 	bl	8001aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	200003b0 	.word	0x200003b0
 80018d8:	40014400 	.word	0x40014400

080018dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018e0:	4b14      	ldr	r3, [pc, #80]	; (8001934 <MX_USART2_UART_Init+0x58>)
 80018e2:	4a15      	ldr	r2, [pc, #84]	; (8001938 <MX_USART2_UART_Init+0x5c>)
 80018e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018e6:	4b13      	ldr	r3, [pc, #76]	; (8001934 <MX_USART2_UART_Init+0x58>)
 80018e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018ee:	4b11      	ldr	r3, [pc, #68]	; (8001934 <MX_USART2_UART_Init+0x58>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018f4:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <MX_USART2_UART_Init+0x58>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018fa:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <MX_USART2_UART_Init+0x58>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001900:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <MX_USART2_UART_Init+0x58>)
 8001902:	220c      	movs	r2, #12
 8001904:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001906:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <MX_USART2_UART_Init+0x58>)
 8001908:	2200      	movs	r2, #0
 800190a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800190c:	4b09      	ldr	r3, [pc, #36]	; (8001934 <MX_USART2_UART_Init+0x58>)
 800190e:	2200      	movs	r2, #0
 8001910:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001912:	4b08      	ldr	r3, [pc, #32]	; (8001934 <MX_USART2_UART_Init+0x58>)
 8001914:	2200      	movs	r2, #0
 8001916:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001918:	4b06      	ldr	r3, [pc, #24]	; (8001934 <MX_USART2_UART_Init+0x58>)
 800191a:	2200      	movs	r2, #0
 800191c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800191e:	4805      	ldr	r0, [pc, #20]	; (8001934 <MX_USART2_UART_Init+0x58>)
 8001920:	f004 fb80 	bl	8006024 <HAL_UART_Init>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800192a:	f000 f8bd 	bl	8001aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	200003fc 	.word	0x200003fc
 8001938:	40004400 	.word	0x40004400

0800193c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08a      	sub	sp, #40	; 0x28
 8001940:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	605a      	str	r2, [r3, #4]
 800194c:	609a      	str	r2, [r3, #8]
 800194e:	60da      	str	r2, [r3, #12]
 8001950:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001952:	4b2b      	ldr	r3, [pc, #172]	; (8001a00 <MX_GPIO_Init+0xc4>)
 8001954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001956:	4a2a      	ldr	r2, [pc, #168]	; (8001a00 <MX_GPIO_Init+0xc4>)
 8001958:	f043 0304 	orr.w	r3, r3, #4
 800195c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800195e:	4b28      	ldr	r3, [pc, #160]	; (8001a00 <MX_GPIO_Init+0xc4>)
 8001960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001962:	f003 0304 	and.w	r3, r3, #4
 8001966:	613b      	str	r3, [r7, #16]
 8001968:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800196a:	4b25      	ldr	r3, [pc, #148]	; (8001a00 <MX_GPIO_Init+0xc4>)
 800196c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196e:	4a24      	ldr	r2, [pc, #144]	; (8001a00 <MX_GPIO_Init+0xc4>)
 8001970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001976:	4b22      	ldr	r3, [pc, #136]	; (8001a00 <MX_GPIO_Init+0xc4>)
 8001978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001982:	4b1f      	ldr	r3, [pc, #124]	; (8001a00 <MX_GPIO_Init+0xc4>)
 8001984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001986:	4a1e      	ldr	r2, [pc, #120]	; (8001a00 <MX_GPIO_Init+0xc4>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800198e:	4b1c      	ldr	r3, [pc, #112]	; (8001a00 <MX_GPIO_Init+0xc4>)
 8001990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800199a:	4b19      	ldr	r3, [pc, #100]	; (8001a00 <MX_GPIO_Init+0xc4>)
 800199c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199e:	4a18      	ldr	r2, [pc, #96]	; (8001a00 <MX_GPIO_Init+0xc4>)
 80019a0:	f043 0302 	orr.w	r3, r3, #2
 80019a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019a6:	4b16      	ldr	r3, [pc, #88]	; (8001a00 <MX_GPIO_Init+0xc4>)
 80019a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	607b      	str	r3, [r7, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80019b2:	2200      	movs	r2, #0
 80019b4:	2120      	movs	r1, #32
 80019b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ba:	f002 fddb 	bl	8004574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RES_BUTTON_Pin */
  GPIO_InitStruct.Pin = RES_BUTTON_Pin;
 80019be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019c4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80019c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019ca:	2302      	movs	r3, #2
 80019cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RES_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80019ce:	f107 0314 	add.w	r3, r7, #20
 80019d2:	4619      	mov	r1, r3
 80019d4:	480b      	ldr	r0, [pc, #44]	; (8001a04 <MX_GPIO_Init+0xc8>)
 80019d6:	f002 fc23 	bl	8004220 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80019da:	2320      	movs	r3, #32
 80019dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019de:	2301      	movs	r3, #1
 80019e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e6:	2300      	movs	r3, #0
 80019e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80019ea:	f107 0314 	add.w	r3, r7, #20
 80019ee:	4619      	mov	r1, r3
 80019f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019f4:	f002 fc14 	bl	8004220 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019f8:	bf00      	nop
 80019fa:	3728      	adds	r7, #40	; 0x28
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40021000 	.word	0x40021000
 8001a04:	48000800 	.word	0x48000800

08001a08 <HAL_CAN_TxMailbox0CompleteCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	value_2++;
 8001a10:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <HAL_CAN_TxMailbox0CompleteCallback+0x20>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	3301      	adds	r3, #1
 8001a16:	4a04      	ldr	r2, [pc, #16]	; (8001a28 <HAL_CAN_TxMailbox0CompleteCallback+0x20>)
 8001a18:	6013      	str	r3, [r2, #0]
	//printf("Tx %d \r\n", value);

}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	20000488 	.word	0x20000488

08001a2c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(&hcan1,CAN_RX_FIFO0,&RxHeader,RxData);
 8001a34:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8001a36:	4a10      	ldr	r2, [pc, #64]	; (8001a78 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8001a38:	2100      	movs	r1, #0
 8001a3a:	4810      	ldr	r0, [pc, #64]	; (8001a7c <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8001a3c:	f001 ff71 	bl	8003922 <HAL_CAN_GetRxMessage>
	//printf("CAN Rx: %d %d %d %d %d %d %d %d %d \r\n", RxHeader.StdId, RxData[0], RxData[1], RxData[2], RxData[3], RxData[4], RxData[5], RxData[6], RxData[7]);
	//cubemars_get_can_msg(RxData, CAN_LISTEN_ID, &position, &speed, &torque, &temperature, &error);
	cubemars_get_can_cmd4debug(RxData);
 8001a40:	480c      	ldr	r0, [pc, #48]	; (8001a74 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8001a42:	f7ff fa61 	bl	8000f08 <cubemars_get_can_cmd4debug>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, !RxData[1]);
 8001a46:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8001a48:	785b      	ldrb	r3, [r3, #1]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	bf0c      	ite	eq
 8001a4e:	2301      	moveq	r3, #1
 8001a50:	2300      	movne	r3, #0
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	461a      	mov	r2, r3
 8001a56:	2120      	movs	r1, #32
 8001a58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a5c:	f002 fd8a 	bl	8004574 <HAL_GPIO_WritePin>
	value++;
 8001a60:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	3301      	adds	r3, #1
 8001a66:	4a06      	ldr	r2, [pc, #24]	; (8001a80 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8001a68:	6013      	str	r3, [r2, #0]
	//printf("Rx %d \r\n", value);
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	200004e8 	.word	0x200004e8
 8001a78:	200004cc 	.word	0x200004cc
 8001a7c:	20000258 	.word	0x20000258
 8001a80:	20000484 	.word	0x20000484

08001a84 <__io_putchar>:


PUTCHAR_PROTOTYPE
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001a8c:	1d39      	adds	r1, r7, #4
 8001a8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a92:	2201      	movs	r2, #1
 8001a94:	4803      	ldr	r0, [pc, #12]	; (8001aa4 <__io_putchar+0x20>)
 8001a96:	f004 fb13 	bl	80060c0 <HAL_UART_Transmit>

  return ch;
 8001a9a:	687b      	ldr	r3, [r7, #4]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	200003fc 	.word	0x200003fc

08001aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aac:	b672      	cpsid	i
}
 8001aae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ab0:	e7fe      	b.n	8001ab0 <Error_Handler+0x8>
	...

08001ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aba:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <HAL_MspInit+0x44>)
 8001abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001abe:	4a0e      	ldr	r2, [pc, #56]	; (8001af8 <HAL_MspInit+0x44>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ac6:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <HAL_MspInit+0x44>)
 8001ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	607b      	str	r3, [r7, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad2:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <HAL_MspInit+0x44>)
 8001ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad6:	4a08      	ldr	r2, [pc, #32]	; (8001af8 <HAL_MspInit+0x44>)
 8001ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001adc:	6593      	str	r3, [r2, #88]	; 0x58
 8001ade:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <HAL_MspInit+0x44>)
 8001ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae6:	603b      	str	r3, [r7, #0]
 8001ae8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	40021000 	.word	0x40021000

08001afc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b0ac      	sub	sp, #176	; 0xb0
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b04:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b14:	f107 0314 	add.w	r3, r7, #20
 8001b18:	2288      	movs	r2, #136	; 0x88
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f005 fd61 	bl	80075e4 <memset>
  if(hadc->Instance==ADC1)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a27      	ldr	r2, [pc, #156]	; (8001bc4 <HAL_ADC_MspInit+0xc8>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d146      	bne.n	8001bba <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b30:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001b32:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001b36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001b42:	2308      	movs	r3, #8
 8001b44:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001b46:	2307      	movs	r3, #7
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001b52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b56:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b58:	f107 0314 	add.w	r3, r7, #20
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f003 fb85 	bl	800526c <HAL_RCCEx_PeriphCLKConfig>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001b68:	f7ff ff9e 	bl	8001aa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001b6c:	4b16      	ldr	r3, [pc, #88]	; (8001bc8 <HAL_ADC_MspInit+0xcc>)
 8001b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b70:	4a15      	ldr	r2, [pc, #84]	; (8001bc8 <HAL_ADC_MspInit+0xcc>)
 8001b72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b78:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <HAL_ADC_MspInit+0xcc>)
 8001b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b84:	4b10      	ldr	r3, [pc, #64]	; (8001bc8 <HAL_ADC_MspInit+0xcc>)
 8001b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b88:	4a0f      	ldr	r2, [pc, #60]	; (8001bc8 <HAL_ADC_MspInit+0xcc>)
 8001b8a:	f043 0304 	orr.w	r3, r3, #4
 8001b8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b90:	4b0d      	ldr	r3, [pc, #52]	; (8001bc8 <HAL_ADC_MspInit+0xcc>)
 8001b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = Potentiometer_Pin;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001ba2:	230b      	movs	r3, #11
 8001ba4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(Potentiometer_GPIO_Port, &GPIO_InitStruct);
 8001bae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4805      	ldr	r0, [pc, #20]	; (8001bcc <HAL_ADC_MspInit+0xd0>)
 8001bb6:	f002 fb33 	bl	8004220 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001bba:	bf00      	nop
 8001bbc:	37b0      	adds	r7, #176	; 0xb0
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	50040000 	.word	0x50040000
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	48000800 	.word	0x48000800

08001bd0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08a      	sub	sp, #40	; 0x28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a1f      	ldr	r2, [pc, #124]	; (8001c6c <HAL_CAN_MspInit+0x9c>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d138      	bne.n	8001c64 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001bf2:	4b1f      	ldr	r3, [pc, #124]	; (8001c70 <HAL_CAN_MspInit+0xa0>)
 8001bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf6:	4a1e      	ldr	r2, [pc, #120]	; (8001c70 <HAL_CAN_MspInit+0xa0>)
 8001bf8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bfc:	6593      	str	r3, [r2, #88]	; 0x58
 8001bfe:	4b1c      	ldr	r3, [pc, #112]	; (8001c70 <HAL_CAN_MspInit+0xa0>)
 8001c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0a:	4b19      	ldr	r3, [pc, #100]	; (8001c70 <HAL_CAN_MspInit+0xa0>)
 8001c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0e:	4a18      	ldr	r2, [pc, #96]	; (8001c70 <HAL_CAN_MspInit+0xa0>)
 8001c10:	f043 0302 	orr.w	r3, r3, #2
 8001c14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c16:	4b16      	ldr	r3, [pc, #88]	; (8001c70 <HAL_CAN_MspInit+0xa0>)
 8001c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c30:	2303      	movs	r3, #3
 8001c32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001c34:	2309      	movs	r3, #9
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c38:	f107 0314 	add.w	r3, r7, #20
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	480d      	ldr	r0, [pc, #52]	; (8001c74 <HAL_CAN_MspInit+0xa4>)
 8001c40:	f002 faee 	bl	8004220 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001c44:	2200      	movs	r2, #0
 8001c46:	2100      	movs	r1, #0
 8001c48:	2014      	movs	r0, #20
 8001c4a:	f002 fab2 	bl	80041b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001c4e:	2014      	movs	r0, #20
 8001c50:	f002 facb 	bl	80041ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001c54:	2200      	movs	r2, #0
 8001c56:	2100      	movs	r1, #0
 8001c58:	2015      	movs	r0, #21
 8001c5a:	f002 faaa 	bl	80041b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001c5e:	2015      	movs	r0, #21
 8001c60:	f002 fac3 	bl	80041ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001c64:	bf00      	nop
 8001c66:	3728      	adds	r7, #40	; 0x28
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40006400 	.word	0x40006400
 8001c70:	40021000 	.word	0x40021000
 8001c74:	48000400 	.word	0x48000400

08001c78 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b090      	sub	sp, #64	; 0x40
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c98:	d129      	bne.n	8001cee <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c9a:	4b5c      	ldr	r3, [pc, #368]	; (8001e0c <HAL_TIM_Encoder_MspInit+0x194>)
 8001c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9e:	4a5b      	ldr	r2, [pc, #364]	; (8001e0c <HAL_TIM_Encoder_MspInit+0x194>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ca6:	4b59      	ldr	r3, [pc, #356]	; (8001e0c <HAL_TIM_Encoder_MspInit+0x194>)
 8001ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb2:	4b56      	ldr	r3, [pc, #344]	; (8001e0c <HAL_TIM_Encoder_MspInit+0x194>)
 8001cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb6:	4a55      	ldr	r2, [pc, #340]	; (8001e0c <HAL_TIM_Encoder_MspInit+0x194>)
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cbe:	4b53      	ldr	r3, [pc, #332]	; (8001e0c <HAL_TIM_Encoder_MspInit+0x194>)
 8001cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ce8:	f002 fa9a 	bl	8004220 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001cec:	e089      	b.n	8001e02 <HAL_TIM_Encoder_MspInit+0x18a>
  else if(htim_encoder->Instance==TIM3)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a47      	ldr	r2, [pc, #284]	; (8001e10 <HAL_TIM_Encoder_MspInit+0x198>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d129      	bne.n	8001d4c <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cf8:	4b44      	ldr	r3, [pc, #272]	; (8001e0c <HAL_TIM_Encoder_MspInit+0x194>)
 8001cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfc:	4a43      	ldr	r2, [pc, #268]	; (8001e0c <HAL_TIM_Encoder_MspInit+0x194>)
 8001cfe:	f043 0302 	orr.w	r3, r3, #2
 8001d02:	6593      	str	r3, [r2, #88]	; 0x58
 8001d04:	4b41      	ldr	r3, [pc, #260]	; (8001e0c <HAL_TIM_Encoder_MspInit+0x194>)
 8001d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	623b      	str	r3, [r7, #32]
 8001d0e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d10:	4b3e      	ldr	r3, [pc, #248]	; (8001e0c <HAL_TIM_Encoder_MspInit+0x194>)
 8001d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d14:	4a3d      	ldr	r2, [pc, #244]	; (8001e0c <HAL_TIM_Encoder_MspInit+0x194>)
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d1c:	4b3b      	ldr	r3, [pc, #236]	; (8001e0c <HAL_TIM_Encoder_MspInit+0x194>)
 8001d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	61fb      	str	r3, [r7, #28]
 8001d26:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d28:	23c0      	movs	r3, #192	; 0xc0
 8001d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d34:	2300      	movs	r3, #0
 8001d36:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d40:	4619      	mov	r1, r3
 8001d42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d46:	f002 fa6b 	bl	8004220 <HAL_GPIO_Init>
}
 8001d4a:	e05a      	b.n	8001e02 <HAL_TIM_Encoder_MspInit+0x18a>
  else if(htim_encoder->Instance==TIM4)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a30      	ldr	r2, [pc, #192]	; (8001e14 <HAL_TIM_Encoder_MspInit+0x19c>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d128      	bne.n	8001da8 <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d56:	4b2d      	ldr	r3, [pc, #180]	; (8001e0c <HAL_TIM_Encoder_MspInit+0x194>)
 8001d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5a:	4a2c      	ldr	r2, [pc, #176]	; (8001e0c <HAL_TIM_Encoder_MspInit+0x194>)
 8001d5c:	f043 0304 	orr.w	r3, r3, #4
 8001d60:	6593      	str	r3, [r2, #88]	; 0x58
 8001d62:	4b2a      	ldr	r3, [pc, #168]	; (8001e0c <HAL_TIM_Encoder_MspInit+0x194>)
 8001d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d66:	f003 0304 	and.w	r3, r3, #4
 8001d6a:	61bb      	str	r3, [r7, #24]
 8001d6c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d6e:	4b27      	ldr	r3, [pc, #156]	; (8001e0c <HAL_TIM_Encoder_MspInit+0x194>)
 8001d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d72:	4a26      	ldr	r2, [pc, #152]	; (8001e0c <HAL_TIM_Encoder_MspInit+0x194>)
 8001d74:	f043 0302 	orr.w	r3, r3, #2
 8001d78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d7a:	4b24      	ldr	r3, [pc, #144]	; (8001e0c <HAL_TIM_Encoder_MspInit+0x194>)
 8001d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d86:	23c0      	movs	r3, #192	; 0xc0
 8001d88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d92:	2300      	movs	r3, #0
 8001d94:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001d96:	2302      	movs	r3, #2
 8001d98:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d9e:	4619      	mov	r1, r3
 8001da0:	481d      	ldr	r0, [pc, #116]	; (8001e18 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8001da2:	f002 fa3d 	bl	8004220 <HAL_GPIO_Init>
}
 8001da6:	e02c      	b.n	8001e02 <HAL_TIM_Encoder_MspInit+0x18a>
  else if(htim_encoder->Instance==TIM8)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a1b      	ldr	r2, [pc, #108]	; (8001e1c <HAL_TIM_Encoder_MspInit+0x1a4>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d127      	bne.n	8001e02 <HAL_TIM_Encoder_MspInit+0x18a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001db2:	4b16      	ldr	r3, [pc, #88]	; (8001e0c <HAL_TIM_Encoder_MspInit+0x194>)
 8001db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001db6:	4a15      	ldr	r2, [pc, #84]	; (8001e0c <HAL_TIM_Encoder_MspInit+0x194>)
 8001db8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001dbc:	6613      	str	r3, [r2, #96]	; 0x60
 8001dbe:	4b13      	ldr	r3, [pc, #76]	; (8001e0c <HAL_TIM_Encoder_MspInit+0x194>)
 8001dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dca:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <HAL_TIM_Encoder_MspInit+0x194>)
 8001dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dce:	4a0f      	ldr	r2, [pc, #60]	; (8001e0c <HAL_TIM_Encoder_MspInit+0x194>)
 8001dd0:	f043 0304 	orr.w	r3, r3, #4
 8001dd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dd6:	4b0d      	ldr	r3, [pc, #52]	; (8001e0c <HAL_TIM_Encoder_MspInit+0x194>)
 8001dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dda:	f003 0304 	and.w	r3, r3, #4
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001de2:	23c0      	movs	r3, #192	; 0xc0
 8001de4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de6:	2302      	movs	r3, #2
 8001de8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dee:	2300      	movs	r3, #0
 8001df0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001df2:	2303      	movs	r3, #3
 8001df4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001df6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4808      	ldr	r0, [pc, #32]	; (8001e20 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8001dfe:	f002 fa0f 	bl	8004220 <HAL_GPIO_Init>
}
 8001e02:	bf00      	nop
 8001e04:	3740      	adds	r7, #64	; 0x40
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	40000400 	.word	0x40000400
 8001e14:	40000800 	.word	0x40000800
 8001e18:	48000400 	.word	0x48000400
 8001e1c:	40013400 	.word	0x40013400
 8001e20:	48000800 	.word	0x48000800

08001e24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a0a      	ldr	r2, [pc, #40]	; (8001e5c <HAL_TIM_Base_MspInit+0x38>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d10b      	bne.n	8001e4e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001e36:	4b0a      	ldr	r3, [pc, #40]	; (8001e60 <HAL_TIM_Base_MspInit+0x3c>)
 8001e38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e3a:	4a09      	ldr	r2, [pc, #36]	; (8001e60 <HAL_TIM_Base_MspInit+0x3c>)
 8001e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e40:	6613      	str	r3, [r2, #96]	; 0x60
 8001e42:	4b07      	ldr	r3, [pc, #28]	; (8001e60 <HAL_TIM_Base_MspInit+0x3c>)
 8001e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001e4e:	bf00      	nop
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	40014400 	.word	0x40014400
 8001e60:	40021000 	.word	0x40021000

08001e64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b0ac      	sub	sp, #176	; 0xb0
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e7c:	f107 0314 	add.w	r3, r7, #20
 8001e80:	2288      	movs	r2, #136	; 0x88
 8001e82:	2100      	movs	r1, #0
 8001e84:	4618      	mov	r0, r3
 8001e86:	f005 fbad 	bl	80075e4 <memset>
  if(huart->Instance==USART2)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a21      	ldr	r2, [pc, #132]	; (8001f14 <HAL_UART_MspInit+0xb0>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d13b      	bne.n	8001f0c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e94:	2302      	movs	r3, #2
 8001e96:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e9c:	f107 0314 	add.w	r3, r7, #20
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f003 f9e3 	bl	800526c <HAL_RCCEx_PeriphCLKConfig>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001eac:	f7ff fdfc 	bl	8001aa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001eb0:	4b19      	ldr	r3, [pc, #100]	; (8001f18 <HAL_UART_MspInit+0xb4>)
 8001eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb4:	4a18      	ldr	r2, [pc, #96]	; (8001f18 <HAL_UART_MspInit+0xb4>)
 8001eb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eba:	6593      	str	r3, [r2, #88]	; 0x58
 8001ebc:	4b16      	ldr	r3, [pc, #88]	; (8001f18 <HAL_UART_MspInit+0xb4>)
 8001ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec4:	613b      	str	r3, [r7, #16]
 8001ec6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec8:	4b13      	ldr	r3, [pc, #76]	; (8001f18 <HAL_UART_MspInit+0xb4>)
 8001eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ecc:	4a12      	ldr	r2, [pc, #72]	; (8001f18 <HAL_UART_MspInit+0xb4>)
 8001ece:	f043 0301 	orr.w	r3, r3, #1
 8001ed2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ed4:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <HAL_UART_MspInit+0xb4>)
 8001ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ee0:	230c      	movs	r3, #12
 8001ee2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ef8:	2307      	movs	r3, #7
 8001efa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f02:	4619      	mov	r1, r3
 8001f04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f08:	f002 f98a 	bl	8004220 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f0c:	bf00      	nop
 8001f0e:	37b0      	adds	r7, #176	; 0xb0
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40004400 	.word	0x40004400
 8001f18:	40021000 	.word	0x40021000

08001f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f20:	e7fe      	b.n	8001f20 <NMI_Handler+0x4>

08001f22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f22:	b480      	push	{r7}
 8001f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f26:	e7fe      	b.n	8001f26 <HardFault_Handler+0x4>

08001f28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f2c:	e7fe      	b.n	8001f2c <MemManage_Handler+0x4>

08001f2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f32:	e7fe      	b.n	8001f32 <BusFault_Handler+0x4>

08001f34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f38:	e7fe      	b.n	8001f38 <UsageFault_Handler+0x4>

08001f3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f56:	b480      	push	{r7}
 8001f58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f68:	f000 f974 	bl	8002254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f6c:	bf00      	nop
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001f74:	4802      	ldr	r0, [pc, #8]	; (8001f80 <CAN1_RX0_IRQHandler+0x10>)
 8001f76:	f001 fe1c 	bl	8003bb2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000258 	.word	0x20000258

08001f84 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001f88:	4802      	ldr	r0, [pc, #8]	; (8001f94 <CAN1_RX1_IRQHandler+0x10>)
 8001f8a:	f001 fe12 	bl	8003bb2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000258 	.word	0x20000258

08001f98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  return 1;
 8001f9c:	2301      	movs	r3, #1
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <_kill>:

int _kill(int pid, int sig)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fb2:	f005 fb23 	bl	80075fc <__errno>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2216      	movs	r2, #22
 8001fba:	601a      	str	r2, [r3, #0]
  return -1;
 8001fbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <_exit>:

void _exit (int status)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f7ff ffe7 	bl	8001fa8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fda:	e7fe      	b.n	8001fda <_exit+0x12>

08001fdc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]
 8001fec:	e00a      	b.n	8002004 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fee:	f3af 8000 	nop.w
 8001ff2:	4601      	mov	r1, r0
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	1c5a      	adds	r2, r3, #1
 8001ff8:	60ba      	str	r2, [r7, #8]
 8001ffa:	b2ca      	uxtb	r2, r1
 8001ffc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	3301      	adds	r3, #1
 8002002:	617b      	str	r3, [r7, #20]
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	429a      	cmp	r2, r3
 800200a:	dbf0      	blt.n	8001fee <_read+0x12>
  }

  return len;
 800200c:	687b      	ldr	r3, [r7, #4]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b086      	sub	sp, #24
 800201a:	af00      	add	r7, sp, #0
 800201c:	60f8      	str	r0, [r7, #12]
 800201e:	60b9      	str	r1, [r7, #8]
 8002020:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002022:	2300      	movs	r3, #0
 8002024:	617b      	str	r3, [r7, #20]
 8002026:	e009      	b.n	800203c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	1c5a      	adds	r2, r3, #1
 800202c:	60ba      	str	r2, [r7, #8]
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff fd27 	bl	8001a84 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	3301      	adds	r3, #1
 800203a:	617b      	str	r3, [r7, #20]
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	429a      	cmp	r2, r3
 8002042:	dbf1      	blt.n	8002028 <_write+0x12>
  }
  return len;
 8002044:	687b      	ldr	r3, [r7, #4]
}
 8002046:	4618      	mov	r0, r3
 8002048:	3718      	adds	r7, #24
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <_close>:

int _close(int file)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002056:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800205a:	4618      	mov	r0, r3
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
 800206e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002076:	605a      	str	r2, [r3, #4]
  return 0;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <_isatty>:

int _isatty(int file)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800208e:	2301      	movs	r3, #1
}
 8002090:	4618      	mov	r0, r3
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3714      	adds	r7, #20
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
	...

080020b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020c0:	4a14      	ldr	r2, [pc, #80]	; (8002114 <_sbrk+0x5c>)
 80020c2:	4b15      	ldr	r3, [pc, #84]	; (8002118 <_sbrk+0x60>)
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020cc:	4b13      	ldr	r3, [pc, #76]	; (800211c <_sbrk+0x64>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d102      	bne.n	80020da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020d4:	4b11      	ldr	r3, [pc, #68]	; (800211c <_sbrk+0x64>)
 80020d6:	4a12      	ldr	r2, [pc, #72]	; (8002120 <_sbrk+0x68>)
 80020d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020da:	4b10      	ldr	r3, [pc, #64]	; (800211c <_sbrk+0x64>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4413      	add	r3, r2
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d207      	bcs.n	80020f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020e8:	f005 fa88 	bl	80075fc <__errno>
 80020ec:	4603      	mov	r3, r0
 80020ee:	220c      	movs	r2, #12
 80020f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020f6:	e009      	b.n	800210c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020f8:	4b08      	ldr	r3, [pc, #32]	; (800211c <_sbrk+0x64>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020fe:	4b07      	ldr	r3, [pc, #28]	; (800211c <_sbrk+0x64>)
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4413      	add	r3, r2
 8002106:	4a05      	ldr	r2, [pc, #20]	; (800211c <_sbrk+0x64>)
 8002108:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800210a:	68fb      	ldr	r3, [r7, #12]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20018000 	.word	0x20018000
 8002118:	00000400 	.word	0x00000400
 800211c:	200004f0 	.word	0x200004f0
 8002120:	20000648 	.word	0x20000648

08002124 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002128:	4b06      	ldr	r3, [pc, #24]	; (8002144 <SystemInit+0x20>)
 800212a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800212e:	4a05      	ldr	r2, [pc, #20]	; (8002144 <SystemInit+0x20>)
 8002130:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002134:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002138:	bf00      	nop
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	e000ed00 	.word	0xe000ed00

08002148 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002148:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002180 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800214c:	f7ff ffea 	bl	8002124 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002150:	480c      	ldr	r0, [pc, #48]	; (8002184 <LoopForever+0x6>)
  ldr r1, =_edata
 8002152:	490d      	ldr	r1, [pc, #52]	; (8002188 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002154:	4a0d      	ldr	r2, [pc, #52]	; (800218c <LoopForever+0xe>)
  movs r3, #0
 8002156:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002158:	e002      	b.n	8002160 <LoopCopyDataInit>

0800215a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800215a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800215c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800215e:	3304      	adds	r3, #4

08002160 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002160:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002162:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002164:	d3f9      	bcc.n	800215a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002166:	4a0a      	ldr	r2, [pc, #40]	; (8002190 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002168:	4c0a      	ldr	r4, [pc, #40]	; (8002194 <LoopForever+0x16>)
  movs r3, #0
 800216a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800216c:	e001      	b.n	8002172 <LoopFillZerobss>

0800216e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800216e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002170:	3204      	adds	r2, #4

08002172 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002172:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002174:	d3fb      	bcc.n	800216e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002176:	f005 fa47 	bl	8007608 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800217a:	f7ff f809 	bl	8001190 <main>

0800217e <LoopForever>:

LoopForever:
    b LoopForever
 800217e:	e7fe      	b.n	800217e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002180:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002184:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002188:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800218c:	08009c5c 	.word	0x08009c5c
  ldr r2, =_sbss
 8002190:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002194:	20000644 	.word	0x20000644

08002198 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002198:	e7fe      	b.n	8002198 <ADC1_2_IRQHandler>
	...

0800219c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021a2:	2300      	movs	r3, #0
 80021a4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021a6:	4b0c      	ldr	r3, [pc, #48]	; (80021d8 <HAL_Init+0x3c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a0b      	ldr	r2, [pc, #44]	; (80021d8 <HAL_Init+0x3c>)
 80021ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021b2:	2003      	movs	r0, #3
 80021b4:	f001 fff2 	bl	800419c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021b8:	2000      	movs	r0, #0
 80021ba:	f000 f80f 	bl	80021dc <HAL_InitTick>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d002      	beq.n	80021ca <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	71fb      	strb	r3, [r7, #7]
 80021c8:	e001      	b.n	80021ce <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021ca:	f7ff fc73 	bl	8001ab4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021ce:	79fb      	ldrb	r3, [r7, #7]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40022000 	.word	0x40022000

080021dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80021e4:	2300      	movs	r3, #0
 80021e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80021e8:	4b17      	ldr	r3, [pc, #92]	; (8002248 <HAL_InitTick+0x6c>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d023      	beq.n	8002238 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80021f0:	4b16      	ldr	r3, [pc, #88]	; (800224c <HAL_InitTick+0x70>)
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	4b14      	ldr	r3, [pc, #80]	; (8002248 <HAL_InitTick+0x6c>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	4619      	mov	r1, r3
 80021fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002202:	fbb2 f3f3 	udiv	r3, r2, r3
 8002206:	4618      	mov	r0, r3
 8002208:	f001 fffd 	bl	8004206 <HAL_SYSTICK_Config>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d10f      	bne.n	8002232 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b0f      	cmp	r3, #15
 8002216:	d809      	bhi.n	800222c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002218:	2200      	movs	r2, #0
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002220:	f001 ffc7 	bl	80041b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002224:	4a0a      	ldr	r2, [pc, #40]	; (8002250 <HAL_InitTick+0x74>)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6013      	str	r3, [r2, #0]
 800222a:	e007      	b.n	800223c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	73fb      	strb	r3, [r7, #15]
 8002230:	e004      	b.n	800223c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	73fb      	strb	r3, [r7, #15]
 8002236:	e001      	b.n	800223c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800223c:	7bfb      	ldrb	r3, [r7, #15]
}
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	2000000c 	.word	0x2000000c
 800224c:	20000004 	.word	0x20000004
 8002250:	20000008 	.word	0x20000008

08002254 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002258:	4b06      	ldr	r3, [pc, #24]	; (8002274 <HAL_IncTick+0x20>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	461a      	mov	r2, r3
 800225e:	4b06      	ldr	r3, [pc, #24]	; (8002278 <HAL_IncTick+0x24>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4413      	add	r3, r2
 8002264:	4a04      	ldr	r2, [pc, #16]	; (8002278 <HAL_IncTick+0x24>)
 8002266:	6013      	str	r3, [r2, #0]
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	2000000c 	.word	0x2000000c
 8002278:	200004f4 	.word	0x200004f4

0800227c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  return uwTick;
 8002280:	4b03      	ldr	r3, [pc, #12]	; (8002290 <HAL_GetTick+0x14>)
 8002282:	681b      	ldr	r3, [r3, #0]
}
 8002284:	4618      	mov	r0, r3
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	200004f4 	.word	0x200004f4

08002294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800229c:	f7ff ffee 	bl	800227c <HAL_GetTick>
 80022a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022ac:	d005      	beq.n	80022ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80022ae:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <HAL_Delay+0x44>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	461a      	mov	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4413      	add	r3, r2
 80022b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022ba:	bf00      	nop
 80022bc:	f7ff ffde 	bl	800227c <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d8f7      	bhi.n	80022bc <HAL_Delay+0x28>
  {
  }
}
 80022cc:	bf00      	nop
 80022ce:	bf00      	nop
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	2000000c 	.word	0x2000000c

080022dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	431a      	orrs	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	609a      	str	r2, [r3, #8]
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
 800230a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	431a      	orrs	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	609a      	str	r2, [r3, #8]
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002338:	4618      	mov	r0, r3
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002344:	b480      	push	{r7}
 8002346:	b087      	sub	sp, #28
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
 8002350:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	3360      	adds	r3, #96	; 0x60
 8002356:	461a      	mov	r2, r3
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	4b08      	ldr	r3, [pc, #32]	; (8002388 <LL_ADC_SetOffset+0x44>)
 8002366:	4013      	ands	r3, r2
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	430a      	orrs	r2, r1
 8002372:	4313      	orrs	r3, r2
 8002374:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800237c:	bf00      	nop
 800237e:	371c      	adds	r7, #28
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	03fff000 	.word	0x03fff000

0800238c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	3360      	adds	r3, #96	; 0x60
 800239a:	461a      	mov	r2, r3
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4413      	add	r3, r2
 80023a2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b087      	sub	sp, #28
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	3360      	adds	r3, #96	; 0x60
 80023c8:	461a      	mov	r2, r3
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	431a      	orrs	r2, r3
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80023e2:	bf00      	nop
 80023e4:	371c      	adds	r7, #28
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80023ee:	b480      	push	{r7}
 80023f0:	b087      	sub	sp, #28
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	60f8      	str	r0, [r7, #12]
 80023f6:	60b9      	str	r1, [r7, #8]
 80023f8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	3330      	adds	r3, #48	; 0x30
 80023fe:	461a      	mov	r2, r3
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	0a1b      	lsrs	r3, r3, #8
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	f003 030c 	and.w	r3, r3, #12
 800240a:	4413      	add	r3, r2
 800240c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	f003 031f 	and.w	r3, r3, #31
 8002418:	211f      	movs	r1, #31
 800241a:	fa01 f303 	lsl.w	r3, r1, r3
 800241e:	43db      	mvns	r3, r3
 8002420:	401a      	ands	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	0e9b      	lsrs	r3, r3, #26
 8002426:	f003 011f 	and.w	r1, r3, #31
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	f003 031f 	and.w	r3, r3, #31
 8002430:	fa01 f303 	lsl.w	r3, r1, r3
 8002434:	431a      	orrs	r2, r3
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800243a:	bf00      	nop
 800243c:	371c      	adds	r7, #28
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002446:	b480      	push	{r7}
 8002448:	b087      	sub	sp, #28
 800244a:	af00      	add	r7, sp, #0
 800244c:	60f8      	str	r0, [r7, #12]
 800244e:	60b9      	str	r1, [r7, #8]
 8002450:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	3314      	adds	r3, #20
 8002456:	461a      	mov	r2, r3
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	0e5b      	lsrs	r3, r3, #25
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	f003 0304 	and.w	r3, r3, #4
 8002462:	4413      	add	r3, r2
 8002464:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	0d1b      	lsrs	r3, r3, #20
 800246e:	f003 031f 	and.w	r3, r3, #31
 8002472:	2107      	movs	r1, #7
 8002474:	fa01 f303 	lsl.w	r3, r1, r3
 8002478:	43db      	mvns	r3, r3
 800247a:	401a      	ands	r2, r3
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	0d1b      	lsrs	r3, r3, #20
 8002480:	f003 031f 	and.w	r3, r3, #31
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	fa01 f303 	lsl.w	r3, r1, r3
 800248a:	431a      	orrs	r2, r3
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002490:	bf00      	nop
 8002492:	371c      	adds	r7, #28
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024b4:	43db      	mvns	r3, r3
 80024b6:	401a      	ands	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f003 0318 	and.w	r3, r3, #24
 80024be:	4908      	ldr	r1, [pc, #32]	; (80024e0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80024c0:	40d9      	lsrs	r1, r3
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	400b      	ands	r3, r1
 80024c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ca:	431a      	orrs	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80024d2:	bf00      	nop
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	0007ffff 	.word	0x0007ffff

080024e4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f003 031f 	and.w	r3, r3, #31
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002510:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	6093      	str	r3, [r2, #8]
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002534:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002538:	d101      	bne.n	800253e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800253a:	2301      	movs	r3, #1
 800253c:	e000      	b.n	8002540 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800255c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002560:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002584:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002588:	d101      	bne.n	800258e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800258a:	2301      	movs	r3, #1
 800258c:	e000      	b.n	8002590 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025b0:	f043 0201 	orr.w	r2, r3, #1
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d101      	bne.n	80025dc <LL_ADC_IsEnabled+0x18>
 80025d8:	2301      	movs	r3, #1
 80025da:	e000      	b.n	80025de <LL_ADC_IsEnabled+0x1a>
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b083      	sub	sp, #12
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025fa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025fe:	f043 0204 	orr.w	r2, r3, #4
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 0304 	and.w	r3, r3, #4
 8002622:	2b04      	cmp	r3, #4
 8002624:	d101      	bne.n	800262a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f003 0308 	and.w	r3, r3, #8
 8002648:	2b08      	cmp	r3, #8
 800264a:	d101      	bne.n	8002650 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800264c:	2301      	movs	r3, #1
 800264e:	e000      	b.n	8002652 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
	...

08002660 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002660:	b590      	push	{r4, r7, lr}
 8002662:	b089      	sub	sp, #36	; 0x24
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002668:	2300      	movs	r3, #0
 800266a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800266c:	2300      	movs	r3, #0
 800266e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e130      	b.n	80028dc <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002684:	2b00      	cmp	r3, #0
 8002686:	d109      	bne.n	800269c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f7ff fa37 	bl	8001afc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff ff3f 	bl	8002524 <LL_ADC_IsDeepPowerDownEnabled>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d004      	beq.n	80026b6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff ff25 	bl	8002500 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff ff5a 	bl	8002574 <LL_ADC_IsInternalRegulatorEnabled>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d115      	bne.n	80026f2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff ff3e 	bl	800254c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026d0:	4b84      	ldr	r3, [pc, #528]	; (80028e4 <HAL_ADC_Init+0x284>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	099b      	lsrs	r3, r3, #6
 80026d6:	4a84      	ldr	r2, [pc, #528]	; (80028e8 <HAL_ADC_Init+0x288>)
 80026d8:	fba2 2303 	umull	r2, r3, r2, r3
 80026dc:	099b      	lsrs	r3, r3, #6
 80026de:	3301      	adds	r3, #1
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80026e4:	e002      	b.n	80026ec <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	3b01      	subs	r3, #1
 80026ea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1f9      	bne.n	80026e6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff ff3c 	bl	8002574 <LL_ADC_IsInternalRegulatorEnabled>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10d      	bne.n	800271e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002706:	f043 0210 	orr.w	r2, r3, #16
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002712:	f043 0201 	orr.w	r2, r3, #1
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff ff75 	bl	8002612 <LL_ADC_REG_IsConversionOngoing>
 8002728:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272e:	f003 0310 	and.w	r3, r3, #16
 8002732:	2b00      	cmp	r3, #0
 8002734:	f040 80c9 	bne.w	80028ca <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	2b00      	cmp	r3, #0
 800273c:	f040 80c5 	bne.w	80028ca <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002744:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002748:	f043 0202 	orr.w	r2, r3, #2
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff ff35 	bl	80025c4 <LL_ADC_IsEnabled>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d115      	bne.n	800278c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002760:	4862      	ldr	r0, [pc, #392]	; (80028ec <HAL_ADC_Init+0x28c>)
 8002762:	f7ff ff2f 	bl	80025c4 <LL_ADC_IsEnabled>
 8002766:	4604      	mov	r4, r0
 8002768:	4861      	ldr	r0, [pc, #388]	; (80028f0 <HAL_ADC_Init+0x290>)
 800276a:	f7ff ff2b 	bl	80025c4 <LL_ADC_IsEnabled>
 800276e:	4603      	mov	r3, r0
 8002770:	431c      	orrs	r4, r3
 8002772:	4860      	ldr	r0, [pc, #384]	; (80028f4 <HAL_ADC_Init+0x294>)
 8002774:	f7ff ff26 	bl	80025c4 <LL_ADC_IsEnabled>
 8002778:	4603      	mov	r3, r0
 800277a:	4323      	orrs	r3, r4
 800277c:	2b00      	cmp	r3, #0
 800277e:	d105      	bne.n	800278c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	4619      	mov	r1, r3
 8002786:	485c      	ldr	r0, [pc, #368]	; (80028f8 <HAL_ADC_Init+0x298>)
 8002788:	f7ff fda8 	bl	80022dc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	7e5b      	ldrb	r3, [r3, #25]
 8002790:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002796:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800279c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80027a2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027aa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027ac:	4313      	orrs	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d106      	bne.n	80027c8 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027be:	3b01      	subs	r3, #1
 80027c0:	045b      	lsls	r3, r3, #17
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d009      	beq.n	80027e4 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027dc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68da      	ldr	r2, [r3, #12]
 80027ea:	4b44      	ldr	r3, [pc, #272]	; (80028fc <HAL_ADC_Init+0x29c>)
 80027ec:	4013      	ands	r3, r2
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	6812      	ldr	r2, [r2, #0]
 80027f2:	69b9      	ldr	r1, [r7, #24]
 80027f4:	430b      	orrs	r3, r1
 80027f6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff ff1b 	bl	8002638 <LL_ADC_INJ_IsConversionOngoing>
 8002802:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d13d      	bne.n	8002886 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d13a      	bne.n	8002886 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002814:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800281c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800281e:	4313      	orrs	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800282c:	f023 0302 	bic.w	r3, r3, #2
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	6812      	ldr	r2, [r2, #0]
 8002834:	69b9      	ldr	r1, [r7, #24]
 8002836:	430b      	orrs	r3, r1
 8002838:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002840:	2b01      	cmp	r3, #1
 8002842:	d118      	bne.n	8002876 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800284e:	f023 0304 	bic.w	r3, r3, #4
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800285a:	4311      	orrs	r1, r2
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002860:	4311      	orrs	r1, r2
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002866:	430a      	orrs	r2, r1
 8002868:	431a      	orrs	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 0201 	orr.w	r2, r2, #1
 8002872:	611a      	str	r2, [r3, #16]
 8002874:	e007      	b.n	8002886 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	691a      	ldr	r2, [r3, #16]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 0201 	bic.w	r2, r2, #1
 8002884:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d10c      	bne.n	80028a8 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002894:	f023 010f 	bic.w	r1, r3, #15
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	69db      	ldr	r3, [r3, #28]
 800289c:	1e5a      	subs	r2, r3, #1
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	631a      	str	r2, [r3, #48]	; 0x30
 80028a6:	e007      	b.n	80028b8 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 020f 	bic.w	r2, r2, #15
 80028b6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028bc:	f023 0303 	bic.w	r3, r3, #3
 80028c0:	f043 0201 	orr.w	r2, r3, #1
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	655a      	str	r2, [r3, #84]	; 0x54
 80028c8:	e007      	b.n	80028da <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ce:	f043 0210 	orr.w	r2, r3, #16
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80028da:	7ffb      	ldrb	r3, [r7, #31]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3724      	adds	r7, #36	; 0x24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd90      	pop	{r4, r7, pc}
 80028e4:	20000004 	.word	0x20000004
 80028e8:	053e2d63 	.word	0x053e2d63
 80028ec:	50040000 	.word	0x50040000
 80028f0:	50040100 	.word	0x50040100
 80028f4:	50040200 	.word	0x50040200
 80028f8:	50040300 	.word	0x50040300
 80028fc:	fff0c007 	.word	0xfff0c007

08002900 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002908:	4857      	ldr	r0, [pc, #348]	; (8002a68 <HAL_ADC_Start+0x168>)
 800290a:	f7ff fdeb 	bl	80024e4 <LL_ADC_GetMultimode>
 800290e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff fe7c 	bl	8002612 <LL_ADC_REG_IsConversionOngoing>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	f040 809c 	bne.w	8002a5a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002928:	2b01      	cmp	r3, #1
 800292a:	d101      	bne.n	8002930 <HAL_ADC_Start+0x30>
 800292c:	2302      	movs	r3, #2
 800292e:	e097      	b.n	8002a60 <HAL_ADC_Start+0x160>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 fc8d 	bl	8003258 <ADC_Enable>
 800293e:	4603      	mov	r3, r0
 8002940:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002942:	7dfb      	ldrb	r3, [r7, #23]
 8002944:	2b00      	cmp	r3, #0
 8002946:	f040 8083 	bne.w	8002a50 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800294e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002952:	f023 0301 	bic.w	r3, r3, #1
 8002956:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a42      	ldr	r2, [pc, #264]	; (8002a6c <HAL_ADC_Start+0x16c>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d002      	beq.n	800296e <HAL_ADC_Start+0x6e>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	e000      	b.n	8002970 <HAL_ADC_Start+0x70>
 800296e:	4b40      	ldr	r3, [pc, #256]	; (8002a70 <HAL_ADC_Start+0x170>)
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6812      	ldr	r2, [r2, #0]
 8002974:	4293      	cmp	r3, r2
 8002976:	d002      	beq.n	800297e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d105      	bne.n	800298a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002982:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800298e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002996:	d106      	bne.n	80029a6 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800299c:	f023 0206 	bic.w	r2, r3, #6
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	659a      	str	r2, [r3, #88]	; 0x58
 80029a4:	e002      	b.n	80029ac <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	221c      	movs	r2, #28
 80029b2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a2a      	ldr	r2, [pc, #168]	; (8002a6c <HAL_ADC_Start+0x16c>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d002      	beq.n	80029cc <HAL_ADC_Start+0xcc>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	e000      	b.n	80029ce <HAL_ADC_Start+0xce>
 80029cc:	4b28      	ldr	r3, [pc, #160]	; (8002a70 <HAL_ADC_Start+0x170>)
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	6812      	ldr	r2, [r2, #0]
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d008      	beq.n	80029e8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d005      	beq.n	80029e8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	2b05      	cmp	r3, #5
 80029e0:	d002      	beq.n	80029e8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	2b09      	cmp	r3, #9
 80029e6:	d114      	bne.n	8002a12 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d007      	beq.n	8002a06 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029fa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029fe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff fded 	bl	80025ea <LL_ADC_REG_StartConversion>
 8002a10:	e025      	b.n	8002a5e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a16:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a12      	ldr	r2, [pc, #72]	; (8002a6c <HAL_ADC_Start+0x16c>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d002      	beq.n	8002a2e <HAL_ADC_Start+0x12e>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	e000      	b.n	8002a30 <HAL_ADC_Start+0x130>
 8002a2e:	4b10      	ldr	r3, [pc, #64]	; (8002a70 <HAL_ADC_Start+0x170>)
 8002a30:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00f      	beq.n	8002a5e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a42:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a46:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	655a      	str	r2, [r3, #84]	; 0x54
 8002a4e:	e006      	b.n	8002a5e <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002a58:	e001      	b.n	8002a5e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3718      	adds	r7, #24
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	50040300 	.word	0x50040300
 8002a6c:	50040100 	.word	0x50040100
 8002a70:	50040000 	.word	0x50040000

08002a74 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b0b6      	sub	sp, #216	; 0xd8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d101      	bne.n	8002a96 <HAL_ADC_ConfigChannel+0x22>
 8002a92:	2302      	movs	r3, #2
 8002a94:	e3c9      	b.n	800322a <HAL_ADC_ConfigChannel+0x7b6>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff fdb5 	bl	8002612 <LL_ADC_REG_IsConversionOngoing>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f040 83aa 	bne.w	8003204 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	2b05      	cmp	r3, #5
 8002abe:	d824      	bhi.n	8002b0a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	3b02      	subs	r3, #2
 8002ac6:	2b03      	cmp	r3, #3
 8002ac8:	d81b      	bhi.n	8002b02 <HAL_ADC_ConfigChannel+0x8e>
 8002aca:	a201      	add	r2, pc, #4	; (adr r2, 8002ad0 <HAL_ADC_ConfigChannel+0x5c>)
 8002acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad0:	08002ae1 	.word	0x08002ae1
 8002ad4:	08002ae9 	.word	0x08002ae9
 8002ad8:	08002af1 	.word	0x08002af1
 8002adc:	08002af9 	.word	0x08002af9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002ae0:	230c      	movs	r3, #12
 8002ae2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002ae6:	e010      	b.n	8002b0a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002ae8:	2312      	movs	r3, #18
 8002aea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002aee:	e00c      	b.n	8002b0a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002af0:	2318      	movs	r3, #24
 8002af2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002af6:	e008      	b.n	8002b0a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002af8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002afc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002b00:	e003      	b.n	8002b0a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002b02:	2306      	movs	r3, #6
 8002b04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002b08:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6818      	ldr	r0, [r3, #0]
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	461a      	mov	r2, r3
 8002b14:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002b18:	f7ff fc69 	bl	80023ee <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff fd76 	bl	8002612 <LL_ADC_REG_IsConversionOngoing>
 8002b26:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff fd82 	bl	8002638 <LL_ADC_INJ_IsConversionOngoing>
 8002b34:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f040 81a4 	bne.w	8002e8a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f040 819f 	bne.w	8002e8a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6818      	ldr	r0, [r3, #0]
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	6819      	ldr	r1, [r3, #0]
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	461a      	mov	r2, r3
 8002b5a:	f7ff fc74 	bl	8002446 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	695a      	ldr	r2, [r3, #20]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	08db      	lsrs	r3, r3, #3
 8002b6a:	f003 0303 	and.w	r3, r3, #3
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d00a      	beq.n	8002b96 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6818      	ldr	r0, [r3, #0]
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	6919      	ldr	r1, [r3, #16]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b90:	f7ff fbd8 	bl	8002344 <LL_ADC_SetOffset>
 8002b94:	e179      	b.n	8002e8a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff fbf5 	bl	800238c <LL_ADC_GetOffsetChannel>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10a      	bne.n	8002bc2 <HAL_ADC_ConfigChannel+0x14e>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7ff fbea 	bl	800238c <LL_ADC_GetOffsetChannel>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	0e9b      	lsrs	r3, r3, #26
 8002bbc:	f003 021f 	and.w	r2, r3, #31
 8002bc0:	e01e      	b.n	8002c00 <HAL_ADC_ConfigChannel+0x18c>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff fbdf 	bl	800238c <LL_ADC_GetOffsetChannel>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002bd8:	fa93 f3a3 	rbit	r3, r3
 8002bdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002be0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002be4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002be8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002bf0:	2320      	movs	r3, #32
 8002bf2:	e004      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002bf4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002bf8:	fab3 f383 	clz	r3, r3
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d105      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x1a4>
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	0e9b      	lsrs	r3, r3, #26
 8002c12:	f003 031f 	and.w	r3, r3, #31
 8002c16:	e018      	b.n	8002c4a <HAL_ADC_ConfigChannel+0x1d6>
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c24:	fa93 f3a3 	rbit	r3, r3
 8002c28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002c2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002c34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002c3c:	2320      	movs	r3, #32
 8002c3e:	e004      	b.n	8002c4a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002c40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002c44:	fab3 f383 	clz	r3, r3
 8002c48:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d106      	bne.n	8002c5c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2200      	movs	r2, #0
 8002c54:	2100      	movs	r1, #0
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7ff fbae 	bl	80023b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2101      	movs	r1, #1
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7ff fb92 	bl	800238c <LL_ADC_GetOffsetChannel>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10a      	bne.n	8002c88 <HAL_ADC_ConfigChannel+0x214>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2101      	movs	r1, #1
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff fb87 	bl	800238c <LL_ADC_GetOffsetChannel>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	0e9b      	lsrs	r3, r3, #26
 8002c82:	f003 021f 	and.w	r2, r3, #31
 8002c86:	e01e      	b.n	8002cc6 <HAL_ADC_ConfigChannel+0x252>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff fb7c 	bl	800238c <LL_ADC_GetOffsetChannel>
 8002c94:	4603      	mov	r3, r0
 8002c96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c9e:	fa93 f3a3 	rbit	r3, r3
 8002ca2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002ca6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002caa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002cae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002cb6:	2320      	movs	r3, #32
 8002cb8:	e004      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002cba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002cbe:	fab3 f383 	clz	r3, r3
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d105      	bne.n	8002cde <HAL_ADC_ConfigChannel+0x26a>
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	0e9b      	lsrs	r3, r3, #26
 8002cd8:	f003 031f 	and.w	r3, r3, #31
 8002cdc:	e018      	b.n	8002d10 <HAL_ADC_ConfigChannel+0x29c>
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002cea:	fa93 f3a3 	rbit	r3, r3
 8002cee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002cf2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002cf6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002cfa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002d02:	2320      	movs	r3, #32
 8002d04:	e004      	b.n	8002d10 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002d06:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d0a:	fab3 f383 	clz	r3, r3
 8002d0e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d106      	bne.n	8002d22 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff fb4b 	bl	80023b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2102      	movs	r1, #2
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff fb2f 	bl	800238c <LL_ADC_GetOffsetChannel>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10a      	bne.n	8002d4e <HAL_ADC_ConfigChannel+0x2da>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2102      	movs	r1, #2
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7ff fb24 	bl	800238c <LL_ADC_GetOffsetChannel>
 8002d44:	4603      	mov	r3, r0
 8002d46:	0e9b      	lsrs	r3, r3, #26
 8002d48:	f003 021f 	and.w	r2, r3, #31
 8002d4c:	e01e      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x318>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2102      	movs	r1, #2
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff fb19 	bl	800238c <LL_ADC_GetOffsetChannel>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d64:	fa93 f3a3 	rbit	r3, r3
 8002d68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002d6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002d74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002d7c:	2320      	movs	r3, #32
 8002d7e:	e004      	b.n	8002d8a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002d80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d84:	fab3 f383 	clz	r3, r3
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d105      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x330>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	0e9b      	lsrs	r3, r3, #26
 8002d9e:	f003 031f 	and.w	r3, r3, #31
 8002da2:	e014      	b.n	8002dce <HAL_ADC_ConfigChannel+0x35a>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002daa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002dac:	fa93 f3a3 	rbit	r3, r3
 8002db0:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002db2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002db4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002db8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002dc0:	2320      	movs	r3, #32
 8002dc2:	e004      	b.n	8002dce <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002dc4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002dc8:	fab3 f383 	clz	r3, r3
 8002dcc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d106      	bne.n	8002de0 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	2102      	movs	r1, #2
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff faec 	bl	80023b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2103      	movs	r1, #3
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff fad0 	bl	800238c <LL_ADC_GetOffsetChannel>
 8002dec:	4603      	mov	r3, r0
 8002dee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10a      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x398>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2103      	movs	r1, #3
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff fac5 	bl	800238c <LL_ADC_GetOffsetChannel>
 8002e02:	4603      	mov	r3, r0
 8002e04:	0e9b      	lsrs	r3, r3, #26
 8002e06:	f003 021f 	and.w	r2, r3, #31
 8002e0a:	e017      	b.n	8002e3c <HAL_ADC_ConfigChannel+0x3c8>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2103      	movs	r1, #3
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff faba 	bl	800238c <LL_ADC_GetOffsetChannel>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e1e:	fa93 f3a3 	rbit	r3, r3
 8002e22:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e26:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002e28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002e2e:	2320      	movs	r3, #32
 8002e30:	e003      	b.n	8002e3a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002e32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e34:	fab3 f383 	clz	r3, r3
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d105      	bne.n	8002e54 <HAL_ADC_ConfigChannel+0x3e0>
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	0e9b      	lsrs	r3, r3, #26
 8002e4e:	f003 031f 	and.w	r3, r3, #31
 8002e52:	e011      	b.n	8002e78 <HAL_ADC_ConfigChannel+0x404>
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e5c:	fa93 f3a3 	rbit	r3, r3
 8002e60:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002e62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e64:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002e66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002e6c:	2320      	movs	r3, #32
 8002e6e:	e003      	b.n	8002e78 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002e70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e72:	fab3 f383 	clz	r3, r3
 8002e76:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d106      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2200      	movs	r2, #0
 8002e82:	2103      	movs	r1, #3
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff fa97 	bl	80023b8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7ff fb98 	bl	80025c4 <LL_ADC_IsEnabled>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f040 8140 	bne.w	800311c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6818      	ldr	r0, [r3, #0]
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	6819      	ldr	r1, [r3, #0]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	f7ff faf7 	bl	800249c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	4a8f      	ldr	r2, [pc, #572]	; (80030f0 <HAL_ADC_ConfigChannel+0x67c>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	f040 8131 	bne.w	800311c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10b      	bne.n	8002ee2 <HAL_ADC_ConfigChannel+0x46e>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	0e9b      	lsrs	r3, r3, #26
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	f003 031f 	and.w	r3, r3, #31
 8002ed6:	2b09      	cmp	r3, #9
 8002ed8:	bf94      	ite	ls
 8002eda:	2301      	movls	r3, #1
 8002edc:	2300      	movhi	r3, #0
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	e019      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x4a2>
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002eea:	fa93 f3a3 	rbit	r3, r3
 8002eee:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002ef0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ef2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002ef4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002efa:	2320      	movs	r3, #32
 8002efc:	e003      	b.n	8002f06 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002efe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f00:	fab3 f383 	clz	r3, r3
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	3301      	adds	r3, #1
 8002f08:	f003 031f 	and.w	r3, r3, #31
 8002f0c:	2b09      	cmp	r3, #9
 8002f0e:	bf94      	ite	ls
 8002f10:	2301      	movls	r3, #1
 8002f12:	2300      	movhi	r3, #0
 8002f14:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d079      	beq.n	800300e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d107      	bne.n	8002f36 <HAL_ADC_ConfigChannel+0x4c2>
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	0e9b      	lsrs	r3, r3, #26
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	069b      	lsls	r3, r3, #26
 8002f30:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f34:	e015      	b.n	8002f62 <HAL_ADC_ConfigChannel+0x4ee>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f3e:	fa93 f3a3 	rbit	r3, r3
 8002f42:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002f44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f46:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002f48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002f4e:	2320      	movs	r3, #32
 8002f50:	e003      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002f52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f54:	fab3 f383 	clz	r3, r3
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	069b      	lsls	r3, r3, #26
 8002f5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d109      	bne.n	8002f82 <HAL_ADC_ConfigChannel+0x50e>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	0e9b      	lsrs	r3, r3, #26
 8002f74:	3301      	adds	r3, #1
 8002f76:	f003 031f 	and.w	r3, r3, #31
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f80:	e017      	b.n	8002fb2 <HAL_ADC_ConfigChannel+0x53e>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f8a:	fa93 f3a3 	rbit	r3, r3
 8002f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002f90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f92:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002f94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002f9a:	2320      	movs	r3, #32
 8002f9c:	e003      	b.n	8002fa6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002f9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fa0:	fab3 f383 	clz	r3, r3
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	f003 031f 	and.w	r3, r3, #31
 8002fac:	2101      	movs	r1, #1
 8002fae:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb2:	ea42 0103 	orr.w	r1, r2, r3
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10a      	bne.n	8002fd8 <HAL_ADC_ConfigChannel+0x564>
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	0e9b      	lsrs	r3, r3, #26
 8002fc8:	3301      	adds	r3, #1
 8002fca:	f003 021f 	and.w	r2, r3, #31
 8002fce:	4613      	mov	r3, r2
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	4413      	add	r3, r2
 8002fd4:	051b      	lsls	r3, r3, #20
 8002fd6:	e018      	b.n	800300a <HAL_ADC_ConfigChannel+0x596>
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fe0:	fa93 f3a3 	rbit	r3, r3
 8002fe4:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002ff0:	2320      	movs	r3, #32
 8002ff2:	e003      	b.n	8002ffc <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff6:	fab3 f383 	clz	r3, r3
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	f003 021f 	and.w	r2, r3, #31
 8003002:	4613      	mov	r3, r2
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	4413      	add	r3, r2
 8003008:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800300a:	430b      	orrs	r3, r1
 800300c:	e081      	b.n	8003112 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003016:	2b00      	cmp	r3, #0
 8003018:	d107      	bne.n	800302a <HAL_ADC_ConfigChannel+0x5b6>
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	0e9b      	lsrs	r3, r3, #26
 8003020:	3301      	adds	r3, #1
 8003022:	069b      	lsls	r3, r3, #26
 8003024:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003028:	e015      	b.n	8003056 <HAL_ADC_ConfigChannel+0x5e2>
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003032:	fa93 f3a3 	rbit	r3, r3
 8003036:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800303c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8003042:	2320      	movs	r3, #32
 8003044:	e003      	b.n	800304e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8003046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003048:	fab3 f383 	clz	r3, r3
 800304c:	b2db      	uxtb	r3, r3
 800304e:	3301      	adds	r3, #1
 8003050:	069b      	lsls	r3, r3, #26
 8003052:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800305e:	2b00      	cmp	r3, #0
 8003060:	d109      	bne.n	8003076 <HAL_ADC_ConfigChannel+0x602>
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	0e9b      	lsrs	r3, r3, #26
 8003068:	3301      	adds	r3, #1
 800306a:	f003 031f 	and.w	r3, r3, #31
 800306e:	2101      	movs	r1, #1
 8003070:	fa01 f303 	lsl.w	r3, r1, r3
 8003074:	e017      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x632>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	fa93 f3a3 	rbit	r3, r3
 8003082:	61bb      	str	r3, [r7, #24]
  return result;
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003088:	6a3b      	ldr	r3, [r7, #32]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800308e:	2320      	movs	r3, #32
 8003090:	e003      	b.n	800309a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003092:	6a3b      	ldr	r3, [r7, #32]
 8003094:	fab3 f383 	clz	r3, r3
 8003098:	b2db      	uxtb	r3, r3
 800309a:	3301      	adds	r3, #1
 800309c:	f003 031f 	and.w	r3, r3, #31
 80030a0:	2101      	movs	r1, #1
 80030a2:	fa01 f303 	lsl.w	r3, r1, r3
 80030a6:	ea42 0103 	orr.w	r1, r2, r3
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10d      	bne.n	80030d2 <HAL_ADC_ConfigChannel+0x65e>
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	0e9b      	lsrs	r3, r3, #26
 80030bc:	3301      	adds	r3, #1
 80030be:	f003 021f 	and.w	r2, r3, #31
 80030c2:	4613      	mov	r3, r2
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	4413      	add	r3, r2
 80030c8:	3b1e      	subs	r3, #30
 80030ca:	051b      	lsls	r3, r3, #20
 80030cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030d0:	e01e      	b.n	8003110 <HAL_ADC_ConfigChannel+0x69c>
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	fa93 f3a3 	rbit	r3, r3
 80030de:	60fb      	str	r3, [r7, #12]
  return result;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d104      	bne.n	80030f4 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80030ea:	2320      	movs	r3, #32
 80030ec:	e006      	b.n	80030fc <HAL_ADC_ConfigChannel+0x688>
 80030ee:	bf00      	nop
 80030f0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	fab3 f383 	clz	r3, r3
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	3301      	adds	r3, #1
 80030fe:	f003 021f 	and.w	r2, r3, #31
 8003102:	4613      	mov	r3, r2
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	4413      	add	r3, r2
 8003108:	3b1e      	subs	r3, #30
 800310a:	051b      	lsls	r3, r3, #20
 800310c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003110:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003116:	4619      	mov	r1, r3
 8003118:	f7ff f995 	bl	8002446 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	4b44      	ldr	r3, [pc, #272]	; (8003234 <HAL_ADC_ConfigChannel+0x7c0>)
 8003122:	4013      	ands	r3, r2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d07a      	beq.n	800321e <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003128:	4843      	ldr	r0, [pc, #268]	; (8003238 <HAL_ADC_ConfigChannel+0x7c4>)
 800312a:	f7ff f8fd 	bl	8002328 <LL_ADC_GetCommonPathInternalCh>
 800312e:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a41      	ldr	r2, [pc, #260]	; (800323c <HAL_ADC_ConfigChannel+0x7c8>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d12c      	bne.n	8003196 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800313c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003140:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d126      	bne.n	8003196 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a3c      	ldr	r2, [pc, #240]	; (8003240 <HAL_ADC_ConfigChannel+0x7cc>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d004      	beq.n	800315c <HAL_ADC_ConfigChannel+0x6e8>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a3b      	ldr	r2, [pc, #236]	; (8003244 <HAL_ADC_ConfigChannel+0x7d0>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d15d      	bne.n	8003218 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800315c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003160:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003164:	4619      	mov	r1, r3
 8003166:	4834      	ldr	r0, [pc, #208]	; (8003238 <HAL_ADC_ConfigChannel+0x7c4>)
 8003168:	f7ff f8cb 	bl	8002302 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800316c:	4b36      	ldr	r3, [pc, #216]	; (8003248 <HAL_ADC_ConfigChannel+0x7d4>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	099b      	lsrs	r3, r3, #6
 8003172:	4a36      	ldr	r2, [pc, #216]	; (800324c <HAL_ADC_ConfigChannel+0x7d8>)
 8003174:	fba2 2303 	umull	r2, r3, r2, r3
 8003178:	099b      	lsrs	r3, r3, #6
 800317a:	1c5a      	adds	r2, r3, #1
 800317c:	4613      	mov	r3, r2
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	4413      	add	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003186:	e002      	b.n	800318e <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	3b01      	subs	r3, #1
 800318c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1f9      	bne.n	8003188 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003194:	e040      	b.n	8003218 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a2d      	ldr	r2, [pc, #180]	; (8003250 <HAL_ADC_ConfigChannel+0x7dc>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d118      	bne.n	80031d2 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80031a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d112      	bne.n	80031d2 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a23      	ldr	r2, [pc, #140]	; (8003240 <HAL_ADC_ConfigChannel+0x7cc>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d004      	beq.n	80031c0 <HAL_ADC_ConfigChannel+0x74c>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a22      	ldr	r2, [pc, #136]	; (8003244 <HAL_ADC_ConfigChannel+0x7d0>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d12d      	bne.n	800321c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80031c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031c8:	4619      	mov	r1, r3
 80031ca:	481b      	ldr	r0, [pc, #108]	; (8003238 <HAL_ADC_ConfigChannel+0x7c4>)
 80031cc:	f7ff f899 	bl	8002302 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031d0:	e024      	b.n	800321c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a1f      	ldr	r2, [pc, #124]	; (8003254 <HAL_ADC_ConfigChannel+0x7e0>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d120      	bne.n	800321e <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80031dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80031e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d11a      	bne.n	800321e <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a14      	ldr	r2, [pc, #80]	; (8003240 <HAL_ADC_ConfigChannel+0x7cc>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d115      	bne.n	800321e <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80031f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031fa:	4619      	mov	r1, r3
 80031fc:	480e      	ldr	r0, [pc, #56]	; (8003238 <HAL_ADC_ConfigChannel+0x7c4>)
 80031fe:	f7ff f880 	bl	8002302 <LL_ADC_SetCommonPathInternalCh>
 8003202:	e00c      	b.n	800321e <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003208:	f043 0220 	orr.w	r2, r3, #32
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003216:	e002      	b.n	800321e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003218:	bf00      	nop
 800321a:	e000      	b.n	800321e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800321c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003226:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800322a:	4618      	mov	r0, r3
 800322c:	37d8      	adds	r7, #216	; 0xd8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	80080000 	.word	0x80080000
 8003238:	50040300 	.word	0x50040300
 800323c:	c7520000 	.word	0xc7520000
 8003240:	50040000 	.word	0x50040000
 8003244:	50040200 	.word	0x50040200
 8003248:	20000004 	.word	0x20000004
 800324c:	053e2d63 	.word	0x053e2d63
 8003250:	cb840000 	.word	0xcb840000
 8003254:	80000001 	.word	0x80000001

08003258 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003260:	2300      	movs	r3, #0
 8003262:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4618      	mov	r0, r3
 800326a:	f7ff f9ab 	bl	80025c4 <LL_ADC_IsEnabled>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d169      	bne.n	8003348 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689a      	ldr	r2, [r3, #8]
 800327a:	4b36      	ldr	r3, [pc, #216]	; (8003354 <ADC_Enable+0xfc>)
 800327c:	4013      	ands	r3, r2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00d      	beq.n	800329e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003286:	f043 0210 	orr.w	r2, r3, #16
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003292:	f043 0201 	orr.w	r2, r3, #1
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e055      	b.n	800334a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7ff f97a 	bl	800259c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80032a8:	482b      	ldr	r0, [pc, #172]	; (8003358 <ADC_Enable+0x100>)
 80032aa:	f7ff f83d 	bl	8002328 <LL_ADC_GetCommonPathInternalCh>
 80032ae:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80032b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d013      	beq.n	80032e0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032b8:	4b28      	ldr	r3, [pc, #160]	; (800335c <ADC_Enable+0x104>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	099b      	lsrs	r3, r3, #6
 80032be:	4a28      	ldr	r2, [pc, #160]	; (8003360 <ADC_Enable+0x108>)
 80032c0:	fba2 2303 	umull	r2, r3, r2, r3
 80032c4:	099b      	lsrs	r3, r3, #6
 80032c6:	1c5a      	adds	r2, r3, #1
 80032c8:	4613      	mov	r3, r2
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	4413      	add	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80032d2:	e002      	b.n	80032da <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1f9      	bne.n	80032d4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80032e0:	f7fe ffcc 	bl	800227c <HAL_GetTick>
 80032e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032e6:	e028      	b.n	800333a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff f969 	bl	80025c4 <LL_ADC_IsEnabled>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d104      	bne.n	8003302 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff f94d 	bl	800259c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003302:	f7fe ffbb 	bl	800227c <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d914      	bls.n	800333a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b01      	cmp	r3, #1
 800331c:	d00d      	beq.n	800333a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003322:	f043 0210 	orr.w	r2, r3, #16
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800332e:	f043 0201 	orr.w	r2, r3, #1
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e007      	b.n	800334a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b01      	cmp	r3, #1
 8003346:	d1cf      	bne.n	80032e8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	8000003f 	.word	0x8000003f
 8003358:	50040300 	.word	0x50040300
 800335c:	20000004 	.word	0x20000004
 8003360:	053e2d63 	.word	0x053e2d63

08003364 <LL_ADC_IsEnabled>:
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	2b01      	cmp	r3, #1
 8003376:	d101      	bne.n	800337c <LL_ADC_IsEnabled+0x18>
 8003378:	2301      	movs	r3, #1
 800337a:	e000      	b.n	800337e <LL_ADC_IsEnabled+0x1a>
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <LL_ADC_REG_IsConversionOngoing>:
{
 800338a:	b480      	push	{r7}
 800338c:	b083      	sub	sp, #12
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 0304 	and.w	r3, r3, #4
 800339a:	2b04      	cmp	r3, #4
 800339c:	d101      	bne.n	80033a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800339e:	2301      	movs	r3, #1
 80033a0:	e000      	b.n	80033a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80033b0:	b590      	push	{r4, r7, lr}
 80033b2:	b09f      	sub	sp, #124	; 0x7c
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033ba:	2300      	movs	r3, #0
 80033bc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d101      	bne.n	80033ce <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80033ca:	2302      	movs	r3, #2
 80033cc:	e093      	b.n	80034f6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80033d6:	2300      	movs	r3, #0
 80033d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80033da:	2300      	movs	r3, #0
 80033dc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a47      	ldr	r2, [pc, #284]	; (8003500 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d102      	bne.n	80033ee <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80033e8:	4b46      	ldr	r3, [pc, #280]	; (8003504 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80033ea:	60bb      	str	r3, [r7, #8]
 80033ec:	e001      	b.n	80033f2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80033ee:	2300      	movs	r3, #0
 80033f0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d10b      	bne.n	8003410 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fc:	f043 0220 	orr.w	r2, r3, #32
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e072      	b.n	80034f6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	4618      	mov	r0, r3
 8003414:	f7ff ffb9 	bl	800338a <LL_ADC_REG_IsConversionOngoing>
 8003418:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4618      	mov	r0, r3
 8003420:	f7ff ffb3 	bl	800338a <LL_ADC_REG_IsConversionOngoing>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d154      	bne.n	80034d4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800342a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800342c:	2b00      	cmp	r3, #0
 800342e:	d151      	bne.n	80034d4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003430:	4b35      	ldr	r3, [pc, #212]	; (8003508 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003432:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d02c      	beq.n	8003496 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800343c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	6859      	ldr	r1, [r3, #4]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800344e:	035b      	lsls	r3, r3, #13
 8003450:	430b      	orrs	r3, r1
 8003452:	431a      	orrs	r2, r3
 8003454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003456:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003458:	4829      	ldr	r0, [pc, #164]	; (8003500 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800345a:	f7ff ff83 	bl	8003364 <LL_ADC_IsEnabled>
 800345e:	4604      	mov	r4, r0
 8003460:	4828      	ldr	r0, [pc, #160]	; (8003504 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003462:	f7ff ff7f 	bl	8003364 <LL_ADC_IsEnabled>
 8003466:	4603      	mov	r3, r0
 8003468:	431c      	orrs	r4, r3
 800346a:	4828      	ldr	r0, [pc, #160]	; (800350c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800346c:	f7ff ff7a 	bl	8003364 <LL_ADC_IsEnabled>
 8003470:	4603      	mov	r3, r0
 8003472:	4323      	orrs	r3, r4
 8003474:	2b00      	cmp	r3, #0
 8003476:	d137      	bne.n	80034e8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003480:	f023 030f 	bic.w	r3, r3, #15
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	6811      	ldr	r1, [r2, #0]
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	6892      	ldr	r2, [r2, #8]
 800348c:	430a      	orrs	r2, r1
 800348e:	431a      	orrs	r2, r3
 8003490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003492:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003494:	e028      	b.n	80034e8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800349e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034a0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034a2:	4817      	ldr	r0, [pc, #92]	; (8003500 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80034a4:	f7ff ff5e 	bl	8003364 <LL_ADC_IsEnabled>
 80034a8:	4604      	mov	r4, r0
 80034aa:	4816      	ldr	r0, [pc, #88]	; (8003504 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80034ac:	f7ff ff5a 	bl	8003364 <LL_ADC_IsEnabled>
 80034b0:	4603      	mov	r3, r0
 80034b2:	431c      	orrs	r4, r3
 80034b4:	4815      	ldr	r0, [pc, #84]	; (800350c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80034b6:	f7ff ff55 	bl	8003364 <LL_ADC_IsEnabled>
 80034ba:	4603      	mov	r3, r0
 80034bc:	4323      	orrs	r3, r4
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d112      	bne.n	80034e8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80034c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80034ca:	f023 030f 	bic.w	r3, r3, #15
 80034ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80034d0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80034d2:	e009      	b.n	80034e8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d8:	f043 0220 	orr.w	r2, r3, #32
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80034e6:	e000      	b.n	80034ea <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80034e8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80034f2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	377c      	adds	r7, #124	; 0x7c
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd90      	pop	{r4, r7, pc}
 80034fe:	bf00      	nop
 8003500:	50040000 	.word	0x50040000
 8003504:	50040100 	.word	0x50040100
 8003508:	50040300 	.word	0x50040300
 800350c:	50040200 	.word	0x50040200

08003510 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e0ed      	b.n	80036fe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d102      	bne.n	8003534 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f7fe fb4e 	bl	8001bd0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f042 0201 	orr.w	r2, r2, #1
 8003542:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003544:	f7fe fe9a 	bl	800227c <HAL_GetTick>
 8003548:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800354a:	e012      	b.n	8003572 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800354c:	f7fe fe96 	bl	800227c <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b0a      	cmp	r3, #10
 8003558:	d90b      	bls.n	8003572 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2205      	movs	r2, #5
 800356a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e0c5      	b.n	80036fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0e5      	beq.n	800354c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 0202 	bic.w	r2, r2, #2
 800358e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003590:	f7fe fe74 	bl	800227c <HAL_GetTick>
 8003594:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003596:	e012      	b.n	80035be <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003598:	f7fe fe70 	bl	800227c <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b0a      	cmp	r3, #10
 80035a4:	d90b      	bls.n	80035be <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2205      	movs	r2, #5
 80035b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e09f      	b.n	80036fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1e5      	bne.n	8003598 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	7e1b      	ldrb	r3, [r3, #24]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d108      	bne.n	80035e6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	e007      	b.n	80035f6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	7e5b      	ldrb	r3, [r3, #25]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d108      	bne.n	8003610 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	e007      	b.n	8003620 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800361e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	7e9b      	ldrb	r3, [r3, #26]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d108      	bne.n	800363a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f042 0220 	orr.w	r2, r2, #32
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	e007      	b.n	800364a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 0220 	bic.w	r2, r2, #32
 8003648:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	7edb      	ldrb	r3, [r3, #27]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d108      	bne.n	8003664 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0210 	bic.w	r2, r2, #16
 8003660:	601a      	str	r2, [r3, #0]
 8003662:	e007      	b.n	8003674 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f042 0210 	orr.w	r2, r2, #16
 8003672:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	7f1b      	ldrb	r3, [r3, #28]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d108      	bne.n	800368e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f042 0208 	orr.w	r2, r2, #8
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	e007      	b.n	800369e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 0208 	bic.w	r2, r2, #8
 800369c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	7f5b      	ldrb	r3, [r3, #29]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d108      	bne.n	80036b8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f042 0204 	orr.w	r2, r2, #4
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	e007      	b.n	80036c8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 0204 	bic.w	r2, r2, #4
 80036c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	431a      	orrs	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	431a      	orrs	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	ea42 0103 	orr.w	r1, r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	1e5a      	subs	r2, r3, #1
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003706:	b480      	push	{r7}
 8003708:	b087      	sub	sp, #28
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
 800370e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 3020 	ldrb.w	r3, [r3, #32]
 800371c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800371e:	7cfb      	ldrb	r3, [r7, #19]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d003      	beq.n	800372c <HAL_CAN_ConfigFilter+0x26>
 8003724:	7cfb      	ldrb	r3, [r7, #19]
 8003726:	2b02      	cmp	r3, #2
 8003728:	f040 80aa 	bne.w	8003880 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003732:	f043 0201 	orr.w	r2, r3, #1
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	f003 031f 	and.w	r3, r3, #31
 8003744:	2201      	movs	r2, #1
 8003746:	fa02 f303 	lsl.w	r3, r2, r3
 800374a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	43db      	mvns	r3, r3
 8003756:	401a      	ands	r2, r3
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d123      	bne.n	80037ae <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	43db      	mvns	r3, r3
 8003770:	401a      	ands	r2, r3
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003788:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	3248      	adds	r2, #72	; 0x48
 800378e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80037a2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80037a4:	6979      	ldr	r1, [r7, #20]
 80037a6:	3348      	adds	r3, #72	; 0x48
 80037a8:	00db      	lsls	r3, r3, #3
 80037aa:	440b      	add	r3, r1
 80037ac:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d122      	bne.n	80037fc <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	431a      	orrs	r2, r3
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80037d6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	3248      	adds	r2, #72	; 0x48
 80037dc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80037f0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80037f2:	6979      	ldr	r1, [r7, #20]
 80037f4:	3348      	adds	r3, #72	; 0x48
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	440b      	add	r3, r1
 80037fa:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d109      	bne.n	8003818 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	43db      	mvns	r3, r3
 800380e:	401a      	ands	r2, r3
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003816:	e007      	b.n	8003828 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	431a      	orrs	r2, r3
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d109      	bne.n	8003844 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	43db      	mvns	r3, r3
 800383a:	401a      	ands	r2, r3
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003842:	e007      	b.n	8003854 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	431a      	orrs	r2, r3
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d107      	bne.n	800386c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	431a      	orrs	r2, r3
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003872:	f023 0201 	bic.w	r2, r3, #1
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800387c:	2300      	movs	r3, #0
 800387e:	e006      	b.n	800388e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
  }
}
 800388e:	4618      	mov	r0, r3
 8003890:	371c      	adds	r7, #28
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b084      	sub	sp, #16
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d12e      	bne.n	800390c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2202      	movs	r2, #2
 80038b2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 0201 	bic.w	r2, r2, #1
 80038c4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80038c6:	f7fe fcd9 	bl	800227c <HAL_GetTick>
 80038ca:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80038cc:	e012      	b.n	80038f4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80038ce:	f7fe fcd5 	bl	800227c <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b0a      	cmp	r3, #10
 80038da:	d90b      	bls.n	80038f4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2205      	movs	r2, #5
 80038ec:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e012      	b.n	800391a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1e5      	bne.n	80038ce <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003908:	2300      	movs	r3, #0
 800390a:	e006      	b.n	800391a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003910:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
  }
}
 800391a:	4618      	mov	r0, r3
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003922:	b480      	push	{r7}
 8003924:	b087      	sub	sp, #28
 8003926:	af00      	add	r7, sp, #0
 8003928:	60f8      	str	r0, [r7, #12]
 800392a:	60b9      	str	r1, [r7, #8]
 800392c:	607a      	str	r2, [r7, #4]
 800392e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003936:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003938:	7dfb      	ldrb	r3, [r7, #23]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d003      	beq.n	8003946 <HAL_CAN_GetRxMessage+0x24>
 800393e:	7dfb      	ldrb	r3, [r7, #23]
 8003940:	2b02      	cmp	r3, #2
 8003942:	f040 8103 	bne.w	8003b4c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10e      	bne.n	800396a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	f003 0303 	and.w	r3, r3, #3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d116      	bne.n	8003988 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e0f7      	b.n	8003b5a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	f003 0303 	and.w	r3, r3, #3
 8003974:	2b00      	cmp	r3, #0
 8003976:	d107      	bne.n	8003988 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e0e8      	b.n	8003b5a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	331b      	adds	r3, #27
 8003990:	011b      	lsls	r3, r3, #4
 8003992:	4413      	add	r3, r2
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0204 	and.w	r2, r3, #4
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10c      	bne.n	80039c0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	331b      	adds	r3, #27
 80039ae:	011b      	lsls	r3, r3, #4
 80039b0:	4413      	add	r3, r2
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	0d5b      	lsrs	r3, r3, #21
 80039b6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	e00b      	b.n	80039d8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	331b      	adds	r3, #27
 80039c8:	011b      	lsls	r3, r3, #4
 80039ca:	4413      	add	r3, r2
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	08db      	lsrs	r3, r3, #3
 80039d0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	331b      	adds	r3, #27
 80039e0:	011b      	lsls	r3, r3, #4
 80039e2:	4413      	add	r3, r2
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0202 	and.w	r2, r3, #2
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	331b      	adds	r3, #27
 80039f6:	011b      	lsls	r3, r3, #4
 80039f8:	4413      	add	r3, r2
 80039fa:	3304      	adds	r3, #4
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0308 	and.w	r3, r3, #8
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d003      	beq.n	8003a0e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2208      	movs	r2, #8
 8003a0a:	611a      	str	r2, [r3, #16]
 8003a0c:	e00b      	b.n	8003a26 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	331b      	adds	r3, #27
 8003a16:	011b      	lsls	r3, r3, #4
 8003a18:	4413      	add	r3, r2
 8003a1a:	3304      	adds	r3, #4
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 020f 	and.w	r2, r3, #15
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	331b      	adds	r3, #27
 8003a2e:	011b      	lsls	r3, r3, #4
 8003a30:	4413      	add	r3, r2
 8003a32:	3304      	adds	r3, #4
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	0a1b      	lsrs	r3, r3, #8
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	331b      	adds	r3, #27
 8003a46:	011b      	lsls	r3, r3, #4
 8003a48:	4413      	add	r3, r2
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	0c1b      	lsrs	r3, r3, #16
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	011b      	lsls	r3, r3, #4
 8003a5e:	4413      	add	r3, r2
 8003a60:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	b2da      	uxtb	r2, r3
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	011b      	lsls	r3, r3, #4
 8003a74:	4413      	add	r3, r2
 8003a76:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	0a1a      	lsrs	r2, r3, #8
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	3301      	adds	r3, #1
 8003a82:	b2d2      	uxtb	r2, r2
 8003a84:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	011b      	lsls	r3, r3, #4
 8003a8e:	4413      	add	r3, r2
 8003a90:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	0c1a      	lsrs	r2, r3, #16
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	3302      	adds	r3, #2
 8003a9c:	b2d2      	uxtb	r2, r2
 8003a9e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	011b      	lsls	r3, r3, #4
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	0e1a      	lsrs	r2, r3, #24
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	3303      	adds	r3, #3
 8003ab6:	b2d2      	uxtb	r2, r2
 8003ab8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	011b      	lsls	r3, r3, #4
 8003ac2:	4413      	add	r3, r2
 8003ac4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	3304      	adds	r3, #4
 8003ace:	b2d2      	uxtb	r2, r2
 8003ad0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	4413      	add	r3, r2
 8003adc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	0a1a      	lsrs	r2, r3, #8
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	3305      	adds	r3, #5
 8003ae8:	b2d2      	uxtb	r2, r2
 8003aea:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	011b      	lsls	r3, r3, #4
 8003af4:	4413      	add	r3, r2
 8003af6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	0c1a      	lsrs	r2, r3, #16
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	3306      	adds	r3, #6
 8003b02:	b2d2      	uxtb	r2, r2
 8003b04:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	011b      	lsls	r3, r3, #4
 8003b0e:	4413      	add	r3, r2
 8003b10:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	0e1a      	lsrs	r2, r3, #24
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	3307      	adds	r3, #7
 8003b1c:	b2d2      	uxtb	r2, r2
 8003b1e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d108      	bne.n	8003b38 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68da      	ldr	r2, [r3, #12]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f042 0220 	orr.w	r2, r2, #32
 8003b34:	60da      	str	r2, [r3, #12]
 8003b36:	e007      	b.n	8003b48 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	691a      	ldr	r2, [r3, #16]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f042 0220 	orr.w	r2, r2, #32
 8003b46:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	e006      	b.n	8003b5a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b50:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
  }
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	371c      	adds	r7, #28
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b085      	sub	sp, #20
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
 8003b6e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b76:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003b78:	7bfb      	ldrb	r3, [r7, #15]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d002      	beq.n	8003b84 <HAL_CAN_ActivateNotification+0x1e>
 8003b7e:	7bfb      	ldrb	r3, [r7, #15]
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d109      	bne.n	8003b98 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6959      	ldr	r1, [r3, #20]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003b94:	2300      	movs	r3, #0
 8003b96:	e006      	b.n	8003ba6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
  }
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3714      	adds	r7, #20
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b08a      	sub	sp, #40	; 0x28
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003bee:	6a3b      	ldr	r3, [r7, #32]
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d07c      	beq.n	8003cf2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d023      	beq.n	8003c4a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2201      	movs	r2, #1
 8003c08:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d003      	beq.n	8003c1c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f7fd fef7 	bl	8001a08 <HAL_CAN_TxMailbox0CompleteCallback>
 8003c1a:	e016      	b.n	8003c4a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	f003 0304 	and.w	r3, r3, #4
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d004      	beq.n	8003c30 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c2e:	e00c      	b.n	8003c4a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	f003 0308 	and.w	r3, r3, #8
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d004      	beq.n	8003c44 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c40:	627b      	str	r3, [r7, #36]	; 0x24
 8003c42:	e002      	b.n	8003c4a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 f97f 	bl	8003f48 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d024      	beq.n	8003c9e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c5c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d003      	beq.n	8003c70 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 f959 	bl	8003f20 <HAL_CAN_TxMailbox1CompleteCallback>
 8003c6e:	e016      	b.n	8003c9e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d004      	beq.n	8003c84 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c80:	627b      	str	r3, [r7, #36]	; 0x24
 8003c82:	e00c      	b.n	8003c9e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d004      	beq.n	8003c98 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c94:	627b      	str	r3, [r7, #36]	; 0x24
 8003c96:	e002      	b.n	8003c9e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 f95f 	bl	8003f5c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d024      	beq.n	8003cf2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003cb0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 f939 	bl	8003f34 <HAL_CAN_TxMailbox2CompleteCallback>
 8003cc2:	e016      	b.n	8003cf2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d004      	beq.n	8003cd8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd6:	e00c      	b.n	8003cf2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d004      	beq.n	8003cec <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cea:	e002      	b.n	8003cf2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f93f 	bl	8003f70 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003cf2:	6a3b      	ldr	r3, [r7, #32]
 8003cf4:	f003 0308 	and.w	r3, r3, #8
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00c      	beq.n	8003d16 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	f003 0310 	and.w	r3, r3, #16
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d007      	beq.n	8003d16 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d0c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2210      	movs	r2, #16
 8003d14:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	f003 0304 	and.w	r3, r3, #4
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00b      	beq.n	8003d38 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	f003 0308 	and.w	r3, r3, #8
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d006      	beq.n	8003d38 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2208      	movs	r2, #8
 8003d30:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f926 	bl	8003f84 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003d38:	6a3b      	ldr	r3, [r7, #32]
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d009      	beq.n	8003d56 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	f003 0303 	and.w	r3, r3, #3
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d002      	beq.n	8003d56 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f7fd fe6b 	bl	8001a2c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003d56:	6a3b      	ldr	r3, [r7, #32]
 8003d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00c      	beq.n	8003d7a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	f003 0310 	and.w	r3, r3, #16
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d007      	beq.n	8003d7a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d70:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2210      	movs	r2, #16
 8003d78:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
 8003d7c:	f003 0320 	and.w	r3, r3, #32
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00b      	beq.n	8003d9c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	f003 0308 	and.w	r3, r3, #8
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d006      	beq.n	8003d9c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2208      	movs	r2, #8
 8003d94:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 f908 	bl	8003fac <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003d9c:	6a3b      	ldr	r3, [r7, #32]
 8003d9e:	f003 0310 	and.w	r3, r3, #16
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d009      	beq.n	8003dba <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	f003 0303 	and.w	r3, r3, #3
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d002      	beq.n	8003dba <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 f8ef 	bl	8003f98 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003dba:	6a3b      	ldr	r3, [r7, #32]
 8003dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00b      	beq.n	8003ddc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	f003 0310 	and.w	r3, r3, #16
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d006      	beq.n	8003ddc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2210      	movs	r2, #16
 8003dd4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f8f2 	bl	8003fc0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003ddc:	6a3b      	ldr	r3, [r7, #32]
 8003dde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00b      	beq.n	8003dfe <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	f003 0308 	and.w	r3, r3, #8
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d006      	beq.n	8003dfe <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2208      	movs	r2, #8
 8003df6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 f8eb 	bl	8003fd4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003dfe:	6a3b      	ldr	r3, [r7, #32]
 8003e00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d07b      	beq.n	8003f00 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	f003 0304 	and.w	r3, r3, #4
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d072      	beq.n	8003ef8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003e12:	6a3b      	ldr	r3, [r7, #32]
 8003e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d008      	beq.n	8003e2e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	f043 0301 	orr.w	r3, r3, #1
 8003e2c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003e2e:	6a3b      	ldr	r3, [r7, #32]
 8003e30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d008      	beq.n	8003e4a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	f043 0302 	orr.w	r3, r3, #2
 8003e48:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003e4a:	6a3b      	ldr	r3, [r7, #32]
 8003e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d008      	beq.n	8003e66 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d003      	beq.n	8003e66 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	f043 0304 	orr.w	r3, r3, #4
 8003e64:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003e66:	6a3b      	ldr	r3, [r7, #32]
 8003e68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d043      	beq.n	8003ef8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d03e      	beq.n	8003ef8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e80:	2b60      	cmp	r3, #96	; 0x60
 8003e82:	d02b      	beq.n	8003edc <HAL_CAN_IRQHandler+0x32a>
 8003e84:	2b60      	cmp	r3, #96	; 0x60
 8003e86:	d82e      	bhi.n	8003ee6 <HAL_CAN_IRQHandler+0x334>
 8003e88:	2b50      	cmp	r3, #80	; 0x50
 8003e8a:	d022      	beq.n	8003ed2 <HAL_CAN_IRQHandler+0x320>
 8003e8c:	2b50      	cmp	r3, #80	; 0x50
 8003e8e:	d82a      	bhi.n	8003ee6 <HAL_CAN_IRQHandler+0x334>
 8003e90:	2b40      	cmp	r3, #64	; 0x40
 8003e92:	d019      	beq.n	8003ec8 <HAL_CAN_IRQHandler+0x316>
 8003e94:	2b40      	cmp	r3, #64	; 0x40
 8003e96:	d826      	bhi.n	8003ee6 <HAL_CAN_IRQHandler+0x334>
 8003e98:	2b30      	cmp	r3, #48	; 0x30
 8003e9a:	d010      	beq.n	8003ebe <HAL_CAN_IRQHandler+0x30c>
 8003e9c:	2b30      	cmp	r3, #48	; 0x30
 8003e9e:	d822      	bhi.n	8003ee6 <HAL_CAN_IRQHandler+0x334>
 8003ea0:	2b10      	cmp	r3, #16
 8003ea2:	d002      	beq.n	8003eaa <HAL_CAN_IRQHandler+0x2f8>
 8003ea4:	2b20      	cmp	r3, #32
 8003ea6:	d005      	beq.n	8003eb4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003ea8:	e01d      	b.n	8003ee6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	f043 0308 	orr.w	r3, r3, #8
 8003eb0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003eb2:	e019      	b.n	8003ee8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	f043 0310 	orr.w	r3, r3, #16
 8003eba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ebc:	e014      	b.n	8003ee8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec0:	f043 0320 	orr.w	r3, r3, #32
 8003ec4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ec6:	e00f      	b.n	8003ee8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ece:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ed0:	e00a      	b.n	8003ee8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ed8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003eda:	e005      	b.n	8003ee8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ee2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ee4:	e000      	b.n	8003ee8 <HAL_CAN_IRQHandler+0x336>
            break;
 8003ee6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	699a      	ldr	r2, [r3, #24]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003ef6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2204      	movs	r2, #4
 8003efe:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d008      	beq.n	8003f18 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f868 	bl	8003fe8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003f18:	bf00      	nop
 8003f1a:	3728      	adds	r7, #40	; 0x28
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f003 0307 	and.w	r3, r3, #7
 800400a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800400c:	4b0c      	ldr	r3, [pc, #48]	; (8004040 <__NVIC_SetPriorityGrouping+0x44>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004018:	4013      	ands	r3, r2
 800401a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004024:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800402c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800402e:	4a04      	ldr	r2, [pc, #16]	; (8004040 <__NVIC_SetPriorityGrouping+0x44>)
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	60d3      	str	r3, [r2, #12]
}
 8004034:	bf00      	nop
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	e000ed00 	.word	0xe000ed00

08004044 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004048:	4b04      	ldr	r3, [pc, #16]	; (800405c <__NVIC_GetPriorityGrouping+0x18>)
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	0a1b      	lsrs	r3, r3, #8
 800404e:	f003 0307 	and.w	r3, r3, #7
}
 8004052:	4618      	mov	r0, r3
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr
 800405c:	e000ed00 	.word	0xe000ed00

08004060 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	4603      	mov	r3, r0
 8004068:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800406a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800406e:	2b00      	cmp	r3, #0
 8004070:	db0b      	blt.n	800408a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004072:	79fb      	ldrb	r3, [r7, #7]
 8004074:	f003 021f 	and.w	r2, r3, #31
 8004078:	4907      	ldr	r1, [pc, #28]	; (8004098 <__NVIC_EnableIRQ+0x38>)
 800407a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407e:	095b      	lsrs	r3, r3, #5
 8004080:	2001      	movs	r0, #1
 8004082:	fa00 f202 	lsl.w	r2, r0, r2
 8004086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800408a:	bf00      	nop
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	e000e100 	.word	0xe000e100

0800409c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	4603      	mov	r3, r0
 80040a4:	6039      	str	r1, [r7, #0]
 80040a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	db0a      	blt.n	80040c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	b2da      	uxtb	r2, r3
 80040b4:	490c      	ldr	r1, [pc, #48]	; (80040e8 <__NVIC_SetPriority+0x4c>)
 80040b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ba:	0112      	lsls	r2, r2, #4
 80040bc:	b2d2      	uxtb	r2, r2
 80040be:	440b      	add	r3, r1
 80040c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040c4:	e00a      	b.n	80040dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	b2da      	uxtb	r2, r3
 80040ca:	4908      	ldr	r1, [pc, #32]	; (80040ec <__NVIC_SetPriority+0x50>)
 80040cc:	79fb      	ldrb	r3, [r7, #7]
 80040ce:	f003 030f 	and.w	r3, r3, #15
 80040d2:	3b04      	subs	r3, #4
 80040d4:	0112      	lsls	r2, r2, #4
 80040d6:	b2d2      	uxtb	r2, r2
 80040d8:	440b      	add	r3, r1
 80040da:	761a      	strb	r2, [r3, #24]
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	e000e100 	.word	0xe000e100
 80040ec:	e000ed00 	.word	0xe000ed00

080040f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b089      	sub	sp, #36	; 0x24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f003 0307 	and.w	r3, r3, #7
 8004102:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	f1c3 0307 	rsb	r3, r3, #7
 800410a:	2b04      	cmp	r3, #4
 800410c:	bf28      	it	cs
 800410e:	2304      	movcs	r3, #4
 8004110:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	3304      	adds	r3, #4
 8004116:	2b06      	cmp	r3, #6
 8004118:	d902      	bls.n	8004120 <NVIC_EncodePriority+0x30>
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	3b03      	subs	r3, #3
 800411e:	e000      	b.n	8004122 <NVIC_EncodePriority+0x32>
 8004120:	2300      	movs	r3, #0
 8004122:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004124:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	fa02 f303 	lsl.w	r3, r2, r3
 800412e:	43da      	mvns	r2, r3
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	401a      	ands	r2, r3
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004138:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	fa01 f303 	lsl.w	r3, r1, r3
 8004142:	43d9      	mvns	r1, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004148:	4313      	orrs	r3, r2
         );
}
 800414a:	4618      	mov	r0, r3
 800414c:	3724      	adds	r7, #36	; 0x24
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
	...

08004158 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	3b01      	subs	r3, #1
 8004164:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004168:	d301      	bcc.n	800416e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800416a:	2301      	movs	r3, #1
 800416c:	e00f      	b.n	800418e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800416e:	4a0a      	ldr	r2, [pc, #40]	; (8004198 <SysTick_Config+0x40>)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	3b01      	subs	r3, #1
 8004174:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004176:	210f      	movs	r1, #15
 8004178:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800417c:	f7ff ff8e 	bl	800409c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004180:	4b05      	ldr	r3, [pc, #20]	; (8004198 <SysTick_Config+0x40>)
 8004182:	2200      	movs	r2, #0
 8004184:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004186:	4b04      	ldr	r3, [pc, #16]	; (8004198 <SysTick_Config+0x40>)
 8004188:	2207      	movs	r2, #7
 800418a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	e000e010 	.word	0xe000e010

0800419c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f7ff ff29 	bl	8003ffc <__NVIC_SetPriorityGrouping>
}
 80041aa:	bf00      	nop
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b086      	sub	sp, #24
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	4603      	mov	r3, r0
 80041ba:	60b9      	str	r1, [r7, #8]
 80041bc:	607a      	str	r2, [r7, #4]
 80041be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80041c0:	2300      	movs	r3, #0
 80041c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80041c4:	f7ff ff3e 	bl	8004044 <__NVIC_GetPriorityGrouping>
 80041c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	68b9      	ldr	r1, [r7, #8]
 80041ce:	6978      	ldr	r0, [r7, #20]
 80041d0:	f7ff ff8e 	bl	80040f0 <NVIC_EncodePriority>
 80041d4:	4602      	mov	r2, r0
 80041d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041da:	4611      	mov	r1, r2
 80041dc:	4618      	mov	r0, r3
 80041de:	f7ff ff5d 	bl	800409c <__NVIC_SetPriority>
}
 80041e2:	bf00      	nop
 80041e4:	3718      	adds	r7, #24
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b082      	sub	sp, #8
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	4603      	mov	r3, r0
 80041f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7ff ff31 	bl	8004060 <__NVIC_EnableIRQ>
}
 80041fe:	bf00      	nop
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b082      	sub	sp, #8
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7ff ffa2 	bl	8004158 <SysTick_Config>
 8004214:	4603      	mov	r3, r0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3708      	adds	r7, #8
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
	...

08004220 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004220:	b480      	push	{r7}
 8004222:	b087      	sub	sp, #28
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800422a:	2300      	movs	r3, #0
 800422c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800422e:	e17f      	b.n	8004530 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	2101      	movs	r1, #1
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	fa01 f303 	lsl.w	r3, r1, r3
 800423c:	4013      	ands	r3, r2
 800423e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2b00      	cmp	r3, #0
 8004244:	f000 8171 	beq.w	800452a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f003 0303 	and.w	r3, r3, #3
 8004250:	2b01      	cmp	r3, #1
 8004252:	d005      	beq.n	8004260 <HAL_GPIO_Init+0x40>
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f003 0303 	and.w	r3, r3, #3
 800425c:	2b02      	cmp	r3, #2
 800425e:	d130      	bne.n	80042c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	2203      	movs	r2, #3
 800426c:	fa02 f303 	lsl.w	r3, r2, r3
 8004270:	43db      	mvns	r3, r3
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	4013      	ands	r3, r2
 8004276:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	68da      	ldr	r2, [r3, #12]
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	005b      	lsls	r3, r3, #1
 8004280:	fa02 f303 	lsl.w	r3, r2, r3
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	4313      	orrs	r3, r2
 8004288:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004296:	2201      	movs	r2, #1
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	fa02 f303 	lsl.w	r3, r2, r3
 800429e:	43db      	mvns	r3, r3
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	4013      	ands	r3, r2
 80042a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	091b      	lsrs	r3, r3, #4
 80042ac:	f003 0201 	and.w	r2, r3, #1
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	fa02 f303 	lsl.w	r3, r2, r3
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f003 0303 	and.w	r3, r3, #3
 80042ca:	2b03      	cmp	r3, #3
 80042cc:	d118      	bne.n	8004300 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80042d4:	2201      	movs	r2, #1
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	fa02 f303 	lsl.w	r3, r2, r3
 80042dc:	43db      	mvns	r3, r3
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	4013      	ands	r3, r2
 80042e2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	08db      	lsrs	r3, r3, #3
 80042ea:	f003 0201 	and.w	r2, r3, #1
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	fa02 f303 	lsl.w	r3, r2, r3
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f003 0303 	and.w	r3, r3, #3
 8004308:	2b03      	cmp	r3, #3
 800430a:	d017      	beq.n	800433c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	2203      	movs	r2, #3
 8004318:	fa02 f303 	lsl.w	r3, r2, r3
 800431c:	43db      	mvns	r3, r3
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	4013      	ands	r3, r2
 8004322:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	689a      	ldr	r2, [r3, #8]
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	fa02 f303 	lsl.w	r3, r2, r3
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	4313      	orrs	r3, r2
 8004334:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f003 0303 	and.w	r3, r3, #3
 8004344:	2b02      	cmp	r3, #2
 8004346:	d123      	bne.n	8004390 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	08da      	lsrs	r2, r3, #3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	3208      	adds	r2, #8
 8004350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004354:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f003 0307 	and.w	r3, r3, #7
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	220f      	movs	r2, #15
 8004360:	fa02 f303 	lsl.w	r3, r2, r3
 8004364:	43db      	mvns	r3, r3
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	4013      	ands	r3, r2
 800436a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	691a      	ldr	r2, [r3, #16]
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	f003 0307 	and.w	r3, r3, #7
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	fa02 f303 	lsl.w	r3, r2, r3
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	4313      	orrs	r3, r2
 8004380:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	08da      	lsrs	r2, r3, #3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	3208      	adds	r2, #8
 800438a:	6939      	ldr	r1, [r7, #16]
 800438c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	005b      	lsls	r3, r3, #1
 800439a:	2203      	movs	r2, #3
 800439c:	fa02 f303 	lsl.w	r3, r2, r3
 80043a0:	43db      	mvns	r3, r3
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	4013      	ands	r3, r2
 80043a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f003 0203 	and.w	r2, r3, #3
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	005b      	lsls	r3, r3, #1
 80043b4:	fa02 f303 	lsl.w	r3, r2, r3
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 80ac 	beq.w	800452a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043d2:	4b5f      	ldr	r3, [pc, #380]	; (8004550 <HAL_GPIO_Init+0x330>)
 80043d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043d6:	4a5e      	ldr	r2, [pc, #376]	; (8004550 <HAL_GPIO_Init+0x330>)
 80043d8:	f043 0301 	orr.w	r3, r3, #1
 80043dc:	6613      	str	r3, [r2, #96]	; 0x60
 80043de:	4b5c      	ldr	r3, [pc, #368]	; (8004550 <HAL_GPIO_Init+0x330>)
 80043e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	60bb      	str	r3, [r7, #8]
 80043e8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80043ea:	4a5a      	ldr	r2, [pc, #360]	; (8004554 <HAL_GPIO_Init+0x334>)
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	089b      	lsrs	r3, r3, #2
 80043f0:	3302      	adds	r3, #2
 80043f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	f003 0303 	and.w	r3, r3, #3
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	220f      	movs	r2, #15
 8004402:	fa02 f303 	lsl.w	r3, r2, r3
 8004406:	43db      	mvns	r3, r3
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	4013      	ands	r3, r2
 800440c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004414:	d025      	beq.n	8004462 <HAL_GPIO_Init+0x242>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a4f      	ldr	r2, [pc, #316]	; (8004558 <HAL_GPIO_Init+0x338>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d01f      	beq.n	800445e <HAL_GPIO_Init+0x23e>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a4e      	ldr	r2, [pc, #312]	; (800455c <HAL_GPIO_Init+0x33c>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d019      	beq.n	800445a <HAL_GPIO_Init+0x23a>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a4d      	ldr	r2, [pc, #308]	; (8004560 <HAL_GPIO_Init+0x340>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d013      	beq.n	8004456 <HAL_GPIO_Init+0x236>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a4c      	ldr	r2, [pc, #304]	; (8004564 <HAL_GPIO_Init+0x344>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d00d      	beq.n	8004452 <HAL_GPIO_Init+0x232>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a4b      	ldr	r2, [pc, #300]	; (8004568 <HAL_GPIO_Init+0x348>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d007      	beq.n	800444e <HAL_GPIO_Init+0x22e>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a4a      	ldr	r2, [pc, #296]	; (800456c <HAL_GPIO_Init+0x34c>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d101      	bne.n	800444a <HAL_GPIO_Init+0x22a>
 8004446:	2306      	movs	r3, #6
 8004448:	e00c      	b.n	8004464 <HAL_GPIO_Init+0x244>
 800444a:	2307      	movs	r3, #7
 800444c:	e00a      	b.n	8004464 <HAL_GPIO_Init+0x244>
 800444e:	2305      	movs	r3, #5
 8004450:	e008      	b.n	8004464 <HAL_GPIO_Init+0x244>
 8004452:	2304      	movs	r3, #4
 8004454:	e006      	b.n	8004464 <HAL_GPIO_Init+0x244>
 8004456:	2303      	movs	r3, #3
 8004458:	e004      	b.n	8004464 <HAL_GPIO_Init+0x244>
 800445a:	2302      	movs	r3, #2
 800445c:	e002      	b.n	8004464 <HAL_GPIO_Init+0x244>
 800445e:	2301      	movs	r3, #1
 8004460:	e000      	b.n	8004464 <HAL_GPIO_Init+0x244>
 8004462:	2300      	movs	r3, #0
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	f002 0203 	and.w	r2, r2, #3
 800446a:	0092      	lsls	r2, r2, #2
 800446c:	4093      	lsls	r3, r2
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	4313      	orrs	r3, r2
 8004472:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004474:	4937      	ldr	r1, [pc, #220]	; (8004554 <HAL_GPIO_Init+0x334>)
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	089b      	lsrs	r3, r3, #2
 800447a:	3302      	adds	r3, #2
 800447c:	693a      	ldr	r2, [r7, #16]
 800447e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004482:	4b3b      	ldr	r3, [pc, #236]	; (8004570 <HAL_GPIO_Init+0x350>)
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	43db      	mvns	r3, r3
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	4013      	ands	r3, r2
 8004490:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80044a6:	4a32      	ldr	r2, [pc, #200]	; (8004570 <HAL_GPIO_Init+0x350>)
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80044ac:	4b30      	ldr	r3, [pc, #192]	; (8004570 <HAL_GPIO_Init+0x350>)
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	43db      	mvns	r3, r3
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	4013      	ands	r3, r2
 80044ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d003      	beq.n	80044d0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80044d0:	4a27      	ldr	r2, [pc, #156]	; (8004570 <HAL_GPIO_Init+0x350>)
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80044d6:	4b26      	ldr	r3, [pc, #152]	; (8004570 <HAL_GPIO_Init+0x350>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	43db      	mvns	r3, r3
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	4013      	ands	r3, r2
 80044e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d003      	beq.n	80044fa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80044fa:	4a1d      	ldr	r2, [pc, #116]	; (8004570 <HAL_GPIO_Init+0x350>)
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004500:	4b1b      	ldr	r3, [pc, #108]	; (8004570 <HAL_GPIO_Init+0x350>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	43db      	mvns	r3, r3
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	4013      	ands	r3, r2
 800450e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d003      	beq.n	8004524 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	4313      	orrs	r3, r2
 8004522:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004524:	4a12      	ldr	r2, [pc, #72]	; (8004570 <HAL_GPIO_Init+0x350>)
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	3301      	adds	r3, #1
 800452e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	fa22 f303 	lsr.w	r3, r2, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	f47f ae78 	bne.w	8004230 <HAL_GPIO_Init+0x10>
  }
}
 8004540:	bf00      	nop
 8004542:	bf00      	nop
 8004544:	371c      	adds	r7, #28
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	40021000 	.word	0x40021000
 8004554:	40010000 	.word	0x40010000
 8004558:	48000400 	.word	0x48000400
 800455c:	48000800 	.word	0x48000800
 8004560:	48000c00 	.word	0x48000c00
 8004564:	48001000 	.word	0x48001000
 8004568:	48001400 	.word	0x48001400
 800456c:	48001800 	.word	0x48001800
 8004570:	40010400 	.word	0x40010400

08004574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	460b      	mov	r3, r1
 800457e:	807b      	strh	r3, [r7, #2]
 8004580:	4613      	mov	r3, r2
 8004582:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004584:	787b      	ldrb	r3, [r7, #1]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d003      	beq.n	8004592 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800458a:	887a      	ldrh	r2, [r7, #2]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004590:	e002      	b.n	8004598 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004592:	887a      	ldrh	r2, [r7, #2]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80045a8:	4b04      	ldr	r3, [pc, #16]	; (80045bc <HAL_PWREx_GetVoltageRange+0x18>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	40007000 	.word	0x40007000

080045c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045ce:	d130      	bne.n	8004632 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80045d0:	4b23      	ldr	r3, [pc, #140]	; (8004660 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80045d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045dc:	d038      	beq.n	8004650 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80045de:	4b20      	ldr	r3, [pc, #128]	; (8004660 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80045e6:	4a1e      	ldr	r2, [pc, #120]	; (8004660 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045ec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80045ee:	4b1d      	ldr	r3, [pc, #116]	; (8004664 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2232      	movs	r2, #50	; 0x32
 80045f4:	fb02 f303 	mul.w	r3, r2, r3
 80045f8:	4a1b      	ldr	r2, [pc, #108]	; (8004668 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80045fa:	fba2 2303 	umull	r2, r3, r2, r3
 80045fe:	0c9b      	lsrs	r3, r3, #18
 8004600:	3301      	adds	r3, #1
 8004602:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004604:	e002      	b.n	800460c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	3b01      	subs	r3, #1
 800460a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800460c:	4b14      	ldr	r3, [pc, #80]	; (8004660 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004614:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004618:	d102      	bne.n	8004620 <HAL_PWREx_ControlVoltageScaling+0x60>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1f2      	bne.n	8004606 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004620:	4b0f      	ldr	r3, [pc, #60]	; (8004660 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004628:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800462c:	d110      	bne.n	8004650 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e00f      	b.n	8004652 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004632:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800463a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800463e:	d007      	beq.n	8004650 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004640:	4b07      	ldr	r3, [pc, #28]	; (8004660 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004648:	4a05      	ldr	r2, [pc, #20]	; (8004660 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800464a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800464e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3714      	adds	r7, #20
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	40007000 	.word	0x40007000
 8004664:	20000004 	.word	0x20000004
 8004668:	431bde83 	.word	0x431bde83

0800466c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b088      	sub	sp, #32
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e3ca      	b.n	8004e14 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800467e:	4b97      	ldr	r3, [pc, #604]	; (80048dc <HAL_RCC_OscConfig+0x270>)
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f003 030c 	and.w	r3, r3, #12
 8004686:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004688:	4b94      	ldr	r3, [pc, #592]	; (80048dc <HAL_RCC_OscConfig+0x270>)
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	f003 0303 	and.w	r3, r3, #3
 8004690:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0310 	and.w	r3, r3, #16
 800469a:	2b00      	cmp	r3, #0
 800469c:	f000 80e4 	beq.w	8004868 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d007      	beq.n	80046b6 <HAL_RCC_OscConfig+0x4a>
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	2b0c      	cmp	r3, #12
 80046aa:	f040 808b 	bne.w	80047c4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	f040 8087 	bne.w	80047c4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80046b6:	4b89      	ldr	r3, [pc, #548]	; (80048dc <HAL_RCC_OscConfig+0x270>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d005      	beq.n	80046ce <HAL_RCC_OscConfig+0x62>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e3a2      	b.n	8004e14 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a1a      	ldr	r2, [r3, #32]
 80046d2:	4b82      	ldr	r3, [pc, #520]	; (80048dc <HAL_RCC_OscConfig+0x270>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0308 	and.w	r3, r3, #8
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d004      	beq.n	80046e8 <HAL_RCC_OscConfig+0x7c>
 80046de:	4b7f      	ldr	r3, [pc, #508]	; (80048dc <HAL_RCC_OscConfig+0x270>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046e6:	e005      	b.n	80046f4 <HAL_RCC_OscConfig+0x88>
 80046e8:	4b7c      	ldr	r3, [pc, #496]	; (80048dc <HAL_RCC_OscConfig+0x270>)
 80046ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046ee:	091b      	lsrs	r3, r3, #4
 80046f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d223      	bcs.n	8004740 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a1b      	ldr	r3, [r3, #32]
 80046fc:	4618      	mov	r0, r3
 80046fe:	f000 fd55 	bl	80051ac <RCC_SetFlashLatencyFromMSIRange>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d001      	beq.n	800470c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e383      	b.n	8004e14 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800470c:	4b73      	ldr	r3, [pc, #460]	; (80048dc <HAL_RCC_OscConfig+0x270>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a72      	ldr	r2, [pc, #456]	; (80048dc <HAL_RCC_OscConfig+0x270>)
 8004712:	f043 0308 	orr.w	r3, r3, #8
 8004716:	6013      	str	r3, [r2, #0]
 8004718:	4b70      	ldr	r3, [pc, #448]	; (80048dc <HAL_RCC_OscConfig+0x270>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a1b      	ldr	r3, [r3, #32]
 8004724:	496d      	ldr	r1, [pc, #436]	; (80048dc <HAL_RCC_OscConfig+0x270>)
 8004726:	4313      	orrs	r3, r2
 8004728:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800472a:	4b6c      	ldr	r3, [pc, #432]	; (80048dc <HAL_RCC_OscConfig+0x270>)
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	021b      	lsls	r3, r3, #8
 8004738:	4968      	ldr	r1, [pc, #416]	; (80048dc <HAL_RCC_OscConfig+0x270>)
 800473a:	4313      	orrs	r3, r2
 800473c:	604b      	str	r3, [r1, #4]
 800473e:	e025      	b.n	800478c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004740:	4b66      	ldr	r3, [pc, #408]	; (80048dc <HAL_RCC_OscConfig+0x270>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a65      	ldr	r2, [pc, #404]	; (80048dc <HAL_RCC_OscConfig+0x270>)
 8004746:	f043 0308 	orr.w	r3, r3, #8
 800474a:	6013      	str	r3, [r2, #0]
 800474c:	4b63      	ldr	r3, [pc, #396]	; (80048dc <HAL_RCC_OscConfig+0x270>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a1b      	ldr	r3, [r3, #32]
 8004758:	4960      	ldr	r1, [pc, #384]	; (80048dc <HAL_RCC_OscConfig+0x270>)
 800475a:	4313      	orrs	r3, r2
 800475c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800475e:	4b5f      	ldr	r3, [pc, #380]	; (80048dc <HAL_RCC_OscConfig+0x270>)
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	021b      	lsls	r3, r3, #8
 800476c:	495b      	ldr	r1, [pc, #364]	; (80048dc <HAL_RCC_OscConfig+0x270>)
 800476e:	4313      	orrs	r3, r2
 8004770:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d109      	bne.n	800478c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a1b      	ldr	r3, [r3, #32]
 800477c:	4618      	mov	r0, r3
 800477e:	f000 fd15 	bl	80051ac <RCC_SetFlashLatencyFromMSIRange>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d001      	beq.n	800478c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e343      	b.n	8004e14 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800478c:	f000 fc4a 	bl	8005024 <HAL_RCC_GetSysClockFreq>
 8004790:	4602      	mov	r2, r0
 8004792:	4b52      	ldr	r3, [pc, #328]	; (80048dc <HAL_RCC_OscConfig+0x270>)
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	091b      	lsrs	r3, r3, #4
 8004798:	f003 030f 	and.w	r3, r3, #15
 800479c:	4950      	ldr	r1, [pc, #320]	; (80048e0 <HAL_RCC_OscConfig+0x274>)
 800479e:	5ccb      	ldrb	r3, [r1, r3]
 80047a0:	f003 031f 	and.w	r3, r3, #31
 80047a4:	fa22 f303 	lsr.w	r3, r2, r3
 80047a8:	4a4e      	ldr	r2, [pc, #312]	; (80048e4 <HAL_RCC_OscConfig+0x278>)
 80047aa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80047ac:	4b4e      	ldr	r3, [pc, #312]	; (80048e8 <HAL_RCC_OscConfig+0x27c>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7fd fd13 	bl	80021dc <HAL_InitTick>
 80047b6:	4603      	mov	r3, r0
 80047b8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80047ba:	7bfb      	ldrb	r3, [r7, #15]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d052      	beq.n	8004866 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80047c0:	7bfb      	ldrb	r3, [r7, #15]
 80047c2:	e327      	b.n	8004e14 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d032      	beq.n	8004832 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80047cc:	4b43      	ldr	r3, [pc, #268]	; (80048dc <HAL_RCC_OscConfig+0x270>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a42      	ldr	r2, [pc, #264]	; (80048dc <HAL_RCC_OscConfig+0x270>)
 80047d2:	f043 0301 	orr.w	r3, r3, #1
 80047d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80047d8:	f7fd fd50 	bl	800227c <HAL_GetTick>
 80047dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80047de:	e008      	b.n	80047f2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047e0:	f7fd fd4c 	bl	800227c <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e310      	b.n	8004e14 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80047f2:	4b3a      	ldr	r3, [pc, #232]	; (80048dc <HAL_RCC_OscConfig+0x270>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d0f0      	beq.n	80047e0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047fe:	4b37      	ldr	r3, [pc, #220]	; (80048dc <HAL_RCC_OscConfig+0x270>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a36      	ldr	r2, [pc, #216]	; (80048dc <HAL_RCC_OscConfig+0x270>)
 8004804:	f043 0308 	orr.w	r3, r3, #8
 8004808:	6013      	str	r3, [r2, #0]
 800480a:	4b34      	ldr	r3, [pc, #208]	; (80048dc <HAL_RCC_OscConfig+0x270>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	4931      	ldr	r1, [pc, #196]	; (80048dc <HAL_RCC_OscConfig+0x270>)
 8004818:	4313      	orrs	r3, r2
 800481a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800481c:	4b2f      	ldr	r3, [pc, #188]	; (80048dc <HAL_RCC_OscConfig+0x270>)
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	69db      	ldr	r3, [r3, #28]
 8004828:	021b      	lsls	r3, r3, #8
 800482a:	492c      	ldr	r1, [pc, #176]	; (80048dc <HAL_RCC_OscConfig+0x270>)
 800482c:	4313      	orrs	r3, r2
 800482e:	604b      	str	r3, [r1, #4]
 8004830:	e01a      	b.n	8004868 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004832:	4b2a      	ldr	r3, [pc, #168]	; (80048dc <HAL_RCC_OscConfig+0x270>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a29      	ldr	r2, [pc, #164]	; (80048dc <HAL_RCC_OscConfig+0x270>)
 8004838:	f023 0301 	bic.w	r3, r3, #1
 800483c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800483e:	f7fd fd1d 	bl	800227c <HAL_GetTick>
 8004842:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004844:	e008      	b.n	8004858 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004846:	f7fd fd19 	bl	800227c <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	2b02      	cmp	r3, #2
 8004852:	d901      	bls.n	8004858 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e2dd      	b.n	8004e14 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004858:	4b20      	ldr	r3, [pc, #128]	; (80048dc <HAL_RCC_OscConfig+0x270>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1f0      	bne.n	8004846 <HAL_RCC_OscConfig+0x1da>
 8004864:	e000      	b.n	8004868 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004866:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	2b00      	cmp	r3, #0
 8004872:	d074      	beq.n	800495e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	2b08      	cmp	r3, #8
 8004878:	d005      	beq.n	8004886 <HAL_RCC_OscConfig+0x21a>
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	2b0c      	cmp	r3, #12
 800487e:	d10e      	bne.n	800489e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	2b03      	cmp	r3, #3
 8004884:	d10b      	bne.n	800489e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004886:	4b15      	ldr	r3, [pc, #84]	; (80048dc <HAL_RCC_OscConfig+0x270>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d064      	beq.n	800495c <HAL_RCC_OscConfig+0x2f0>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d160      	bne.n	800495c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e2ba      	b.n	8004e14 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048a6:	d106      	bne.n	80048b6 <HAL_RCC_OscConfig+0x24a>
 80048a8:	4b0c      	ldr	r3, [pc, #48]	; (80048dc <HAL_RCC_OscConfig+0x270>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a0b      	ldr	r2, [pc, #44]	; (80048dc <HAL_RCC_OscConfig+0x270>)
 80048ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048b2:	6013      	str	r3, [r2, #0]
 80048b4:	e026      	b.n	8004904 <HAL_RCC_OscConfig+0x298>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048be:	d115      	bne.n	80048ec <HAL_RCC_OscConfig+0x280>
 80048c0:	4b06      	ldr	r3, [pc, #24]	; (80048dc <HAL_RCC_OscConfig+0x270>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a05      	ldr	r2, [pc, #20]	; (80048dc <HAL_RCC_OscConfig+0x270>)
 80048c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048ca:	6013      	str	r3, [r2, #0]
 80048cc:	4b03      	ldr	r3, [pc, #12]	; (80048dc <HAL_RCC_OscConfig+0x270>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a02      	ldr	r2, [pc, #8]	; (80048dc <HAL_RCC_OscConfig+0x270>)
 80048d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048d6:	6013      	str	r3, [r2, #0]
 80048d8:	e014      	b.n	8004904 <HAL_RCC_OscConfig+0x298>
 80048da:	bf00      	nop
 80048dc:	40021000 	.word	0x40021000
 80048e0:	08009890 	.word	0x08009890
 80048e4:	20000004 	.word	0x20000004
 80048e8:	20000008 	.word	0x20000008
 80048ec:	4ba0      	ldr	r3, [pc, #640]	; (8004b70 <HAL_RCC_OscConfig+0x504>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a9f      	ldr	r2, [pc, #636]	; (8004b70 <HAL_RCC_OscConfig+0x504>)
 80048f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048f6:	6013      	str	r3, [r2, #0]
 80048f8:	4b9d      	ldr	r3, [pc, #628]	; (8004b70 <HAL_RCC_OscConfig+0x504>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a9c      	ldr	r2, [pc, #624]	; (8004b70 <HAL_RCC_OscConfig+0x504>)
 80048fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004902:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d013      	beq.n	8004934 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800490c:	f7fd fcb6 	bl	800227c <HAL_GetTick>
 8004910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004912:	e008      	b.n	8004926 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004914:	f7fd fcb2 	bl	800227c <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b64      	cmp	r3, #100	; 0x64
 8004920:	d901      	bls.n	8004926 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e276      	b.n	8004e14 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004926:	4b92      	ldr	r3, [pc, #584]	; (8004b70 <HAL_RCC_OscConfig+0x504>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d0f0      	beq.n	8004914 <HAL_RCC_OscConfig+0x2a8>
 8004932:	e014      	b.n	800495e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004934:	f7fd fca2 	bl	800227c <HAL_GetTick>
 8004938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800493a:	e008      	b.n	800494e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800493c:	f7fd fc9e 	bl	800227c <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b64      	cmp	r3, #100	; 0x64
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e262      	b.n	8004e14 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800494e:	4b88      	ldr	r3, [pc, #544]	; (8004b70 <HAL_RCC_OscConfig+0x504>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1f0      	bne.n	800493c <HAL_RCC_OscConfig+0x2d0>
 800495a:	e000      	b.n	800495e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800495c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d060      	beq.n	8004a2c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	2b04      	cmp	r3, #4
 800496e:	d005      	beq.n	800497c <HAL_RCC_OscConfig+0x310>
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	2b0c      	cmp	r3, #12
 8004974:	d119      	bne.n	80049aa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	2b02      	cmp	r3, #2
 800497a:	d116      	bne.n	80049aa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800497c:	4b7c      	ldr	r3, [pc, #496]	; (8004b70 <HAL_RCC_OscConfig+0x504>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004984:	2b00      	cmp	r3, #0
 8004986:	d005      	beq.n	8004994 <HAL_RCC_OscConfig+0x328>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d101      	bne.n	8004994 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e23f      	b.n	8004e14 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004994:	4b76      	ldr	r3, [pc, #472]	; (8004b70 <HAL_RCC_OscConfig+0x504>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	061b      	lsls	r3, r3, #24
 80049a2:	4973      	ldr	r1, [pc, #460]	; (8004b70 <HAL_RCC_OscConfig+0x504>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049a8:	e040      	b.n	8004a2c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d023      	beq.n	80049fa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049b2:	4b6f      	ldr	r3, [pc, #444]	; (8004b70 <HAL_RCC_OscConfig+0x504>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a6e      	ldr	r2, [pc, #440]	; (8004b70 <HAL_RCC_OscConfig+0x504>)
 80049b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049be:	f7fd fc5d 	bl	800227c <HAL_GetTick>
 80049c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049c4:	e008      	b.n	80049d8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049c6:	f7fd fc59 	bl	800227c <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d901      	bls.n	80049d8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e21d      	b.n	8004e14 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049d8:	4b65      	ldr	r3, [pc, #404]	; (8004b70 <HAL_RCC_OscConfig+0x504>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d0f0      	beq.n	80049c6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049e4:	4b62      	ldr	r3, [pc, #392]	; (8004b70 <HAL_RCC_OscConfig+0x504>)
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	061b      	lsls	r3, r3, #24
 80049f2:	495f      	ldr	r1, [pc, #380]	; (8004b70 <HAL_RCC_OscConfig+0x504>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	604b      	str	r3, [r1, #4]
 80049f8:	e018      	b.n	8004a2c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049fa:	4b5d      	ldr	r3, [pc, #372]	; (8004b70 <HAL_RCC_OscConfig+0x504>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a5c      	ldr	r2, [pc, #368]	; (8004b70 <HAL_RCC_OscConfig+0x504>)
 8004a00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a06:	f7fd fc39 	bl	800227c <HAL_GetTick>
 8004a0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a0c:	e008      	b.n	8004a20 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a0e:	f7fd fc35 	bl	800227c <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d901      	bls.n	8004a20 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e1f9      	b.n	8004e14 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a20:	4b53      	ldr	r3, [pc, #332]	; (8004b70 <HAL_RCC_OscConfig+0x504>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1f0      	bne.n	8004a0e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0308 	and.w	r3, r3, #8
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d03c      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	695b      	ldr	r3, [r3, #20]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d01c      	beq.n	8004a7a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a40:	4b4b      	ldr	r3, [pc, #300]	; (8004b70 <HAL_RCC_OscConfig+0x504>)
 8004a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a46:	4a4a      	ldr	r2, [pc, #296]	; (8004b70 <HAL_RCC_OscConfig+0x504>)
 8004a48:	f043 0301 	orr.w	r3, r3, #1
 8004a4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a50:	f7fd fc14 	bl	800227c <HAL_GetTick>
 8004a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a56:	e008      	b.n	8004a6a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a58:	f7fd fc10 	bl	800227c <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e1d4      	b.n	8004e14 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a6a:	4b41      	ldr	r3, [pc, #260]	; (8004b70 <HAL_RCC_OscConfig+0x504>)
 8004a6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a70:	f003 0302 	and.w	r3, r3, #2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d0ef      	beq.n	8004a58 <HAL_RCC_OscConfig+0x3ec>
 8004a78:	e01b      	b.n	8004ab2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a7a:	4b3d      	ldr	r3, [pc, #244]	; (8004b70 <HAL_RCC_OscConfig+0x504>)
 8004a7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a80:	4a3b      	ldr	r2, [pc, #236]	; (8004b70 <HAL_RCC_OscConfig+0x504>)
 8004a82:	f023 0301 	bic.w	r3, r3, #1
 8004a86:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a8a:	f7fd fbf7 	bl	800227c <HAL_GetTick>
 8004a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a90:	e008      	b.n	8004aa4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a92:	f7fd fbf3 	bl	800227c <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d901      	bls.n	8004aa4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e1b7      	b.n	8004e14 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004aa4:	4b32      	ldr	r3, [pc, #200]	; (8004b70 <HAL_RCC_OscConfig+0x504>)
 8004aa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1ef      	bne.n	8004a92 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0304 	and.w	r3, r3, #4
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f000 80a6 	beq.w	8004c0c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004ac4:	4b2a      	ldr	r3, [pc, #168]	; (8004b70 <HAL_RCC_OscConfig+0x504>)
 8004ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10d      	bne.n	8004aec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ad0:	4b27      	ldr	r3, [pc, #156]	; (8004b70 <HAL_RCC_OscConfig+0x504>)
 8004ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad4:	4a26      	ldr	r2, [pc, #152]	; (8004b70 <HAL_RCC_OscConfig+0x504>)
 8004ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ada:	6593      	str	r3, [r2, #88]	; 0x58
 8004adc:	4b24      	ldr	r3, [pc, #144]	; (8004b70 <HAL_RCC_OscConfig+0x504>)
 8004ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae4:	60bb      	str	r3, [r7, #8]
 8004ae6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004aec:	4b21      	ldr	r3, [pc, #132]	; (8004b74 <HAL_RCC_OscConfig+0x508>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d118      	bne.n	8004b2a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004af8:	4b1e      	ldr	r3, [pc, #120]	; (8004b74 <HAL_RCC_OscConfig+0x508>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a1d      	ldr	r2, [pc, #116]	; (8004b74 <HAL_RCC_OscConfig+0x508>)
 8004afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b04:	f7fd fbba 	bl	800227c <HAL_GetTick>
 8004b08:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b0a:	e008      	b.n	8004b1e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b0c:	f7fd fbb6 	bl	800227c <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e17a      	b.n	8004e14 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b1e:	4b15      	ldr	r3, [pc, #84]	; (8004b74 <HAL_RCC_OscConfig+0x508>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d0f0      	beq.n	8004b0c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d108      	bne.n	8004b44 <HAL_RCC_OscConfig+0x4d8>
 8004b32:	4b0f      	ldr	r3, [pc, #60]	; (8004b70 <HAL_RCC_OscConfig+0x504>)
 8004b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b38:	4a0d      	ldr	r2, [pc, #52]	; (8004b70 <HAL_RCC_OscConfig+0x504>)
 8004b3a:	f043 0301 	orr.w	r3, r3, #1
 8004b3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b42:	e029      	b.n	8004b98 <HAL_RCC_OscConfig+0x52c>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	2b05      	cmp	r3, #5
 8004b4a:	d115      	bne.n	8004b78 <HAL_RCC_OscConfig+0x50c>
 8004b4c:	4b08      	ldr	r3, [pc, #32]	; (8004b70 <HAL_RCC_OscConfig+0x504>)
 8004b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b52:	4a07      	ldr	r2, [pc, #28]	; (8004b70 <HAL_RCC_OscConfig+0x504>)
 8004b54:	f043 0304 	orr.w	r3, r3, #4
 8004b58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b5c:	4b04      	ldr	r3, [pc, #16]	; (8004b70 <HAL_RCC_OscConfig+0x504>)
 8004b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b62:	4a03      	ldr	r2, [pc, #12]	; (8004b70 <HAL_RCC_OscConfig+0x504>)
 8004b64:	f043 0301 	orr.w	r3, r3, #1
 8004b68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b6c:	e014      	b.n	8004b98 <HAL_RCC_OscConfig+0x52c>
 8004b6e:	bf00      	nop
 8004b70:	40021000 	.word	0x40021000
 8004b74:	40007000 	.word	0x40007000
 8004b78:	4b9c      	ldr	r3, [pc, #624]	; (8004dec <HAL_RCC_OscConfig+0x780>)
 8004b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b7e:	4a9b      	ldr	r2, [pc, #620]	; (8004dec <HAL_RCC_OscConfig+0x780>)
 8004b80:	f023 0301 	bic.w	r3, r3, #1
 8004b84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b88:	4b98      	ldr	r3, [pc, #608]	; (8004dec <HAL_RCC_OscConfig+0x780>)
 8004b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b8e:	4a97      	ldr	r2, [pc, #604]	; (8004dec <HAL_RCC_OscConfig+0x780>)
 8004b90:	f023 0304 	bic.w	r3, r3, #4
 8004b94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d016      	beq.n	8004bce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ba0:	f7fd fb6c 	bl	800227c <HAL_GetTick>
 8004ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ba6:	e00a      	b.n	8004bbe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ba8:	f7fd fb68 	bl	800227c <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e12a      	b.n	8004e14 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bbe:	4b8b      	ldr	r3, [pc, #556]	; (8004dec <HAL_RCC_OscConfig+0x780>)
 8004bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d0ed      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x53c>
 8004bcc:	e015      	b.n	8004bfa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bce:	f7fd fb55 	bl	800227c <HAL_GetTick>
 8004bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004bd4:	e00a      	b.n	8004bec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bd6:	f7fd fb51 	bl	800227c <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d901      	bls.n	8004bec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e113      	b.n	8004e14 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004bec:	4b7f      	ldr	r3, [pc, #508]	; (8004dec <HAL_RCC_OscConfig+0x780>)
 8004bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1ed      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bfa:	7ffb      	ldrb	r3, [r7, #31]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d105      	bne.n	8004c0c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c00:	4b7a      	ldr	r3, [pc, #488]	; (8004dec <HAL_RCC_OscConfig+0x780>)
 8004c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c04:	4a79      	ldr	r2, [pc, #484]	; (8004dec <HAL_RCC_OscConfig+0x780>)
 8004c06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c0a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f000 80fe 	beq.w	8004e12 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	f040 80d0 	bne.w	8004dc0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004c20:	4b72      	ldr	r3, [pc, #456]	; (8004dec <HAL_RCC_OscConfig+0x780>)
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f003 0203 	and.w	r2, r3, #3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d130      	bne.n	8004c96 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d127      	bne.n	8004c96 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c50:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d11f      	bne.n	8004c96 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c60:	2a07      	cmp	r2, #7
 8004c62:	bf14      	ite	ne
 8004c64:	2201      	movne	r2, #1
 8004c66:	2200      	moveq	r2, #0
 8004c68:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d113      	bne.n	8004c96 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c78:	085b      	lsrs	r3, r3, #1
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d109      	bne.n	8004c96 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8c:	085b      	lsrs	r3, r3, #1
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d06e      	beq.n	8004d74 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	2b0c      	cmp	r3, #12
 8004c9a:	d069      	beq.n	8004d70 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004c9c:	4b53      	ldr	r3, [pc, #332]	; (8004dec <HAL_RCC_OscConfig+0x780>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d105      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004ca8:	4b50      	ldr	r3, [pc, #320]	; (8004dec <HAL_RCC_OscConfig+0x780>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d001      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e0ad      	b.n	8004e14 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004cb8:	4b4c      	ldr	r3, [pc, #304]	; (8004dec <HAL_RCC_OscConfig+0x780>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a4b      	ldr	r2, [pc, #300]	; (8004dec <HAL_RCC_OscConfig+0x780>)
 8004cbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cc2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004cc4:	f7fd fada 	bl	800227c <HAL_GetTick>
 8004cc8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cca:	e008      	b.n	8004cde <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ccc:	f7fd fad6 	bl	800227c <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e09a      	b.n	8004e14 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cde:	4b43      	ldr	r3, [pc, #268]	; (8004dec <HAL_RCC_OscConfig+0x780>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1f0      	bne.n	8004ccc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cea:	4b40      	ldr	r3, [pc, #256]	; (8004dec <HAL_RCC_OscConfig+0x780>)
 8004cec:	68da      	ldr	r2, [r3, #12]
 8004cee:	4b40      	ldr	r3, [pc, #256]	; (8004df0 <HAL_RCC_OscConfig+0x784>)
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004cfa:	3a01      	subs	r2, #1
 8004cfc:	0112      	lsls	r2, r2, #4
 8004cfe:	4311      	orrs	r1, r2
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d04:	0212      	lsls	r2, r2, #8
 8004d06:	4311      	orrs	r1, r2
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004d0c:	0852      	lsrs	r2, r2, #1
 8004d0e:	3a01      	subs	r2, #1
 8004d10:	0552      	lsls	r2, r2, #21
 8004d12:	4311      	orrs	r1, r2
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004d18:	0852      	lsrs	r2, r2, #1
 8004d1a:	3a01      	subs	r2, #1
 8004d1c:	0652      	lsls	r2, r2, #25
 8004d1e:	4311      	orrs	r1, r2
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d24:	0912      	lsrs	r2, r2, #4
 8004d26:	0452      	lsls	r2, r2, #17
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	4930      	ldr	r1, [pc, #192]	; (8004dec <HAL_RCC_OscConfig+0x780>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004d30:	4b2e      	ldr	r3, [pc, #184]	; (8004dec <HAL_RCC_OscConfig+0x780>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a2d      	ldr	r2, [pc, #180]	; (8004dec <HAL_RCC_OscConfig+0x780>)
 8004d36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d3a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d3c:	4b2b      	ldr	r3, [pc, #172]	; (8004dec <HAL_RCC_OscConfig+0x780>)
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	4a2a      	ldr	r2, [pc, #168]	; (8004dec <HAL_RCC_OscConfig+0x780>)
 8004d42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d46:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d48:	f7fd fa98 	bl	800227c <HAL_GetTick>
 8004d4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d4e:	e008      	b.n	8004d62 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d50:	f7fd fa94 	bl	800227c <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e058      	b.n	8004e14 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d62:	4b22      	ldr	r3, [pc, #136]	; (8004dec <HAL_RCC_OscConfig+0x780>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d0f0      	beq.n	8004d50 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d6e:	e050      	b.n	8004e12 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e04f      	b.n	8004e14 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d74:	4b1d      	ldr	r3, [pc, #116]	; (8004dec <HAL_RCC_OscConfig+0x780>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d148      	bne.n	8004e12 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004d80:	4b1a      	ldr	r3, [pc, #104]	; (8004dec <HAL_RCC_OscConfig+0x780>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a19      	ldr	r2, [pc, #100]	; (8004dec <HAL_RCC_OscConfig+0x780>)
 8004d86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d8a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d8c:	4b17      	ldr	r3, [pc, #92]	; (8004dec <HAL_RCC_OscConfig+0x780>)
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	4a16      	ldr	r2, [pc, #88]	; (8004dec <HAL_RCC_OscConfig+0x780>)
 8004d92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d96:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d98:	f7fd fa70 	bl	800227c <HAL_GetTick>
 8004d9c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d9e:	e008      	b.n	8004db2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004da0:	f7fd fa6c 	bl	800227c <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e030      	b.n	8004e14 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004db2:	4b0e      	ldr	r3, [pc, #56]	; (8004dec <HAL_RCC_OscConfig+0x780>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d0f0      	beq.n	8004da0 <HAL_RCC_OscConfig+0x734>
 8004dbe:	e028      	b.n	8004e12 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	2b0c      	cmp	r3, #12
 8004dc4:	d023      	beq.n	8004e0e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dc6:	4b09      	ldr	r3, [pc, #36]	; (8004dec <HAL_RCC_OscConfig+0x780>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a08      	ldr	r2, [pc, #32]	; (8004dec <HAL_RCC_OscConfig+0x780>)
 8004dcc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd2:	f7fd fa53 	bl	800227c <HAL_GetTick>
 8004dd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dd8:	e00c      	b.n	8004df4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dda:	f7fd fa4f 	bl	800227c <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d905      	bls.n	8004df4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e013      	b.n	8004e14 <HAL_RCC_OscConfig+0x7a8>
 8004dec:	40021000 	.word	0x40021000
 8004df0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004df4:	4b09      	ldr	r3, [pc, #36]	; (8004e1c <HAL_RCC_OscConfig+0x7b0>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1ec      	bne.n	8004dda <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004e00:	4b06      	ldr	r3, [pc, #24]	; (8004e1c <HAL_RCC_OscConfig+0x7b0>)
 8004e02:	68da      	ldr	r2, [r3, #12]
 8004e04:	4905      	ldr	r1, [pc, #20]	; (8004e1c <HAL_RCC_OscConfig+0x7b0>)
 8004e06:	4b06      	ldr	r3, [pc, #24]	; (8004e20 <HAL_RCC_OscConfig+0x7b4>)
 8004e08:	4013      	ands	r3, r2
 8004e0a:	60cb      	str	r3, [r1, #12]
 8004e0c:	e001      	b.n	8004e12 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e000      	b.n	8004e14 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3720      	adds	r7, #32
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	40021000 	.word	0x40021000
 8004e20:	feeefffc 	.word	0xfeeefffc

08004e24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d101      	bne.n	8004e38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e0e7      	b.n	8005008 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e38:	4b75      	ldr	r3, [pc, #468]	; (8005010 <HAL_RCC_ClockConfig+0x1ec>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0307 	and.w	r3, r3, #7
 8004e40:	683a      	ldr	r2, [r7, #0]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d910      	bls.n	8004e68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e46:	4b72      	ldr	r3, [pc, #456]	; (8005010 <HAL_RCC_ClockConfig+0x1ec>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f023 0207 	bic.w	r2, r3, #7
 8004e4e:	4970      	ldr	r1, [pc, #448]	; (8005010 <HAL_RCC_ClockConfig+0x1ec>)
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e56:	4b6e      	ldr	r3, [pc, #440]	; (8005010 <HAL_RCC_ClockConfig+0x1ec>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0307 	and.w	r3, r3, #7
 8004e5e:	683a      	ldr	r2, [r7, #0]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d001      	beq.n	8004e68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e0cf      	b.n	8005008 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0302 	and.w	r3, r3, #2
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d010      	beq.n	8004e96 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689a      	ldr	r2, [r3, #8]
 8004e78:	4b66      	ldr	r3, [pc, #408]	; (8005014 <HAL_RCC_ClockConfig+0x1f0>)
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d908      	bls.n	8004e96 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e84:	4b63      	ldr	r3, [pc, #396]	; (8005014 <HAL_RCC_ClockConfig+0x1f0>)
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	4960      	ldr	r1, [pc, #384]	; (8005014 <HAL_RCC_ClockConfig+0x1f0>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d04c      	beq.n	8004f3c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	2b03      	cmp	r3, #3
 8004ea8:	d107      	bne.n	8004eba <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eaa:	4b5a      	ldr	r3, [pc, #360]	; (8005014 <HAL_RCC_ClockConfig+0x1f0>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d121      	bne.n	8004efa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e0a6      	b.n	8005008 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d107      	bne.n	8004ed2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ec2:	4b54      	ldr	r3, [pc, #336]	; (8005014 <HAL_RCC_ClockConfig+0x1f0>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d115      	bne.n	8004efa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e09a      	b.n	8005008 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d107      	bne.n	8004eea <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004eda:	4b4e      	ldr	r3, [pc, #312]	; (8005014 <HAL_RCC_ClockConfig+0x1f0>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0302 	and.w	r3, r3, #2
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d109      	bne.n	8004efa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e08e      	b.n	8005008 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004eea:	4b4a      	ldr	r3, [pc, #296]	; (8005014 <HAL_RCC_ClockConfig+0x1f0>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e086      	b.n	8005008 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004efa:	4b46      	ldr	r3, [pc, #280]	; (8005014 <HAL_RCC_ClockConfig+0x1f0>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f023 0203 	bic.w	r2, r3, #3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	4943      	ldr	r1, [pc, #268]	; (8005014 <HAL_RCC_ClockConfig+0x1f0>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f0c:	f7fd f9b6 	bl	800227c <HAL_GetTick>
 8004f10:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f12:	e00a      	b.n	8004f2a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f14:	f7fd f9b2 	bl	800227c <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e06e      	b.n	8005008 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f2a:	4b3a      	ldr	r3, [pc, #232]	; (8005014 <HAL_RCC_ClockConfig+0x1f0>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f003 020c 	and.w	r2, r3, #12
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d1eb      	bne.n	8004f14 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0302 	and.w	r3, r3, #2
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d010      	beq.n	8004f6a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	689a      	ldr	r2, [r3, #8]
 8004f4c:	4b31      	ldr	r3, [pc, #196]	; (8005014 <HAL_RCC_ClockConfig+0x1f0>)
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d208      	bcs.n	8004f6a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f58:	4b2e      	ldr	r3, [pc, #184]	; (8005014 <HAL_RCC_ClockConfig+0x1f0>)
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	492b      	ldr	r1, [pc, #172]	; (8005014 <HAL_RCC_ClockConfig+0x1f0>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f6a:	4b29      	ldr	r3, [pc, #164]	; (8005010 <HAL_RCC_ClockConfig+0x1ec>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0307 	and.w	r3, r3, #7
 8004f72:	683a      	ldr	r2, [r7, #0]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d210      	bcs.n	8004f9a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f78:	4b25      	ldr	r3, [pc, #148]	; (8005010 <HAL_RCC_ClockConfig+0x1ec>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f023 0207 	bic.w	r2, r3, #7
 8004f80:	4923      	ldr	r1, [pc, #140]	; (8005010 <HAL_RCC_ClockConfig+0x1ec>)
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f88:	4b21      	ldr	r3, [pc, #132]	; (8005010 <HAL_RCC_ClockConfig+0x1ec>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0307 	and.w	r3, r3, #7
 8004f90:	683a      	ldr	r2, [r7, #0]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d001      	beq.n	8004f9a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e036      	b.n	8005008 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0304 	and.w	r3, r3, #4
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d008      	beq.n	8004fb8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fa6:	4b1b      	ldr	r3, [pc, #108]	; (8005014 <HAL_RCC_ClockConfig+0x1f0>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	4918      	ldr	r1, [pc, #96]	; (8005014 <HAL_RCC_ClockConfig+0x1f0>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0308 	and.w	r3, r3, #8
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d009      	beq.n	8004fd8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fc4:	4b13      	ldr	r3, [pc, #76]	; (8005014 <HAL_RCC_ClockConfig+0x1f0>)
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	00db      	lsls	r3, r3, #3
 8004fd2:	4910      	ldr	r1, [pc, #64]	; (8005014 <HAL_RCC_ClockConfig+0x1f0>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004fd8:	f000 f824 	bl	8005024 <HAL_RCC_GetSysClockFreq>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	4b0d      	ldr	r3, [pc, #52]	; (8005014 <HAL_RCC_ClockConfig+0x1f0>)
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	091b      	lsrs	r3, r3, #4
 8004fe4:	f003 030f 	and.w	r3, r3, #15
 8004fe8:	490b      	ldr	r1, [pc, #44]	; (8005018 <HAL_RCC_ClockConfig+0x1f4>)
 8004fea:	5ccb      	ldrb	r3, [r1, r3]
 8004fec:	f003 031f 	and.w	r3, r3, #31
 8004ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ff4:	4a09      	ldr	r2, [pc, #36]	; (800501c <HAL_RCC_ClockConfig+0x1f8>)
 8004ff6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004ff8:	4b09      	ldr	r3, [pc, #36]	; (8005020 <HAL_RCC_ClockConfig+0x1fc>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f7fd f8ed 	bl	80021dc <HAL_InitTick>
 8005002:	4603      	mov	r3, r0
 8005004:	72fb      	strb	r3, [r7, #11]

  return status;
 8005006:	7afb      	ldrb	r3, [r7, #11]
}
 8005008:	4618      	mov	r0, r3
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	40022000 	.word	0x40022000
 8005014:	40021000 	.word	0x40021000
 8005018:	08009890 	.word	0x08009890
 800501c:	20000004 	.word	0x20000004
 8005020:	20000008 	.word	0x20000008

08005024 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005024:	b480      	push	{r7}
 8005026:	b089      	sub	sp, #36	; 0x24
 8005028:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800502a:	2300      	movs	r3, #0
 800502c:	61fb      	str	r3, [r7, #28]
 800502e:	2300      	movs	r3, #0
 8005030:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005032:	4b3e      	ldr	r3, [pc, #248]	; (800512c <HAL_RCC_GetSysClockFreq+0x108>)
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f003 030c 	and.w	r3, r3, #12
 800503a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800503c:	4b3b      	ldr	r3, [pc, #236]	; (800512c <HAL_RCC_GetSysClockFreq+0x108>)
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	f003 0303 	and.w	r3, r3, #3
 8005044:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d005      	beq.n	8005058 <HAL_RCC_GetSysClockFreq+0x34>
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	2b0c      	cmp	r3, #12
 8005050:	d121      	bne.n	8005096 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d11e      	bne.n	8005096 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005058:	4b34      	ldr	r3, [pc, #208]	; (800512c <HAL_RCC_GetSysClockFreq+0x108>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0308 	and.w	r3, r3, #8
 8005060:	2b00      	cmp	r3, #0
 8005062:	d107      	bne.n	8005074 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005064:	4b31      	ldr	r3, [pc, #196]	; (800512c <HAL_RCC_GetSysClockFreq+0x108>)
 8005066:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800506a:	0a1b      	lsrs	r3, r3, #8
 800506c:	f003 030f 	and.w	r3, r3, #15
 8005070:	61fb      	str	r3, [r7, #28]
 8005072:	e005      	b.n	8005080 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005074:	4b2d      	ldr	r3, [pc, #180]	; (800512c <HAL_RCC_GetSysClockFreq+0x108>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	091b      	lsrs	r3, r3, #4
 800507a:	f003 030f 	and.w	r3, r3, #15
 800507e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005080:	4a2b      	ldr	r2, [pc, #172]	; (8005130 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005088:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d10d      	bne.n	80050ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005094:	e00a      	b.n	80050ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	2b04      	cmp	r3, #4
 800509a:	d102      	bne.n	80050a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800509c:	4b25      	ldr	r3, [pc, #148]	; (8005134 <HAL_RCC_GetSysClockFreq+0x110>)
 800509e:	61bb      	str	r3, [r7, #24]
 80050a0:	e004      	b.n	80050ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	2b08      	cmp	r3, #8
 80050a6:	d101      	bne.n	80050ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80050a8:	4b23      	ldr	r3, [pc, #140]	; (8005138 <HAL_RCC_GetSysClockFreq+0x114>)
 80050aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	2b0c      	cmp	r3, #12
 80050b0:	d134      	bne.n	800511c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80050b2:	4b1e      	ldr	r3, [pc, #120]	; (800512c <HAL_RCC_GetSysClockFreq+0x108>)
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	f003 0303 	and.w	r3, r3, #3
 80050ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d003      	beq.n	80050ca <HAL_RCC_GetSysClockFreq+0xa6>
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	2b03      	cmp	r3, #3
 80050c6:	d003      	beq.n	80050d0 <HAL_RCC_GetSysClockFreq+0xac>
 80050c8:	e005      	b.n	80050d6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80050ca:	4b1a      	ldr	r3, [pc, #104]	; (8005134 <HAL_RCC_GetSysClockFreq+0x110>)
 80050cc:	617b      	str	r3, [r7, #20]
      break;
 80050ce:	e005      	b.n	80050dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80050d0:	4b19      	ldr	r3, [pc, #100]	; (8005138 <HAL_RCC_GetSysClockFreq+0x114>)
 80050d2:	617b      	str	r3, [r7, #20]
      break;
 80050d4:	e002      	b.n	80050dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	617b      	str	r3, [r7, #20]
      break;
 80050da:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050dc:	4b13      	ldr	r3, [pc, #76]	; (800512c <HAL_RCC_GetSysClockFreq+0x108>)
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	091b      	lsrs	r3, r3, #4
 80050e2:	f003 0307 	and.w	r3, r3, #7
 80050e6:	3301      	adds	r3, #1
 80050e8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80050ea:	4b10      	ldr	r3, [pc, #64]	; (800512c <HAL_RCC_GetSysClockFreq+0x108>)
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	0a1b      	lsrs	r3, r3, #8
 80050f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	fb03 f202 	mul.w	r2, r3, r2
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005100:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005102:	4b0a      	ldr	r3, [pc, #40]	; (800512c <HAL_RCC_GetSysClockFreq+0x108>)
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	0e5b      	lsrs	r3, r3, #25
 8005108:	f003 0303 	and.w	r3, r3, #3
 800510c:	3301      	adds	r3, #1
 800510e:	005b      	lsls	r3, r3, #1
 8005110:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	fbb2 f3f3 	udiv	r3, r2, r3
 800511a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800511c:	69bb      	ldr	r3, [r7, #24]
}
 800511e:	4618      	mov	r0, r3
 8005120:	3724      	adds	r7, #36	; 0x24
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	40021000 	.word	0x40021000
 8005130:	080098a8 	.word	0x080098a8
 8005134:	00f42400 	.word	0x00f42400
 8005138:	007a1200 	.word	0x007a1200

0800513c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800513c:	b480      	push	{r7}
 800513e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005140:	4b03      	ldr	r3, [pc, #12]	; (8005150 <HAL_RCC_GetHCLKFreq+0x14>)
 8005142:	681b      	ldr	r3, [r3, #0]
}
 8005144:	4618      	mov	r0, r3
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	20000004 	.word	0x20000004

08005154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005158:	f7ff fff0 	bl	800513c <HAL_RCC_GetHCLKFreq>
 800515c:	4602      	mov	r2, r0
 800515e:	4b06      	ldr	r3, [pc, #24]	; (8005178 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	0a1b      	lsrs	r3, r3, #8
 8005164:	f003 0307 	and.w	r3, r3, #7
 8005168:	4904      	ldr	r1, [pc, #16]	; (800517c <HAL_RCC_GetPCLK1Freq+0x28>)
 800516a:	5ccb      	ldrb	r3, [r1, r3]
 800516c:	f003 031f 	and.w	r3, r3, #31
 8005170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005174:	4618      	mov	r0, r3
 8005176:	bd80      	pop	{r7, pc}
 8005178:	40021000 	.word	0x40021000
 800517c:	080098a0 	.word	0x080098a0

08005180 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005184:	f7ff ffda 	bl	800513c <HAL_RCC_GetHCLKFreq>
 8005188:	4602      	mov	r2, r0
 800518a:	4b06      	ldr	r3, [pc, #24]	; (80051a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	0adb      	lsrs	r3, r3, #11
 8005190:	f003 0307 	and.w	r3, r3, #7
 8005194:	4904      	ldr	r1, [pc, #16]	; (80051a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005196:	5ccb      	ldrb	r3, [r1, r3]
 8005198:	f003 031f 	and.w	r3, r3, #31
 800519c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	40021000 	.word	0x40021000
 80051a8:	080098a0 	.word	0x080098a0

080051ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b086      	sub	sp, #24
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80051b4:	2300      	movs	r3, #0
 80051b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80051b8:	4b2a      	ldr	r3, [pc, #168]	; (8005264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d003      	beq.n	80051cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80051c4:	f7ff f9ee 	bl	80045a4 <HAL_PWREx_GetVoltageRange>
 80051c8:	6178      	str	r0, [r7, #20]
 80051ca:	e014      	b.n	80051f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80051cc:	4b25      	ldr	r3, [pc, #148]	; (8005264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d0:	4a24      	ldr	r2, [pc, #144]	; (8005264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051d6:	6593      	str	r3, [r2, #88]	; 0x58
 80051d8:	4b22      	ldr	r3, [pc, #136]	; (8005264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051e0:	60fb      	str	r3, [r7, #12]
 80051e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80051e4:	f7ff f9de 	bl	80045a4 <HAL_PWREx_GetVoltageRange>
 80051e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80051ea:	4b1e      	ldr	r3, [pc, #120]	; (8005264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ee:	4a1d      	ldr	r2, [pc, #116]	; (8005264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051f4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051fc:	d10b      	bne.n	8005216 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2b80      	cmp	r3, #128	; 0x80
 8005202:	d919      	bls.n	8005238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2ba0      	cmp	r3, #160	; 0xa0
 8005208:	d902      	bls.n	8005210 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800520a:	2302      	movs	r3, #2
 800520c:	613b      	str	r3, [r7, #16]
 800520e:	e013      	b.n	8005238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005210:	2301      	movs	r3, #1
 8005212:	613b      	str	r3, [r7, #16]
 8005214:	e010      	b.n	8005238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2b80      	cmp	r3, #128	; 0x80
 800521a:	d902      	bls.n	8005222 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800521c:	2303      	movs	r3, #3
 800521e:	613b      	str	r3, [r7, #16]
 8005220:	e00a      	b.n	8005238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2b80      	cmp	r3, #128	; 0x80
 8005226:	d102      	bne.n	800522e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005228:	2302      	movs	r3, #2
 800522a:	613b      	str	r3, [r7, #16]
 800522c:	e004      	b.n	8005238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2b70      	cmp	r3, #112	; 0x70
 8005232:	d101      	bne.n	8005238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005234:	2301      	movs	r3, #1
 8005236:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005238:	4b0b      	ldr	r3, [pc, #44]	; (8005268 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f023 0207 	bic.w	r2, r3, #7
 8005240:	4909      	ldr	r1, [pc, #36]	; (8005268 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	4313      	orrs	r3, r2
 8005246:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005248:	4b07      	ldr	r3, [pc, #28]	; (8005268 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0307 	and.w	r3, r3, #7
 8005250:	693a      	ldr	r2, [r7, #16]
 8005252:	429a      	cmp	r2, r3
 8005254:	d001      	beq.n	800525a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e000      	b.n	800525c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3718      	adds	r7, #24
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	40021000 	.word	0x40021000
 8005268:	40022000 	.word	0x40022000

0800526c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005274:	2300      	movs	r3, #0
 8005276:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005278:	2300      	movs	r3, #0
 800527a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005284:	2b00      	cmp	r3, #0
 8005286:	d041      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800528c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005290:	d02a      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005292:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005296:	d824      	bhi.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005298:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800529c:	d008      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800529e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80052a2:	d81e      	bhi.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00a      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x52>
 80052a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052ac:	d010      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80052ae:	e018      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80052b0:	4b86      	ldr	r3, [pc, #536]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	4a85      	ldr	r2, [pc, #532]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052ba:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80052bc:	e015      	b.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	3304      	adds	r3, #4
 80052c2:	2100      	movs	r1, #0
 80052c4:	4618      	mov	r0, r3
 80052c6:	f000 fabb 	bl	8005840 <RCCEx_PLLSAI1_Config>
 80052ca:	4603      	mov	r3, r0
 80052cc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80052ce:	e00c      	b.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	3320      	adds	r3, #32
 80052d4:	2100      	movs	r1, #0
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 fba6 	bl	8005a28 <RCCEx_PLLSAI2_Config>
 80052dc:	4603      	mov	r3, r0
 80052de:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80052e0:	e003      	b.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	74fb      	strb	r3, [r7, #19]
      break;
 80052e6:	e000      	b.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80052e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052ea:	7cfb      	ldrb	r3, [r7, #19]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10b      	bne.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80052f0:	4b76      	ldr	r3, [pc, #472]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052fe:	4973      	ldr	r1, [pc, #460]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005300:	4313      	orrs	r3, r2
 8005302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005306:	e001      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005308:	7cfb      	ldrb	r3, [r7, #19]
 800530a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d041      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800531c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005320:	d02a      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005322:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005326:	d824      	bhi.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005328:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800532c:	d008      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800532e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005332:	d81e      	bhi.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005334:	2b00      	cmp	r3, #0
 8005336:	d00a      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005338:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800533c:	d010      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800533e:	e018      	b.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005340:	4b62      	ldr	r3, [pc, #392]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	4a61      	ldr	r2, [pc, #388]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800534a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800534c:	e015      	b.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	3304      	adds	r3, #4
 8005352:	2100      	movs	r1, #0
 8005354:	4618      	mov	r0, r3
 8005356:	f000 fa73 	bl	8005840 <RCCEx_PLLSAI1_Config>
 800535a:	4603      	mov	r3, r0
 800535c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800535e:	e00c      	b.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	3320      	adds	r3, #32
 8005364:	2100      	movs	r1, #0
 8005366:	4618      	mov	r0, r3
 8005368:	f000 fb5e 	bl	8005a28 <RCCEx_PLLSAI2_Config>
 800536c:	4603      	mov	r3, r0
 800536e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005370:	e003      	b.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	74fb      	strb	r3, [r7, #19]
      break;
 8005376:	e000      	b.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005378:	bf00      	nop
    }

    if(ret == HAL_OK)
 800537a:	7cfb      	ldrb	r3, [r7, #19]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10b      	bne.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005380:	4b52      	ldr	r3, [pc, #328]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005386:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800538e:	494f      	ldr	r1, [pc, #316]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005390:	4313      	orrs	r3, r2
 8005392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005396:	e001      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005398:	7cfb      	ldrb	r3, [r7, #19]
 800539a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f000 80a0 	beq.w	80054ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053aa:	2300      	movs	r3, #0
 80053ac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80053ae:	4b47      	ldr	r3, [pc, #284]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x152>
 80053ba:	2301      	movs	r3, #1
 80053bc:	e000      	b.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80053be:	2300      	movs	r3, #0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00d      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053c4:	4b41      	ldr	r3, [pc, #260]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053c8:	4a40      	ldr	r2, [pc, #256]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053ce:	6593      	str	r3, [r2, #88]	; 0x58
 80053d0:	4b3e      	ldr	r3, [pc, #248]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053d8:	60bb      	str	r3, [r7, #8]
 80053da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053dc:	2301      	movs	r3, #1
 80053de:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053e0:	4b3b      	ldr	r3, [pc, #236]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a3a      	ldr	r2, [pc, #232]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80053e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053ec:	f7fc ff46 	bl	800227c <HAL_GetTick>
 80053f0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80053f2:	e009      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053f4:	f7fc ff42 	bl	800227c <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d902      	bls.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	74fb      	strb	r3, [r7, #19]
        break;
 8005406:	e005      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005408:	4b31      	ldr	r3, [pc, #196]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005410:	2b00      	cmp	r3, #0
 8005412:	d0ef      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005414:	7cfb      	ldrb	r3, [r7, #19]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d15c      	bne.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800541a:	4b2c      	ldr	r3, [pc, #176]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800541c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005420:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005424:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d01f      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	429a      	cmp	r2, r3
 8005436:	d019      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005438:	4b24      	ldr	r3, [pc, #144]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800543a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800543e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005442:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005444:	4b21      	ldr	r3, [pc, #132]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800544a:	4a20      	ldr	r2, [pc, #128]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800544c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005450:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005454:	4b1d      	ldr	r3, [pc, #116]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800545a:	4a1c      	ldr	r2, [pc, #112]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800545c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005460:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005464:	4a19      	ldr	r2, [pc, #100]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	2b00      	cmp	r3, #0
 8005474:	d016      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005476:	f7fc ff01 	bl	800227c <HAL_GetTick>
 800547a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800547c:	e00b      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800547e:	f7fc fefd 	bl	800227c <HAL_GetTick>
 8005482:	4602      	mov	r2, r0
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	f241 3288 	movw	r2, #5000	; 0x1388
 800548c:	4293      	cmp	r3, r2
 800548e:	d902      	bls.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	74fb      	strb	r3, [r7, #19]
            break;
 8005494:	e006      	b.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005496:	4b0d      	ldr	r3, [pc, #52]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800549c:	f003 0302 	and.w	r3, r3, #2
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d0ec      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80054a4:	7cfb      	ldrb	r3, [r7, #19]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d10c      	bne.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054aa:	4b08      	ldr	r3, [pc, #32]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054ba:	4904      	ldr	r1, [pc, #16]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054bc:	4313      	orrs	r3, r2
 80054be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80054c2:	e009      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80054c4:	7cfb      	ldrb	r3, [r7, #19]
 80054c6:	74bb      	strb	r3, [r7, #18]
 80054c8:	e006      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80054ca:	bf00      	nop
 80054cc:	40021000 	.word	0x40021000
 80054d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054d4:	7cfb      	ldrb	r3, [r7, #19]
 80054d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054d8:	7c7b      	ldrb	r3, [r7, #17]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d105      	bne.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054de:	4b9e      	ldr	r3, [pc, #632]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e2:	4a9d      	ldr	r2, [pc, #628]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054e8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0301 	and.w	r3, r3, #1
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00a      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80054f6:	4b98      	ldr	r3, [pc, #608]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054fc:	f023 0203 	bic.w	r2, r3, #3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005504:	4994      	ldr	r1, [pc, #592]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005506:	4313      	orrs	r3, r2
 8005508:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0302 	and.w	r3, r3, #2
 8005514:	2b00      	cmp	r3, #0
 8005516:	d00a      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005518:	4b8f      	ldr	r3, [pc, #572]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800551a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800551e:	f023 020c 	bic.w	r2, r3, #12
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005526:	498c      	ldr	r1, [pc, #560]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005528:	4313      	orrs	r3, r2
 800552a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0304 	and.w	r3, r3, #4
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00a      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800553a:	4b87      	ldr	r3, [pc, #540]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800553c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005540:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005548:	4983      	ldr	r1, [pc, #524]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800554a:	4313      	orrs	r3, r2
 800554c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0308 	and.w	r3, r3, #8
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00a      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800555c:	4b7e      	ldr	r3, [pc, #504]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800555e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005562:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800556a:	497b      	ldr	r1, [pc, #492]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800556c:	4313      	orrs	r3, r2
 800556e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0310 	and.w	r3, r3, #16
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00a      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800557e:	4b76      	ldr	r3, [pc, #472]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005584:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800558c:	4972      	ldr	r1, [pc, #456]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800558e:	4313      	orrs	r3, r2
 8005590:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0320 	and.w	r3, r3, #32
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00a      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055a0:	4b6d      	ldr	r3, [pc, #436]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055ae:	496a      	ldr	r1, [pc, #424]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055b0:	4313      	orrs	r3, r2
 80055b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00a      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055c2:	4b65      	ldr	r3, [pc, #404]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055d0:	4961      	ldr	r1, [pc, #388]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00a      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80055e4:	4b5c      	ldr	r3, [pc, #368]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055f2:	4959      	ldr	r1, [pc, #356]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00a      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005606:	4b54      	ldr	r3, [pc, #336]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800560c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005614:	4950      	ldr	r1, [pc, #320]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005616:	4313      	orrs	r3, r2
 8005618:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00a      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005628:	4b4b      	ldr	r3, [pc, #300]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800562a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800562e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005636:	4948      	ldr	r1, [pc, #288]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005638:	4313      	orrs	r3, r2
 800563a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00a      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800564a:	4b43      	ldr	r3, [pc, #268]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800564c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005650:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005658:	493f      	ldr	r1, [pc, #252]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800565a:	4313      	orrs	r3, r2
 800565c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d028      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800566c:	4b3a      	ldr	r3, [pc, #232]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800566e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005672:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800567a:	4937      	ldr	r1, [pc, #220]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800567c:	4313      	orrs	r3, r2
 800567e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005686:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800568a:	d106      	bne.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800568c:	4b32      	ldr	r3, [pc, #200]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	4a31      	ldr	r2, [pc, #196]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005692:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005696:	60d3      	str	r3, [r2, #12]
 8005698:	e011      	b.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800569e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056a2:	d10c      	bne.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	3304      	adds	r3, #4
 80056a8:	2101      	movs	r1, #1
 80056aa:	4618      	mov	r0, r3
 80056ac:	f000 f8c8 	bl	8005840 <RCCEx_PLLSAI1_Config>
 80056b0:	4603      	mov	r3, r0
 80056b2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80056b4:	7cfb      	ldrb	r3, [r7, #19]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d001      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80056ba:	7cfb      	ldrb	r3, [r7, #19]
 80056bc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d028      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80056ca:	4b23      	ldr	r3, [pc, #140]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d8:	491f      	ldr	r1, [pc, #124]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056da:	4313      	orrs	r3, r2
 80056dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056e8:	d106      	bne.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056ea:	4b1b      	ldr	r3, [pc, #108]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	4a1a      	ldr	r2, [pc, #104]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056f4:	60d3      	str	r3, [r2, #12]
 80056f6:	e011      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005700:	d10c      	bne.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	3304      	adds	r3, #4
 8005706:	2101      	movs	r1, #1
 8005708:	4618      	mov	r0, r3
 800570a:	f000 f899 	bl	8005840 <RCCEx_PLLSAI1_Config>
 800570e:	4603      	mov	r3, r0
 8005710:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005712:	7cfb      	ldrb	r3, [r7, #19]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d001      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005718:	7cfb      	ldrb	r3, [r7, #19]
 800571a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d02b      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005728:	4b0b      	ldr	r3, [pc, #44]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800572a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800572e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005736:	4908      	ldr	r1, [pc, #32]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005738:	4313      	orrs	r3, r2
 800573a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005742:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005746:	d109      	bne.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005748:	4b03      	ldr	r3, [pc, #12]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	4a02      	ldr	r2, [pc, #8]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800574e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005752:	60d3      	str	r3, [r2, #12]
 8005754:	e014      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005756:	bf00      	nop
 8005758:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005760:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005764:	d10c      	bne.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	3304      	adds	r3, #4
 800576a:	2101      	movs	r1, #1
 800576c:	4618      	mov	r0, r3
 800576e:	f000 f867 	bl	8005840 <RCCEx_PLLSAI1_Config>
 8005772:	4603      	mov	r3, r0
 8005774:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005776:	7cfb      	ldrb	r3, [r7, #19]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d001      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800577c:	7cfb      	ldrb	r3, [r7, #19]
 800577e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d02f      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800578c:	4b2b      	ldr	r3, [pc, #172]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800578e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005792:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800579a:	4928      	ldr	r1, [pc, #160]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800579c:	4313      	orrs	r3, r2
 800579e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057aa:	d10d      	bne.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	3304      	adds	r3, #4
 80057b0:	2102      	movs	r1, #2
 80057b2:	4618      	mov	r0, r3
 80057b4:	f000 f844 	bl	8005840 <RCCEx_PLLSAI1_Config>
 80057b8:	4603      	mov	r3, r0
 80057ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057bc:	7cfb      	ldrb	r3, [r7, #19]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d014      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80057c2:	7cfb      	ldrb	r3, [r7, #19]
 80057c4:	74bb      	strb	r3, [r7, #18]
 80057c6:	e011      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057d0:	d10c      	bne.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	3320      	adds	r3, #32
 80057d6:	2102      	movs	r1, #2
 80057d8:	4618      	mov	r0, r3
 80057da:	f000 f925 	bl	8005a28 <RCCEx_PLLSAI2_Config>
 80057de:	4603      	mov	r3, r0
 80057e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057e2:	7cfb      	ldrb	r3, [r7, #19]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d001      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80057e8:	7cfb      	ldrb	r3, [r7, #19]
 80057ea:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00a      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80057f8:	4b10      	ldr	r3, [pc, #64]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80057fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057fe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005806:	490d      	ldr	r1, [pc, #52]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005808:	4313      	orrs	r3, r2
 800580a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00b      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800581a:	4b08      	ldr	r3, [pc, #32]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800581c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005820:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800582a:	4904      	ldr	r1, [pc, #16]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800582c:	4313      	orrs	r3, r2
 800582e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005832:	7cbb      	ldrb	r3, [r7, #18]
}
 8005834:	4618      	mov	r0, r3
 8005836:	3718      	adds	r7, #24
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	40021000 	.word	0x40021000

08005840 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800584a:	2300      	movs	r3, #0
 800584c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800584e:	4b75      	ldr	r3, [pc, #468]	; (8005a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	f003 0303 	and.w	r3, r3, #3
 8005856:	2b00      	cmp	r3, #0
 8005858:	d018      	beq.n	800588c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800585a:	4b72      	ldr	r3, [pc, #456]	; (8005a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	f003 0203 	and.w	r2, r3, #3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	429a      	cmp	r2, r3
 8005868:	d10d      	bne.n	8005886 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
       ||
 800586e:	2b00      	cmp	r3, #0
 8005870:	d009      	beq.n	8005886 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005872:	4b6c      	ldr	r3, [pc, #432]	; (8005a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	091b      	lsrs	r3, r3, #4
 8005878:	f003 0307 	and.w	r3, r3, #7
 800587c:	1c5a      	adds	r2, r3, #1
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
       ||
 8005882:	429a      	cmp	r2, r3
 8005884:	d047      	beq.n	8005916 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	73fb      	strb	r3, [r7, #15]
 800588a:	e044      	b.n	8005916 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2b03      	cmp	r3, #3
 8005892:	d018      	beq.n	80058c6 <RCCEx_PLLSAI1_Config+0x86>
 8005894:	2b03      	cmp	r3, #3
 8005896:	d825      	bhi.n	80058e4 <RCCEx_PLLSAI1_Config+0xa4>
 8005898:	2b01      	cmp	r3, #1
 800589a:	d002      	beq.n	80058a2 <RCCEx_PLLSAI1_Config+0x62>
 800589c:	2b02      	cmp	r3, #2
 800589e:	d009      	beq.n	80058b4 <RCCEx_PLLSAI1_Config+0x74>
 80058a0:	e020      	b.n	80058e4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80058a2:	4b60      	ldr	r3, [pc, #384]	; (8005a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0302 	and.w	r3, r3, #2
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d11d      	bne.n	80058ea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058b2:	e01a      	b.n	80058ea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80058b4:	4b5b      	ldr	r3, [pc, #364]	; (8005a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d116      	bne.n	80058ee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058c4:	e013      	b.n	80058ee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80058c6:	4b57      	ldr	r3, [pc, #348]	; (8005a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d10f      	bne.n	80058f2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80058d2:	4b54      	ldr	r3, [pc, #336]	; (8005a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d109      	bne.n	80058f2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80058e2:	e006      	b.n	80058f2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	73fb      	strb	r3, [r7, #15]
      break;
 80058e8:	e004      	b.n	80058f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80058ea:	bf00      	nop
 80058ec:	e002      	b.n	80058f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80058ee:	bf00      	nop
 80058f0:	e000      	b.n	80058f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80058f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80058f4:	7bfb      	ldrb	r3, [r7, #15]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10d      	bne.n	8005916 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80058fa:	4b4a      	ldr	r3, [pc, #296]	; (8005a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6819      	ldr	r1, [r3, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	3b01      	subs	r3, #1
 800590c:	011b      	lsls	r3, r3, #4
 800590e:	430b      	orrs	r3, r1
 8005910:	4944      	ldr	r1, [pc, #272]	; (8005a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005912:	4313      	orrs	r3, r2
 8005914:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005916:	7bfb      	ldrb	r3, [r7, #15]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d17d      	bne.n	8005a18 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800591c:	4b41      	ldr	r3, [pc, #260]	; (8005a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a40      	ldr	r2, [pc, #256]	; (8005a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005922:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005926:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005928:	f7fc fca8 	bl	800227c <HAL_GetTick>
 800592c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800592e:	e009      	b.n	8005944 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005930:	f7fc fca4 	bl	800227c <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	2b02      	cmp	r3, #2
 800593c:	d902      	bls.n	8005944 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	73fb      	strb	r3, [r7, #15]
        break;
 8005942:	e005      	b.n	8005950 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005944:	4b37      	ldr	r3, [pc, #220]	; (8005a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1ef      	bne.n	8005930 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005950:	7bfb      	ldrb	r3, [r7, #15]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d160      	bne.n	8005a18 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d111      	bne.n	8005980 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800595c:	4b31      	ldr	r3, [pc, #196]	; (8005a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	6892      	ldr	r2, [r2, #8]
 800596c:	0211      	lsls	r1, r2, #8
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	68d2      	ldr	r2, [r2, #12]
 8005972:	0912      	lsrs	r2, r2, #4
 8005974:	0452      	lsls	r2, r2, #17
 8005976:	430a      	orrs	r2, r1
 8005978:	492a      	ldr	r1, [pc, #168]	; (8005a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 800597a:	4313      	orrs	r3, r2
 800597c:	610b      	str	r3, [r1, #16]
 800597e:	e027      	b.n	80059d0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d112      	bne.n	80059ac <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005986:	4b27      	ldr	r3, [pc, #156]	; (8005a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800598e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	6892      	ldr	r2, [r2, #8]
 8005996:	0211      	lsls	r1, r2, #8
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	6912      	ldr	r2, [r2, #16]
 800599c:	0852      	lsrs	r2, r2, #1
 800599e:	3a01      	subs	r2, #1
 80059a0:	0552      	lsls	r2, r2, #21
 80059a2:	430a      	orrs	r2, r1
 80059a4:	491f      	ldr	r1, [pc, #124]	; (8005a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	610b      	str	r3, [r1, #16]
 80059aa:	e011      	b.n	80059d0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059ac:	4b1d      	ldr	r3, [pc, #116]	; (8005a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80059b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	6892      	ldr	r2, [r2, #8]
 80059bc:	0211      	lsls	r1, r2, #8
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	6952      	ldr	r2, [r2, #20]
 80059c2:	0852      	lsrs	r2, r2, #1
 80059c4:	3a01      	subs	r2, #1
 80059c6:	0652      	lsls	r2, r2, #25
 80059c8:	430a      	orrs	r2, r1
 80059ca:	4916      	ldr	r1, [pc, #88]	; (8005a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059cc:	4313      	orrs	r3, r2
 80059ce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80059d0:	4b14      	ldr	r3, [pc, #80]	; (8005a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a13      	ldr	r2, [pc, #76]	; (8005a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80059da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059dc:	f7fc fc4e 	bl	800227c <HAL_GetTick>
 80059e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80059e2:	e009      	b.n	80059f8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80059e4:	f7fc fc4a 	bl	800227c <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d902      	bls.n	80059f8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	73fb      	strb	r3, [r7, #15]
          break;
 80059f6:	e005      	b.n	8005a04 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80059f8:	4b0a      	ldr	r3, [pc, #40]	; (8005a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d0ef      	beq.n	80059e4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005a04:	7bfb      	ldrb	r3, [r7, #15]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d106      	bne.n	8005a18 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005a0a:	4b06      	ldr	r3, [pc, #24]	; (8005a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a0c:	691a      	ldr	r2, [r3, #16]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	4904      	ldr	r1, [pc, #16]	; (8005a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a14:	4313      	orrs	r3, r2
 8005a16:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	40021000 	.word	0x40021000

08005a28 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a32:	2300      	movs	r3, #0
 8005a34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005a36:	4b6a      	ldr	r3, [pc, #424]	; (8005be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	f003 0303 	and.w	r3, r3, #3
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d018      	beq.n	8005a74 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005a42:	4b67      	ldr	r3, [pc, #412]	; (8005be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	f003 0203 	and.w	r2, r3, #3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d10d      	bne.n	8005a6e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
       ||
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d009      	beq.n	8005a6e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005a5a:	4b61      	ldr	r3, [pc, #388]	; (8005be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	091b      	lsrs	r3, r3, #4
 8005a60:	f003 0307 	and.w	r3, r3, #7
 8005a64:	1c5a      	adds	r2, r3, #1
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
       ||
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d047      	beq.n	8005afe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	73fb      	strb	r3, [r7, #15]
 8005a72:	e044      	b.n	8005afe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2b03      	cmp	r3, #3
 8005a7a:	d018      	beq.n	8005aae <RCCEx_PLLSAI2_Config+0x86>
 8005a7c:	2b03      	cmp	r3, #3
 8005a7e:	d825      	bhi.n	8005acc <RCCEx_PLLSAI2_Config+0xa4>
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d002      	beq.n	8005a8a <RCCEx_PLLSAI2_Config+0x62>
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d009      	beq.n	8005a9c <RCCEx_PLLSAI2_Config+0x74>
 8005a88:	e020      	b.n	8005acc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a8a:	4b55      	ldr	r3, [pc, #340]	; (8005be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0302 	and.w	r3, r3, #2
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d11d      	bne.n	8005ad2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a9a:	e01a      	b.n	8005ad2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005a9c:	4b50      	ldr	r3, [pc, #320]	; (8005be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d116      	bne.n	8005ad6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005aac:	e013      	b.n	8005ad6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005aae:	4b4c      	ldr	r3, [pc, #304]	; (8005be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d10f      	bne.n	8005ada <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005aba:	4b49      	ldr	r3, [pc, #292]	; (8005be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d109      	bne.n	8005ada <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005aca:	e006      	b.n	8005ada <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	73fb      	strb	r3, [r7, #15]
      break;
 8005ad0:	e004      	b.n	8005adc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005ad2:	bf00      	nop
 8005ad4:	e002      	b.n	8005adc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005ad6:	bf00      	nop
 8005ad8:	e000      	b.n	8005adc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005ada:	bf00      	nop
    }

    if(status == HAL_OK)
 8005adc:	7bfb      	ldrb	r3, [r7, #15]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d10d      	bne.n	8005afe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005ae2:	4b3f      	ldr	r3, [pc, #252]	; (8005be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6819      	ldr	r1, [r3, #0]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	3b01      	subs	r3, #1
 8005af4:	011b      	lsls	r3, r3, #4
 8005af6:	430b      	orrs	r3, r1
 8005af8:	4939      	ldr	r1, [pc, #228]	; (8005be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005afa:	4313      	orrs	r3, r2
 8005afc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005afe:	7bfb      	ldrb	r3, [r7, #15]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d167      	bne.n	8005bd4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005b04:	4b36      	ldr	r3, [pc, #216]	; (8005be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a35      	ldr	r2, [pc, #212]	; (8005be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b10:	f7fc fbb4 	bl	800227c <HAL_GetTick>
 8005b14:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b16:	e009      	b.n	8005b2c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005b18:	f7fc fbb0 	bl	800227c <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d902      	bls.n	8005b2c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	73fb      	strb	r3, [r7, #15]
        break;
 8005b2a:	e005      	b.n	8005b38 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b2c:	4b2c      	ldr	r3, [pc, #176]	; (8005be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1ef      	bne.n	8005b18 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005b38:	7bfb      	ldrb	r3, [r7, #15]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d14a      	bne.n	8005bd4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d111      	bne.n	8005b68 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b44:	4b26      	ldr	r3, [pc, #152]	; (8005be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b46:	695b      	ldr	r3, [r3, #20]
 8005b48:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005b4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	6892      	ldr	r2, [r2, #8]
 8005b54:	0211      	lsls	r1, r2, #8
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	68d2      	ldr	r2, [r2, #12]
 8005b5a:	0912      	lsrs	r2, r2, #4
 8005b5c:	0452      	lsls	r2, r2, #17
 8005b5e:	430a      	orrs	r2, r1
 8005b60:	491f      	ldr	r1, [pc, #124]	; (8005be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b62:	4313      	orrs	r3, r2
 8005b64:	614b      	str	r3, [r1, #20]
 8005b66:	e011      	b.n	8005b8c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b68:	4b1d      	ldr	r3, [pc, #116]	; (8005be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005b70:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	6892      	ldr	r2, [r2, #8]
 8005b78:	0211      	lsls	r1, r2, #8
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	6912      	ldr	r2, [r2, #16]
 8005b7e:	0852      	lsrs	r2, r2, #1
 8005b80:	3a01      	subs	r2, #1
 8005b82:	0652      	lsls	r2, r2, #25
 8005b84:	430a      	orrs	r2, r1
 8005b86:	4916      	ldr	r1, [pc, #88]	; (8005be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005b8c:	4b14      	ldr	r3, [pc, #80]	; (8005be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a13      	ldr	r2, [pc, #76]	; (8005be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b96:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b98:	f7fc fb70 	bl	800227c <HAL_GetTick>
 8005b9c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005b9e:	e009      	b.n	8005bb4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005ba0:	f7fc fb6c 	bl	800227c <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d902      	bls.n	8005bb4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	73fb      	strb	r3, [r7, #15]
          break;
 8005bb2:	e005      	b.n	8005bc0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005bb4:	4b0a      	ldr	r3, [pc, #40]	; (8005be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d0ef      	beq.n	8005ba0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005bc0:	7bfb      	ldrb	r3, [r7, #15]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d106      	bne.n	8005bd4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005bc6:	4b06      	ldr	r3, [pc, #24]	; (8005be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bc8:	695a      	ldr	r2, [r3, #20]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	4904      	ldr	r1, [pc, #16]	; (8005be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3710      	adds	r7, #16
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	40021000 	.word	0x40021000

08005be4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d101      	bne.n	8005bf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e049      	b.n	8005c8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d106      	bne.n	8005c10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f7fc f90a 	bl	8001e24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2202      	movs	r2, #2
 8005c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	3304      	adds	r3, #4
 8005c20:	4619      	mov	r1, r3
 8005c22:	4610      	mov	r0, r2
 8005c24:	f000 f8dc 	bl	8005de0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3708      	adds	r7, #8
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b086      	sub	sp, #24
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
 8005c9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d101      	bne.n	8005ca6 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e097      	b.n	8005dd6 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d106      	bne.n	8005cc0 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f7fb ffdc 	bl	8001c78 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	6812      	ldr	r2, [r2, #0]
 8005cd2:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005cd6:	f023 0307 	bic.w	r3, r3, #7
 8005cda:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	3304      	adds	r3, #4
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	4610      	mov	r0, r2
 8005ce8:	f000 f87a 	bl	8005de0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	697a      	ldr	r2, [r7, #20]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d14:	f023 0303 	bic.w	r3, r3, #3
 8005d18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	689a      	ldr	r2, [r3, #8]
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	021b      	lsls	r3, r3, #8
 8005d24:	4313      	orrs	r3, r2
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005d32:	f023 030c 	bic.w	r3, r3, #12
 8005d36:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	68da      	ldr	r2, [r3, #12]
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	69db      	ldr	r3, [r3, #28]
 8005d4c:	021b      	lsls	r3, r3, #8
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	011a      	lsls	r2, r3, #4
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	6a1b      	ldr	r3, [r3, #32]
 8005d60:	031b      	lsls	r3, r3, #12
 8005d62:	4313      	orrs	r3, r2
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005d70:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005d78:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	685a      	ldr	r2, [r3, #4]
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	011b      	lsls	r3, r3, #4
 8005d84:	4313      	orrs	r3, r2
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	697a      	ldr	r2, [r7, #20]
 8005d92:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3718      	adds	r7, #24
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
	...

08005de0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b085      	sub	sp, #20
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a40      	ldr	r2, [pc, #256]	; (8005ef4 <TIM_Base_SetConfig+0x114>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d013      	beq.n	8005e20 <TIM_Base_SetConfig+0x40>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dfe:	d00f      	beq.n	8005e20 <TIM_Base_SetConfig+0x40>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a3d      	ldr	r2, [pc, #244]	; (8005ef8 <TIM_Base_SetConfig+0x118>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d00b      	beq.n	8005e20 <TIM_Base_SetConfig+0x40>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a3c      	ldr	r2, [pc, #240]	; (8005efc <TIM_Base_SetConfig+0x11c>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d007      	beq.n	8005e20 <TIM_Base_SetConfig+0x40>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a3b      	ldr	r2, [pc, #236]	; (8005f00 <TIM_Base_SetConfig+0x120>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d003      	beq.n	8005e20 <TIM_Base_SetConfig+0x40>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a3a      	ldr	r2, [pc, #232]	; (8005f04 <TIM_Base_SetConfig+0x124>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d108      	bne.n	8005e32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a2f      	ldr	r2, [pc, #188]	; (8005ef4 <TIM_Base_SetConfig+0x114>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d01f      	beq.n	8005e7a <TIM_Base_SetConfig+0x9a>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e40:	d01b      	beq.n	8005e7a <TIM_Base_SetConfig+0x9a>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a2c      	ldr	r2, [pc, #176]	; (8005ef8 <TIM_Base_SetConfig+0x118>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d017      	beq.n	8005e7a <TIM_Base_SetConfig+0x9a>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a2b      	ldr	r2, [pc, #172]	; (8005efc <TIM_Base_SetConfig+0x11c>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d013      	beq.n	8005e7a <TIM_Base_SetConfig+0x9a>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a2a      	ldr	r2, [pc, #168]	; (8005f00 <TIM_Base_SetConfig+0x120>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d00f      	beq.n	8005e7a <TIM_Base_SetConfig+0x9a>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a29      	ldr	r2, [pc, #164]	; (8005f04 <TIM_Base_SetConfig+0x124>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d00b      	beq.n	8005e7a <TIM_Base_SetConfig+0x9a>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a28      	ldr	r2, [pc, #160]	; (8005f08 <TIM_Base_SetConfig+0x128>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d007      	beq.n	8005e7a <TIM_Base_SetConfig+0x9a>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a27      	ldr	r2, [pc, #156]	; (8005f0c <TIM_Base_SetConfig+0x12c>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d003      	beq.n	8005e7a <TIM_Base_SetConfig+0x9a>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a26      	ldr	r2, [pc, #152]	; (8005f10 <TIM_Base_SetConfig+0x130>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d108      	bne.n	8005e8c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	689a      	ldr	r2, [r3, #8]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a10      	ldr	r2, [pc, #64]	; (8005ef4 <TIM_Base_SetConfig+0x114>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d00f      	beq.n	8005ed8 <TIM_Base_SetConfig+0xf8>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a12      	ldr	r2, [pc, #72]	; (8005f04 <TIM_Base_SetConfig+0x124>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d00b      	beq.n	8005ed8 <TIM_Base_SetConfig+0xf8>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a11      	ldr	r2, [pc, #68]	; (8005f08 <TIM_Base_SetConfig+0x128>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d007      	beq.n	8005ed8 <TIM_Base_SetConfig+0xf8>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a10      	ldr	r2, [pc, #64]	; (8005f0c <TIM_Base_SetConfig+0x12c>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d003      	beq.n	8005ed8 <TIM_Base_SetConfig+0xf8>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a0f      	ldr	r2, [pc, #60]	; (8005f10 <TIM_Base_SetConfig+0x130>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d103      	bne.n	8005ee0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	691a      	ldr	r2, [r3, #16]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	615a      	str	r2, [r3, #20]
}
 8005ee6:	bf00      	nop
 8005ee8:	3714      	adds	r7, #20
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	40012c00 	.word	0x40012c00
 8005ef8:	40000400 	.word	0x40000400
 8005efc:	40000800 	.word	0x40000800
 8005f00:	40000c00 	.word	0x40000c00
 8005f04:	40013400 	.word	0x40013400
 8005f08:	40014000 	.word	0x40014000
 8005f0c:	40014400 	.word	0x40014400
 8005f10:	40014800 	.word	0x40014800

08005f14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d101      	bne.n	8005f2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f28:	2302      	movs	r3, #2
 8005f2a:	e068      	b.n	8005ffe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2202      	movs	r2, #2
 8005f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a2e      	ldr	r2, [pc, #184]	; (800600c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d004      	beq.n	8005f60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a2d      	ldr	r2, [pc, #180]	; (8006010 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d108      	bne.n	8005f72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005f66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a1e      	ldr	r2, [pc, #120]	; (800600c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d01d      	beq.n	8005fd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f9e:	d018      	beq.n	8005fd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a1b      	ldr	r2, [pc, #108]	; (8006014 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d013      	beq.n	8005fd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a1a      	ldr	r2, [pc, #104]	; (8006018 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d00e      	beq.n	8005fd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a18      	ldr	r2, [pc, #96]	; (800601c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d009      	beq.n	8005fd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a13      	ldr	r2, [pc, #76]	; (8006010 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d004      	beq.n	8005fd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a14      	ldr	r2, [pc, #80]	; (8006020 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d10c      	bne.n	8005fec <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68ba      	ldr	r2, [r7, #8]
 8005fea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3714      	adds	r7, #20
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop
 800600c:	40012c00 	.word	0x40012c00
 8006010:	40013400 	.word	0x40013400
 8006014:	40000400 	.word	0x40000400
 8006018:	40000800 	.word	0x40000800
 800601c:	40000c00 	.word	0x40000c00
 8006020:	40014000 	.word	0x40014000

08006024 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d101      	bne.n	8006036 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e040      	b.n	80060b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800603a:	2b00      	cmp	r3, #0
 800603c:	d106      	bne.n	800604c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f7fb ff0c 	bl	8001e64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2224      	movs	r2, #36	; 0x24
 8006050:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f022 0201 	bic.w	r2, r2, #1
 8006060:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006066:	2b00      	cmp	r3, #0
 8006068:	d002      	beq.n	8006070 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 fb6a 	bl	8006744 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 f8af 	bl	80061d4 <UART_SetConfig>
 8006076:	4603      	mov	r3, r0
 8006078:	2b01      	cmp	r3, #1
 800607a:	d101      	bne.n	8006080 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e01b      	b.n	80060b8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	685a      	ldr	r2, [r3, #4]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800608e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	689a      	ldr	r2, [r3, #8]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800609e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f042 0201 	orr.w	r2, r2, #1
 80060ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 fbe9 	bl	8006888 <UART_CheckIdleState>
 80060b6:	4603      	mov	r3, r0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3708      	adds	r7, #8
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b08a      	sub	sp, #40	; 0x28
 80060c4:	af02      	add	r7, sp, #8
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	603b      	str	r3, [r7, #0]
 80060cc:	4613      	mov	r3, r2
 80060ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060d4:	2b20      	cmp	r3, #32
 80060d6:	d178      	bne.n	80061ca <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d002      	beq.n	80060e4 <HAL_UART_Transmit+0x24>
 80060de:	88fb      	ldrh	r3, [r7, #6]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d101      	bne.n	80060e8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e071      	b.n	80061cc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2221      	movs	r2, #33	; 0x21
 80060f4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060f6:	f7fc f8c1 	bl	800227c <HAL_GetTick>
 80060fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	88fa      	ldrh	r2, [r7, #6]
 8006100:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	88fa      	ldrh	r2, [r7, #6]
 8006108:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006114:	d108      	bne.n	8006128 <HAL_UART_Transmit+0x68>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d104      	bne.n	8006128 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800611e:	2300      	movs	r3, #0
 8006120:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	61bb      	str	r3, [r7, #24]
 8006126:	e003      	b.n	8006130 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800612c:	2300      	movs	r3, #0
 800612e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006130:	e030      	b.n	8006194 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	9300      	str	r3, [sp, #0]
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	2200      	movs	r2, #0
 800613a:	2180      	movs	r1, #128	; 0x80
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f000 fc4b 	bl	80069d8 <UART_WaitOnFlagUntilTimeout>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d004      	beq.n	8006152 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2220      	movs	r2, #32
 800614c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e03c      	b.n	80061cc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d10b      	bne.n	8006170 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	881a      	ldrh	r2, [r3, #0]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006164:	b292      	uxth	r2, r2
 8006166:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	3302      	adds	r3, #2
 800616c:	61bb      	str	r3, [r7, #24]
 800616e:	e008      	b.n	8006182 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	781a      	ldrb	r2, [r3, #0]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	b292      	uxth	r2, r2
 800617a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	3301      	adds	r3, #1
 8006180:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006188:	b29b      	uxth	r3, r3
 800618a:	3b01      	subs	r3, #1
 800618c:	b29a      	uxth	r2, r3
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800619a:	b29b      	uxth	r3, r3
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1c8      	bne.n	8006132 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	9300      	str	r3, [sp, #0]
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	2200      	movs	r2, #0
 80061a8:	2140      	movs	r1, #64	; 0x40
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f000 fc14 	bl	80069d8 <UART_WaitOnFlagUntilTimeout>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d004      	beq.n	80061c0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2220      	movs	r2, #32
 80061ba:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80061bc:	2303      	movs	r3, #3
 80061be:	e005      	b.n	80061cc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2220      	movs	r2, #32
 80061c4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80061c6:	2300      	movs	r3, #0
 80061c8:	e000      	b.n	80061cc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80061ca:	2302      	movs	r3, #2
  }
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3720      	adds	r7, #32
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061d8:	b08a      	sub	sp, #40	; 0x28
 80061da:	af00      	add	r7, sp, #0
 80061dc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061de:	2300      	movs	r3, #0
 80061e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	689a      	ldr	r2, [r3, #8]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	431a      	orrs	r2, r3
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	695b      	ldr	r3, [r3, #20]
 80061f2:	431a      	orrs	r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	69db      	ldr	r3, [r3, #28]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	4ba4      	ldr	r3, [pc, #656]	; (8006494 <UART_SetConfig+0x2c0>)
 8006204:	4013      	ands	r3, r2
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	6812      	ldr	r2, [r2, #0]
 800620a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800620c:	430b      	orrs	r3, r1
 800620e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	68da      	ldr	r2, [r3, #12]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	430a      	orrs	r2, r1
 8006224:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	699b      	ldr	r3, [r3, #24]
 800622a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a99      	ldr	r2, [pc, #612]	; (8006498 <UART_SetConfig+0x2c4>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d004      	beq.n	8006240 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800623c:	4313      	orrs	r3, r2
 800623e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006250:	430a      	orrs	r2, r1
 8006252:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a90      	ldr	r2, [pc, #576]	; (800649c <UART_SetConfig+0x2c8>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d126      	bne.n	80062ac <UART_SetConfig+0xd8>
 800625e:	4b90      	ldr	r3, [pc, #576]	; (80064a0 <UART_SetConfig+0x2cc>)
 8006260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006264:	f003 0303 	and.w	r3, r3, #3
 8006268:	2b03      	cmp	r3, #3
 800626a:	d81b      	bhi.n	80062a4 <UART_SetConfig+0xd0>
 800626c:	a201      	add	r2, pc, #4	; (adr r2, 8006274 <UART_SetConfig+0xa0>)
 800626e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006272:	bf00      	nop
 8006274:	08006285 	.word	0x08006285
 8006278:	08006295 	.word	0x08006295
 800627c:	0800628d 	.word	0x0800628d
 8006280:	0800629d 	.word	0x0800629d
 8006284:	2301      	movs	r3, #1
 8006286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800628a:	e116      	b.n	80064ba <UART_SetConfig+0x2e6>
 800628c:	2302      	movs	r3, #2
 800628e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006292:	e112      	b.n	80064ba <UART_SetConfig+0x2e6>
 8006294:	2304      	movs	r3, #4
 8006296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800629a:	e10e      	b.n	80064ba <UART_SetConfig+0x2e6>
 800629c:	2308      	movs	r3, #8
 800629e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062a2:	e10a      	b.n	80064ba <UART_SetConfig+0x2e6>
 80062a4:	2310      	movs	r3, #16
 80062a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062aa:	e106      	b.n	80064ba <UART_SetConfig+0x2e6>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a7c      	ldr	r2, [pc, #496]	; (80064a4 <UART_SetConfig+0x2d0>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d138      	bne.n	8006328 <UART_SetConfig+0x154>
 80062b6:	4b7a      	ldr	r3, [pc, #488]	; (80064a0 <UART_SetConfig+0x2cc>)
 80062b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062bc:	f003 030c 	and.w	r3, r3, #12
 80062c0:	2b0c      	cmp	r3, #12
 80062c2:	d82d      	bhi.n	8006320 <UART_SetConfig+0x14c>
 80062c4:	a201      	add	r2, pc, #4	; (adr r2, 80062cc <UART_SetConfig+0xf8>)
 80062c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ca:	bf00      	nop
 80062cc:	08006301 	.word	0x08006301
 80062d0:	08006321 	.word	0x08006321
 80062d4:	08006321 	.word	0x08006321
 80062d8:	08006321 	.word	0x08006321
 80062dc:	08006311 	.word	0x08006311
 80062e0:	08006321 	.word	0x08006321
 80062e4:	08006321 	.word	0x08006321
 80062e8:	08006321 	.word	0x08006321
 80062ec:	08006309 	.word	0x08006309
 80062f0:	08006321 	.word	0x08006321
 80062f4:	08006321 	.word	0x08006321
 80062f8:	08006321 	.word	0x08006321
 80062fc:	08006319 	.word	0x08006319
 8006300:	2300      	movs	r3, #0
 8006302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006306:	e0d8      	b.n	80064ba <UART_SetConfig+0x2e6>
 8006308:	2302      	movs	r3, #2
 800630a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800630e:	e0d4      	b.n	80064ba <UART_SetConfig+0x2e6>
 8006310:	2304      	movs	r3, #4
 8006312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006316:	e0d0      	b.n	80064ba <UART_SetConfig+0x2e6>
 8006318:	2308      	movs	r3, #8
 800631a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800631e:	e0cc      	b.n	80064ba <UART_SetConfig+0x2e6>
 8006320:	2310      	movs	r3, #16
 8006322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006326:	e0c8      	b.n	80064ba <UART_SetConfig+0x2e6>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a5e      	ldr	r2, [pc, #376]	; (80064a8 <UART_SetConfig+0x2d4>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d125      	bne.n	800637e <UART_SetConfig+0x1aa>
 8006332:	4b5b      	ldr	r3, [pc, #364]	; (80064a0 <UART_SetConfig+0x2cc>)
 8006334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006338:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800633c:	2b30      	cmp	r3, #48	; 0x30
 800633e:	d016      	beq.n	800636e <UART_SetConfig+0x19a>
 8006340:	2b30      	cmp	r3, #48	; 0x30
 8006342:	d818      	bhi.n	8006376 <UART_SetConfig+0x1a2>
 8006344:	2b20      	cmp	r3, #32
 8006346:	d00a      	beq.n	800635e <UART_SetConfig+0x18a>
 8006348:	2b20      	cmp	r3, #32
 800634a:	d814      	bhi.n	8006376 <UART_SetConfig+0x1a2>
 800634c:	2b00      	cmp	r3, #0
 800634e:	d002      	beq.n	8006356 <UART_SetConfig+0x182>
 8006350:	2b10      	cmp	r3, #16
 8006352:	d008      	beq.n	8006366 <UART_SetConfig+0x192>
 8006354:	e00f      	b.n	8006376 <UART_SetConfig+0x1a2>
 8006356:	2300      	movs	r3, #0
 8006358:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800635c:	e0ad      	b.n	80064ba <UART_SetConfig+0x2e6>
 800635e:	2302      	movs	r3, #2
 8006360:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006364:	e0a9      	b.n	80064ba <UART_SetConfig+0x2e6>
 8006366:	2304      	movs	r3, #4
 8006368:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800636c:	e0a5      	b.n	80064ba <UART_SetConfig+0x2e6>
 800636e:	2308      	movs	r3, #8
 8006370:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006374:	e0a1      	b.n	80064ba <UART_SetConfig+0x2e6>
 8006376:	2310      	movs	r3, #16
 8006378:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800637c:	e09d      	b.n	80064ba <UART_SetConfig+0x2e6>
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a4a      	ldr	r2, [pc, #296]	; (80064ac <UART_SetConfig+0x2d8>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d125      	bne.n	80063d4 <UART_SetConfig+0x200>
 8006388:	4b45      	ldr	r3, [pc, #276]	; (80064a0 <UART_SetConfig+0x2cc>)
 800638a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800638e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006392:	2bc0      	cmp	r3, #192	; 0xc0
 8006394:	d016      	beq.n	80063c4 <UART_SetConfig+0x1f0>
 8006396:	2bc0      	cmp	r3, #192	; 0xc0
 8006398:	d818      	bhi.n	80063cc <UART_SetConfig+0x1f8>
 800639a:	2b80      	cmp	r3, #128	; 0x80
 800639c:	d00a      	beq.n	80063b4 <UART_SetConfig+0x1e0>
 800639e:	2b80      	cmp	r3, #128	; 0x80
 80063a0:	d814      	bhi.n	80063cc <UART_SetConfig+0x1f8>
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d002      	beq.n	80063ac <UART_SetConfig+0x1d8>
 80063a6:	2b40      	cmp	r3, #64	; 0x40
 80063a8:	d008      	beq.n	80063bc <UART_SetConfig+0x1e8>
 80063aa:	e00f      	b.n	80063cc <UART_SetConfig+0x1f8>
 80063ac:	2300      	movs	r3, #0
 80063ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063b2:	e082      	b.n	80064ba <UART_SetConfig+0x2e6>
 80063b4:	2302      	movs	r3, #2
 80063b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063ba:	e07e      	b.n	80064ba <UART_SetConfig+0x2e6>
 80063bc:	2304      	movs	r3, #4
 80063be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063c2:	e07a      	b.n	80064ba <UART_SetConfig+0x2e6>
 80063c4:	2308      	movs	r3, #8
 80063c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063ca:	e076      	b.n	80064ba <UART_SetConfig+0x2e6>
 80063cc:	2310      	movs	r3, #16
 80063ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063d2:	e072      	b.n	80064ba <UART_SetConfig+0x2e6>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a35      	ldr	r2, [pc, #212]	; (80064b0 <UART_SetConfig+0x2dc>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d12a      	bne.n	8006434 <UART_SetConfig+0x260>
 80063de:	4b30      	ldr	r3, [pc, #192]	; (80064a0 <UART_SetConfig+0x2cc>)
 80063e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063ec:	d01a      	beq.n	8006424 <UART_SetConfig+0x250>
 80063ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063f2:	d81b      	bhi.n	800642c <UART_SetConfig+0x258>
 80063f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063f8:	d00c      	beq.n	8006414 <UART_SetConfig+0x240>
 80063fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063fe:	d815      	bhi.n	800642c <UART_SetConfig+0x258>
 8006400:	2b00      	cmp	r3, #0
 8006402:	d003      	beq.n	800640c <UART_SetConfig+0x238>
 8006404:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006408:	d008      	beq.n	800641c <UART_SetConfig+0x248>
 800640a:	e00f      	b.n	800642c <UART_SetConfig+0x258>
 800640c:	2300      	movs	r3, #0
 800640e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006412:	e052      	b.n	80064ba <UART_SetConfig+0x2e6>
 8006414:	2302      	movs	r3, #2
 8006416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800641a:	e04e      	b.n	80064ba <UART_SetConfig+0x2e6>
 800641c:	2304      	movs	r3, #4
 800641e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006422:	e04a      	b.n	80064ba <UART_SetConfig+0x2e6>
 8006424:	2308      	movs	r3, #8
 8006426:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800642a:	e046      	b.n	80064ba <UART_SetConfig+0x2e6>
 800642c:	2310      	movs	r3, #16
 800642e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006432:	e042      	b.n	80064ba <UART_SetConfig+0x2e6>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a17      	ldr	r2, [pc, #92]	; (8006498 <UART_SetConfig+0x2c4>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d13a      	bne.n	80064b4 <UART_SetConfig+0x2e0>
 800643e:	4b18      	ldr	r3, [pc, #96]	; (80064a0 <UART_SetConfig+0x2cc>)
 8006440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006444:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006448:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800644c:	d01a      	beq.n	8006484 <UART_SetConfig+0x2b0>
 800644e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006452:	d81b      	bhi.n	800648c <UART_SetConfig+0x2b8>
 8006454:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006458:	d00c      	beq.n	8006474 <UART_SetConfig+0x2a0>
 800645a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800645e:	d815      	bhi.n	800648c <UART_SetConfig+0x2b8>
 8006460:	2b00      	cmp	r3, #0
 8006462:	d003      	beq.n	800646c <UART_SetConfig+0x298>
 8006464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006468:	d008      	beq.n	800647c <UART_SetConfig+0x2a8>
 800646a:	e00f      	b.n	800648c <UART_SetConfig+0x2b8>
 800646c:	2300      	movs	r3, #0
 800646e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006472:	e022      	b.n	80064ba <UART_SetConfig+0x2e6>
 8006474:	2302      	movs	r3, #2
 8006476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800647a:	e01e      	b.n	80064ba <UART_SetConfig+0x2e6>
 800647c:	2304      	movs	r3, #4
 800647e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006482:	e01a      	b.n	80064ba <UART_SetConfig+0x2e6>
 8006484:	2308      	movs	r3, #8
 8006486:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800648a:	e016      	b.n	80064ba <UART_SetConfig+0x2e6>
 800648c:	2310      	movs	r3, #16
 800648e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006492:	e012      	b.n	80064ba <UART_SetConfig+0x2e6>
 8006494:	efff69f3 	.word	0xefff69f3
 8006498:	40008000 	.word	0x40008000
 800649c:	40013800 	.word	0x40013800
 80064a0:	40021000 	.word	0x40021000
 80064a4:	40004400 	.word	0x40004400
 80064a8:	40004800 	.word	0x40004800
 80064ac:	40004c00 	.word	0x40004c00
 80064b0:	40005000 	.word	0x40005000
 80064b4:	2310      	movs	r3, #16
 80064b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a9f      	ldr	r2, [pc, #636]	; (800673c <UART_SetConfig+0x568>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d17a      	bne.n	80065ba <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80064c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80064c8:	2b08      	cmp	r3, #8
 80064ca:	d824      	bhi.n	8006516 <UART_SetConfig+0x342>
 80064cc:	a201      	add	r2, pc, #4	; (adr r2, 80064d4 <UART_SetConfig+0x300>)
 80064ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d2:	bf00      	nop
 80064d4:	080064f9 	.word	0x080064f9
 80064d8:	08006517 	.word	0x08006517
 80064dc:	08006501 	.word	0x08006501
 80064e0:	08006517 	.word	0x08006517
 80064e4:	08006507 	.word	0x08006507
 80064e8:	08006517 	.word	0x08006517
 80064ec:	08006517 	.word	0x08006517
 80064f0:	08006517 	.word	0x08006517
 80064f4:	0800650f 	.word	0x0800650f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064f8:	f7fe fe2c 	bl	8005154 <HAL_RCC_GetPCLK1Freq>
 80064fc:	61f8      	str	r0, [r7, #28]
        break;
 80064fe:	e010      	b.n	8006522 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006500:	4b8f      	ldr	r3, [pc, #572]	; (8006740 <UART_SetConfig+0x56c>)
 8006502:	61fb      	str	r3, [r7, #28]
        break;
 8006504:	e00d      	b.n	8006522 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006506:	f7fe fd8d 	bl	8005024 <HAL_RCC_GetSysClockFreq>
 800650a:	61f8      	str	r0, [r7, #28]
        break;
 800650c:	e009      	b.n	8006522 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800650e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006512:	61fb      	str	r3, [r7, #28]
        break;
 8006514:	e005      	b.n	8006522 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006516:	2300      	movs	r3, #0
 8006518:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006520:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	2b00      	cmp	r3, #0
 8006526:	f000 80fb 	beq.w	8006720 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	685a      	ldr	r2, [r3, #4]
 800652e:	4613      	mov	r3, r2
 8006530:	005b      	lsls	r3, r3, #1
 8006532:	4413      	add	r3, r2
 8006534:	69fa      	ldr	r2, [r7, #28]
 8006536:	429a      	cmp	r2, r3
 8006538:	d305      	bcc.n	8006546 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006540:	69fa      	ldr	r2, [r7, #28]
 8006542:	429a      	cmp	r2, r3
 8006544:	d903      	bls.n	800654e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800654c:	e0e8      	b.n	8006720 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	2200      	movs	r2, #0
 8006552:	461c      	mov	r4, r3
 8006554:	4615      	mov	r5, r2
 8006556:	f04f 0200 	mov.w	r2, #0
 800655a:	f04f 0300 	mov.w	r3, #0
 800655e:	022b      	lsls	r3, r5, #8
 8006560:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006564:	0222      	lsls	r2, r4, #8
 8006566:	68f9      	ldr	r1, [r7, #12]
 8006568:	6849      	ldr	r1, [r1, #4]
 800656a:	0849      	lsrs	r1, r1, #1
 800656c:	2000      	movs	r0, #0
 800656e:	4688      	mov	r8, r1
 8006570:	4681      	mov	r9, r0
 8006572:	eb12 0a08 	adds.w	sl, r2, r8
 8006576:	eb43 0b09 	adc.w	fp, r3, r9
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	603b      	str	r3, [r7, #0]
 8006582:	607a      	str	r2, [r7, #4]
 8006584:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006588:	4650      	mov	r0, sl
 800658a:	4659      	mov	r1, fp
 800658c:	f7fa fb0c 	bl	8000ba8 <__aeabi_uldivmod>
 8006590:	4602      	mov	r2, r0
 8006592:	460b      	mov	r3, r1
 8006594:	4613      	mov	r3, r2
 8006596:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800659e:	d308      	bcc.n	80065b2 <UART_SetConfig+0x3de>
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065a6:	d204      	bcs.n	80065b2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	69ba      	ldr	r2, [r7, #24]
 80065ae:	60da      	str	r2, [r3, #12]
 80065b0:	e0b6      	b.n	8006720 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80065b8:	e0b2      	b.n	8006720 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	69db      	ldr	r3, [r3, #28]
 80065be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065c2:	d15e      	bne.n	8006682 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80065c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80065c8:	2b08      	cmp	r3, #8
 80065ca:	d828      	bhi.n	800661e <UART_SetConfig+0x44a>
 80065cc:	a201      	add	r2, pc, #4	; (adr r2, 80065d4 <UART_SetConfig+0x400>)
 80065ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d2:	bf00      	nop
 80065d4:	080065f9 	.word	0x080065f9
 80065d8:	08006601 	.word	0x08006601
 80065dc:	08006609 	.word	0x08006609
 80065e0:	0800661f 	.word	0x0800661f
 80065e4:	0800660f 	.word	0x0800660f
 80065e8:	0800661f 	.word	0x0800661f
 80065ec:	0800661f 	.word	0x0800661f
 80065f0:	0800661f 	.word	0x0800661f
 80065f4:	08006617 	.word	0x08006617
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065f8:	f7fe fdac 	bl	8005154 <HAL_RCC_GetPCLK1Freq>
 80065fc:	61f8      	str	r0, [r7, #28]
        break;
 80065fe:	e014      	b.n	800662a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006600:	f7fe fdbe 	bl	8005180 <HAL_RCC_GetPCLK2Freq>
 8006604:	61f8      	str	r0, [r7, #28]
        break;
 8006606:	e010      	b.n	800662a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006608:	4b4d      	ldr	r3, [pc, #308]	; (8006740 <UART_SetConfig+0x56c>)
 800660a:	61fb      	str	r3, [r7, #28]
        break;
 800660c:	e00d      	b.n	800662a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800660e:	f7fe fd09 	bl	8005024 <HAL_RCC_GetSysClockFreq>
 8006612:	61f8      	str	r0, [r7, #28]
        break;
 8006614:	e009      	b.n	800662a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800661a:	61fb      	str	r3, [r7, #28]
        break;
 800661c:	e005      	b.n	800662a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800661e:	2300      	movs	r3, #0
 8006620:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006628:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d077      	beq.n	8006720 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	005a      	lsls	r2, r3, #1
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	085b      	lsrs	r3, r3, #1
 800663a:	441a      	add	r2, r3
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	fbb2 f3f3 	udiv	r3, r2, r3
 8006644:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	2b0f      	cmp	r3, #15
 800664a:	d916      	bls.n	800667a <UART_SetConfig+0x4a6>
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006652:	d212      	bcs.n	800667a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	b29b      	uxth	r3, r3
 8006658:	f023 030f 	bic.w	r3, r3, #15
 800665c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	085b      	lsrs	r3, r3, #1
 8006662:	b29b      	uxth	r3, r3
 8006664:	f003 0307 	and.w	r3, r3, #7
 8006668:	b29a      	uxth	r2, r3
 800666a:	8afb      	ldrh	r3, [r7, #22]
 800666c:	4313      	orrs	r3, r2
 800666e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	8afa      	ldrh	r2, [r7, #22]
 8006676:	60da      	str	r2, [r3, #12]
 8006678:	e052      	b.n	8006720 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006680:	e04e      	b.n	8006720 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006682:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006686:	2b08      	cmp	r3, #8
 8006688:	d827      	bhi.n	80066da <UART_SetConfig+0x506>
 800668a:	a201      	add	r2, pc, #4	; (adr r2, 8006690 <UART_SetConfig+0x4bc>)
 800668c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006690:	080066b5 	.word	0x080066b5
 8006694:	080066bd 	.word	0x080066bd
 8006698:	080066c5 	.word	0x080066c5
 800669c:	080066db 	.word	0x080066db
 80066a0:	080066cb 	.word	0x080066cb
 80066a4:	080066db 	.word	0x080066db
 80066a8:	080066db 	.word	0x080066db
 80066ac:	080066db 	.word	0x080066db
 80066b0:	080066d3 	.word	0x080066d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066b4:	f7fe fd4e 	bl	8005154 <HAL_RCC_GetPCLK1Freq>
 80066b8:	61f8      	str	r0, [r7, #28]
        break;
 80066ba:	e014      	b.n	80066e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066bc:	f7fe fd60 	bl	8005180 <HAL_RCC_GetPCLK2Freq>
 80066c0:	61f8      	str	r0, [r7, #28]
        break;
 80066c2:	e010      	b.n	80066e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066c4:	4b1e      	ldr	r3, [pc, #120]	; (8006740 <UART_SetConfig+0x56c>)
 80066c6:	61fb      	str	r3, [r7, #28]
        break;
 80066c8:	e00d      	b.n	80066e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066ca:	f7fe fcab 	bl	8005024 <HAL_RCC_GetSysClockFreq>
 80066ce:	61f8      	str	r0, [r7, #28]
        break;
 80066d0:	e009      	b.n	80066e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066d6:	61fb      	str	r3, [r7, #28]
        break;
 80066d8:	e005      	b.n	80066e6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80066da:	2300      	movs	r3, #0
 80066dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80066e4:	bf00      	nop
    }

    if (pclk != 0U)
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d019      	beq.n	8006720 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	085a      	lsrs	r2, r3, #1
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	441a      	add	r2, r3
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80066fe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	2b0f      	cmp	r3, #15
 8006704:	d909      	bls.n	800671a <UART_SetConfig+0x546>
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800670c:	d205      	bcs.n	800671a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	b29a      	uxth	r2, r3
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	60da      	str	r2, [r3, #12]
 8006718:	e002      	b.n	8006720 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2200      	movs	r2, #0
 8006724:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800672c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006730:	4618      	mov	r0, r3
 8006732:	3728      	adds	r7, #40	; 0x28
 8006734:	46bd      	mov	sp, r7
 8006736:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800673a:	bf00      	nop
 800673c:	40008000 	.word	0x40008000
 8006740:	00f42400 	.word	0x00f42400

08006744 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006750:	f003 0308 	and.w	r3, r3, #8
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00a      	beq.n	800676e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	430a      	orrs	r2, r1
 800676c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006772:	f003 0301 	and.w	r3, r3, #1
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00a      	beq.n	8006790 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	430a      	orrs	r2, r1
 800678e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006794:	f003 0302 	and.w	r3, r3, #2
 8006798:	2b00      	cmp	r3, #0
 800679a:	d00a      	beq.n	80067b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	430a      	orrs	r2, r1
 80067b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b6:	f003 0304 	and.w	r3, r3, #4
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00a      	beq.n	80067d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	430a      	orrs	r2, r1
 80067d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d8:	f003 0310 	and.w	r3, r3, #16
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d00a      	beq.n	80067f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	430a      	orrs	r2, r1
 80067f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fa:	f003 0320 	and.w	r3, r3, #32
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00a      	beq.n	8006818 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	430a      	orrs	r2, r1
 8006816:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006820:	2b00      	cmp	r3, #0
 8006822:	d01a      	beq.n	800685a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	430a      	orrs	r2, r1
 8006838:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006842:	d10a      	bne.n	800685a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	430a      	orrs	r2, r1
 8006858:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006862:	2b00      	cmp	r3, #0
 8006864:	d00a      	beq.n	800687c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	430a      	orrs	r2, r1
 800687a:	605a      	str	r2, [r3, #4]
  }
}
 800687c:	bf00      	nop
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b098      	sub	sp, #96	; 0x60
 800688c:	af02      	add	r7, sp, #8
 800688e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006898:	f7fb fcf0 	bl	800227c <HAL_GetTick>
 800689c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0308 	and.w	r3, r3, #8
 80068a8:	2b08      	cmp	r3, #8
 80068aa:	d12e      	bne.n	800690a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068b0:	9300      	str	r3, [sp, #0]
 80068b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068b4:	2200      	movs	r2, #0
 80068b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f88c 	bl	80069d8 <UART_WaitOnFlagUntilTimeout>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d021      	beq.n	800690a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ce:	e853 3f00 	ldrex	r3, [r3]
 80068d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068da:	653b      	str	r3, [r7, #80]	; 0x50
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	461a      	mov	r2, r3
 80068e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068e4:	647b      	str	r3, [r7, #68]	; 0x44
 80068e6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80068ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068ec:	e841 2300 	strex	r3, r2, [r1]
 80068f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1e6      	bne.n	80068c6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2220      	movs	r2, #32
 80068fc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006906:	2303      	movs	r3, #3
 8006908:	e062      	b.n	80069d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 0304 	and.w	r3, r3, #4
 8006914:	2b04      	cmp	r3, #4
 8006916:	d149      	bne.n	80069ac <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006918:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800691c:	9300      	str	r3, [sp, #0]
 800691e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006920:	2200      	movs	r2, #0
 8006922:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 f856 	bl	80069d8 <UART_WaitOnFlagUntilTimeout>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d03c      	beq.n	80069ac <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693a:	e853 3f00 	ldrex	r3, [r3]
 800693e:	623b      	str	r3, [r7, #32]
   return(result);
 8006940:	6a3b      	ldr	r3, [r7, #32]
 8006942:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006946:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	461a      	mov	r2, r3
 800694e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006950:	633b      	str	r3, [r7, #48]	; 0x30
 8006952:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006954:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006956:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006958:	e841 2300 	strex	r3, r2, [r1]
 800695c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800695e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1e6      	bne.n	8006932 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	3308      	adds	r3, #8
 800696a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	e853 3f00 	ldrex	r3, [r3]
 8006972:	60fb      	str	r3, [r7, #12]
   return(result);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f023 0301 	bic.w	r3, r3, #1
 800697a:	64bb      	str	r3, [r7, #72]	; 0x48
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	3308      	adds	r3, #8
 8006982:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006984:	61fa      	str	r2, [r7, #28]
 8006986:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006988:	69b9      	ldr	r1, [r7, #24]
 800698a:	69fa      	ldr	r2, [r7, #28]
 800698c:	e841 2300 	strex	r3, r2, [r1]
 8006990:	617b      	str	r3, [r7, #20]
   return(result);
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d1e5      	bne.n	8006964 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2220      	movs	r2, #32
 800699c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069a8:	2303      	movs	r3, #3
 80069aa:	e011      	b.n	80069d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2220      	movs	r2, #32
 80069b0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2220      	movs	r2, #32
 80069b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3758      	adds	r7, #88	; 0x58
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	603b      	str	r3, [r7, #0]
 80069e4:	4613      	mov	r3, r2
 80069e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069e8:	e049      	b.n	8006a7e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069f0:	d045      	beq.n	8006a7e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069f2:	f7fb fc43 	bl	800227c <HAL_GetTick>
 80069f6:	4602      	mov	r2, r0
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	1ad3      	subs	r3, r2, r3
 80069fc:	69ba      	ldr	r2, [r7, #24]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d302      	bcc.n	8006a08 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d101      	bne.n	8006a0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a08:	2303      	movs	r3, #3
 8006a0a:	e048      	b.n	8006a9e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 0304 	and.w	r3, r3, #4
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d031      	beq.n	8006a7e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	69db      	ldr	r3, [r3, #28]
 8006a20:	f003 0308 	and.w	r3, r3, #8
 8006a24:	2b08      	cmp	r3, #8
 8006a26:	d110      	bne.n	8006a4a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2208      	movs	r2, #8
 8006a2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f000 f838 	bl	8006aa6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2208      	movs	r2, #8
 8006a3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	e029      	b.n	8006a9e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	69db      	ldr	r3, [r3, #28]
 8006a50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a58:	d111      	bne.n	8006a7e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f000 f81e 	bl	8006aa6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2220      	movs	r2, #32
 8006a6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e00f      	b.n	8006a9e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	69da      	ldr	r2, [r3, #28]
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	4013      	ands	r3, r2
 8006a88:	68ba      	ldr	r2, [r7, #8]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	bf0c      	ite	eq
 8006a8e:	2301      	moveq	r3, #1
 8006a90:	2300      	movne	r3, #0
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	461a      	mov	r2, r3
 8006a96:	79fb      	ldrb	r3, [r7, #7]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d0a6      	beq.n	80069ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006aa6:	b480      	push	{r7}
 8006aa8:	b095      	sub	sp, #84	; 0x54
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab6:	e853 3f00 	ldrex	r3, [r3]
 8006aba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006abe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	461a      	mov	r2, r3
 8006aca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006acc:	643b      	str	r3, [r7, #64]	; 0x40
 8006ace:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ad2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ad4:	e841 2300 	strex	r3, r2, [r1]
 8006ad8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d1e6      	bne.n	8006aae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	3308      	adds	r3, #8
 8006ae6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae8:	6a3b      	ldr	r3, [r7, #32]
 8006aea:	e853 3f00 	ldrex	r3, [r3]
 8006aee:	61fb      	str	r3, [r7, #28]
   return(result);
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	f023 0301 	bic.w	r3, r3, #1
 8006af6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	3308      	adds	r3, #8
 8006afe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b08:	e841 2300 	strex	r3, r2, [r1]
 8006b0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1e5      	bne.n	8006ae0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d118      	bne.n	8006b4e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	e853 3f00 	ldrex	r3, [r3]
 8006b28:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	f023 0310 	bic.w	r3, r3, #16
 8006b30:	647b      	str	r3, [r7, #68]	; 0x44
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	461a      	mov	r2, r3
 8006b38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b3a:	61bb      	str	r3, [r7, #24]
 8006b3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3e:	6979      	ldr	r1, [r7, #20]
 8006b40:	69ba      	ldr	r2, [r7, #24]
 8006b42:	e841 2300 	strex	r3, r2, [r1]
 8006b46:	613b      	str	r3, [r7, #16]
   return(result);
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d1e6      	bne.n	8006b1c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2220      	movs	r2, #32
 8006b52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006b62:	bf00      	nop
 8006b64:	3754      	adds	r7, #84	; 0x54
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr

08006b6e <__cvt>:
 8006b6e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b72:	ec55 4b10 	vmov	r4, r5, d0
 8006b76:	2d00      	cmp	r5, #0
 8006b78:	460e      	mov	r6, r1
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	462b      	mov	r3, r5
 8006b7e:	bfbb      	ittet	lt
 8006b80:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006b84:	461d      	movlt	r5, r3
 8006b86:	2300      	movge	r3, #0
 8006b88:	232d      	movlt	r3, #45	; 0x2d
 8006b8a:	700b      	strb	r3, [r1, #0]
 8006b8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b8e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006b92:	4691      	mov	r9, r2
 8006b94:	f023 0820 	bic.w	r8, r3, #32
 8006b98:	bfbc      	itt	lt
 8006b9a:	4622      	movlt	r2, r4
 8006b9c:	4614      	movlt	r4, r2
 8006b9e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006ba2:	d005      	beq.n	8006bb0 <__cvt+0x42>
 8006ba4:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006ba8:	d100      	bne.n	8006bac <__cvt+0x3e>
 8006baa:	3601      	adds	r6, #1
 8006bac:	2102      	movs	r1, #2
 8006bae:	e000      	b.n	8006bb2 <__cvt+0x44>
 8006bb0:	2103      	movs	r1, #3
 8006bb2:	ab03      	add	r3, sp, #12
 8006bb4:	9301      	str	r3, [sp, #4]
 8006bb6:	ab02      	add	r3, sp, #8
 8006bb8:	9300      	str	r3, [sp, #0]
 8006bba:	ec45 4b10 	vmov	d0, r4, r5
 8006bbe:	4653      	mov	r3, sl
 8006bc0:	4632      	mov	r2, r6
 8006bc2:	f000 fdd1 	bl	8007768 <_dtoa_r>
 8006bc6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006bca:	4607      	mov	r7, r0
 8006bcc:	d102      	bne.n	8006bd4 <__cvt+0x66>
 8006bce:	f019 0f01 	tst.w	r9, #1
 8006bd2:	d022      	beq.n	8006c1a <__cvt+0xac>
 8006bd4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006bd8:	eb07 0906 	add.w	r9, r7, r6
 8006bdc:	d110      	bne.n	8006c00 <__cvt+0x92>
 8006bde:	783b      	ldrb	r3, [r7, #0]
 8006be0:	2b30      	cmp	r3, #48	; 0x30
 8006be2:	d10a      	bne.n	8006bfa <__cvt+0x8c>
 8006be4:	2200      	movs	r2, #0
 8006be6:	2300      	movs	r3, #0
 8006be8:	4620      	mov	r0, r4
 8006bea:	4629      	mov	r1, r5
 8006bec:	f7f9 ff6c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006bf0:	b918      	cbnz	r0, 8006bfa <__cvt+0x8c>
 8006bf2:	f1c6 0601 	rsb	r6, r6, #1
 8006bf6:	f8ca 6000 	str.w	r6, [sl]
 8006bfa:	f8da 3000 	ldr.w	r3, [sl]
 8006bfe:	4499      	add	r9, r3
 8006c00:	2200      	movs	r2, #0
 8006c02:	2300      	movs	r3, #0
 8006c04:	4620      	mov	r0, r4
 8006c06:	4629      	mov	r1, r5
 8006c08:	f7f9 ff5e 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c0c:	b108      	cbz	r0, 8006c12 <__cvt+0xa4>
 8006c0e:	f8cd 900c 	str.w	r9, [sp, #12]
 8006c12:	2230      	movs	r2, #48	; 0x30
 8006c14:	9b03      	ldr	r3, [sp, #12]
 8006c16:	454b      	cmp	r3, r9
 8006c18:	d307      	bcc.n	8006c2a <__cvt+0xbc>
 8006c1a:	9b03      	ldr	r3, [sp, #12]
 8006c1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c1e:	1bdb      	subs	r3, r3, r7
 8006c20:	4638      	mov	r0, r7
 8006c22:	6013      	str	r3, [r2, #0]
 8006c24:	b004      	add	sp, #16
 8006c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c2a:	1c59      	adds	r1, r3, #1
 8006c2c:	9103      	str	r1, [sp, #12]
 8006c2e:	701a      	strb	r2, [r3, #0]
 8006c30:	e7f0      	b.n	8006c14 <__cvt+0xa6>

08006c32 <__exponent>:
 8006c32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c34:	4603      	mov	r3, r0
 8006c36:	2900      	cmp	r1, #0
 8006c38:	bfb8      	it	lt
 8006c3a:	4249      	neglt	r1, r1
 8006c3c:	f803 2b02 	strb.w	r2, [r3], #2
 8006c40:	bfb4      	ite	lt
 8006c42:	222d      	movlt	r2, #45	; 0x2d
 8006c44:	222b      	movge	r2, #43	; 0x2b
 8006c46:	2909      	cmp	r1, #9
 8006c48:	7042      	strb	r2, [r0, #1]
 8006c4a:	dd2a      	ble.n	8006ca2 <__exponent+0x70>
 8006c4c:	f10d 0207 	add.w	r2, sp, #7
 8006c50:	4617      	mov	r7, r2
 8006c52:	260a      	movs	r6, #10
 8006c54:	4694      	mov	ip, r2
 8006c56:	fb91 f5f6 	sdiv	r5, r1, r6
 8006c5a:	fb06 1415 	mls	r4, r6, r5, r1
 8006c5e:	3430      	adds	r4, #48	; 0x30
 8006c60:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006c64:	460c      	mov	r4, r1
 8006c66:	2c63      	cmp	r4, #99	; 0x63
 8006c68:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8006c6c:	4629      	mov	r1, r5
 8006c6e:	dcf1      	bgt.n	8006c54 <__exponent+0x22>
 8006c70:	3130      	adds	r1, #48	; 0x30
 8006c72:	f1ac 0402 	sub.w	r4, ip, #2
 8006c76:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006c7a:	1c41      	adds	r1, r0, #1
 8006c7c:	4622      	mov	r2, r4
 8006c7e:	42ba      	cmp	r2, r7
 8006c80:	d30a      	bcc.n	8006c98 <__exponent+0x66>
 8006c82:	f10d 0209 	add.w	r2, sp, #9
 8006c86:	eba2 020c 	sub.w	r2, r2, ip
 8006c8a:	42bc      	cmp	r4, r7
 8006c8c:	bf88      	it	hi
 8006c8e:	2200      	movhi	r2, #0
 8006c90:	4413      	add	r3, r2
 8006c92:	1a18      	subs	r0, r3, r0
 8006c94:	b003      	add	sp, #12
 8006c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c98:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006c9c:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006ca0:	e7ed      	b.n	8006c7e <__exponent+0x4c>
 8006ca2:	2330      	movs	r3, #48	; 0x30
 8006ca4:	3130      	adds	r1, #48	; 0x30
 8006ca6:	7083      	strb	r3, [r0, #2]
 8006ca8:	70c1      	strb	r1, [r0, #3]
 8006caa:	1d03      	adds	r3, r0, #4
 8006cac:	e7f1      	b.n	8006c92 <__exponent+0x60>
	...

08006cb0 <_printf_float>:
 8006cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cb4:	ed2d 8b02 	vpush	{d8}
 8006cb8:	b08d      	sub	sp, #52	; 0x34
 8006cba:	460c      	mov	r4, r1
 8006cbc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006cc0:	4616      	mov	r6, r2
 8006cc2:	461f      	mov	r7, r3
 8006cc4:	4605      	mov	r5, r0
 8006cc6:	f000 fc95 	bl	80075f4 <_localeconv_r>
 8006cca:	f8d0 a000 	ldr.w	sl, [r0]
 8006cce:	4650      	mov	r0, sl
 8006cd0:	f7f9 face 	bl	8000270 <strlen>
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	930a      	str	r3, [sp, #40]	; 0x28
 8006cd8:	6823      	ldr	r3, [r4, #0]
 8006cda:	9305      	str	r3, [sp, #20]
 8006cdc:	f8d8 3000 	ldr.w	r3, [r8]
 8006ce0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006ce4:	3307      	adds	r3, #7
 8006ce6:	f023 0307 	bic.w	r3, r3, #7
 8006cea:	f103 0208 	add.w	r2, r3, #8
 8006cee:	f8c8 2000 	str.w	r2, [r8]
 8006cf2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006cf6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006cfa:	9307      	str	r3, [sp, #28]
 8006cfc:	f8cd 8018 	str.w	r8, [sp, #24]
 8006d00:	ee08 0a10 	vmov	s16, r0
 8006d04:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006d08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d0c:	4b9e      	ldr	r3, [pc, #632]	; (8006f88 <_printf_float+0x2d8>)
 8006d0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d12:	f7f9 ff0b 	bl	8000b2c <__aeabi_dcmpun>
 8006d16:	bb88      	cbnz	r0, 8006d7c <_printf_float+0xcc>
 8006d18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d1c:	4b9a      	ldr	r3, [pc, #616]	; (8006f88 <_printf_float+0x2d8>)
 8006d1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d22:	f7f9 fee5 	bl	8000af0 <__aeabi_dcmple>
 8006d26:	bb48      	cbnz	r0, 8006d7c <_printf_float+0xcc>
 8006d28:	2200      	movs	r2, #0
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	4640      	mov	r0, r8
 8006d2e:	4649      	mov	r1, r9
 8006d30:	f7f9 fed4 	bl	8000adc <__aeabi_dcmplt>
 8006d34:	b110      	cbz	r0, 8006d3c <_printf_float+0x8c>
 8006d36:	232d      	movs	r3, #45	; 0x2d
 8006d38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d3c:	4a93      	ldr	r2, [pc, #588]	; (8006f8c <_printf_float+0x2dc>)
 8006d3e:	4b94      	ldr	r3, [pc, #592]	; (8006f90 <_printf_float+0x2e0>)
 8006d40:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006d44:	bf94      	ite	ls
 8006d46:	4690      	movls	r8, r2
 8006d48:	4698      	movhi	r8, r3
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	6123      	str	r3, [r4, #16]
 8006d4e:	9b05      	ldr	r3, [sp, #20]
 8006d50:	f023 0304 	bic.w	r3, r3, #4
 8006d54:	6023      	str	r3, [r4, #0]
 8006d56:	f04f 0900 	mov.w	r9, #0
 8006d5a:	9700      	str	r7, [sp, #0]
 8006d5c:	4633      	mov	r3, r6
 8006d5e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006d60:	4621      	mov	r1, r4
 8006d62:	4628      	mov	r0, r5
 8006d64:	f000 f9da 	bl	800711c <_printf_common>
 8006d68:	3001      	adds	r0, #1
 8006d6a:	f040 8090 	bne.w	8006e8e <_printf_float+0x1de>
 8006d6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d72:	b00d      	add	sp, #52	; 0x34
 8006d74:	ecbd 8b02 	vpop	{d8}
 8006d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d7c:	4642      	mov	r2, r8
 8006d7e:	464b      	mov	r3, r9
 8006d80:	4640      	mov	r0, r8
 8006d82:	4649      	mov	r1, r9
 8006d84:	f7f9 fed2 	bl	8000b2c <__aeabi_dcmpun>
 8006d88:	b140      	cbz	r0, 8006d9c <_printf_float+0xec>
 8006d8a:	464b      	mov	r3, r9
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	bfbc      	itt	lt
 8006d90:	232d      	movlt	r3, #45	; 0x2d
 8006d92:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006d96:	4a7f      	ldr	r2, [pc, #508]	; (8006f94 <_printf_float+0x2e4>)
 8006d98:	4b7f      	ldr	r3, [pc, #508]	; (8006f98 <_printf_float+0x2e8>)
 8006d9a:	e7d1      	b.n	8006d40 <_printf_float+0x90>
 8006d9c:	6863      	ldr	r3, [r4, #4]
 8006d9e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006da2:	9206      	str	r2, [sp, #24]
 8006da4:	1c5a      	adds	r2, r3, #1
 8006da6:	d13f      	bne.n	8006e28 <_printf_float+0x178>
 8006da8:	2306      	movs	r3, #6
 8006daa:	6063      	str	r3, [r4, #4]
 8006dac:	9b05      	ldr	r3, [sp, #20]
 8006dae:	6861      	ldr	r1, [r4, #4]
 8006db0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006db4:	2300      	movs	r3, #0
 8006db6:	9303      	str	r3, [sp, #12]
 8006db8:	ab0a      	add	r3, sp, #40	; 0x28
 8006dba:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006dbe:	ab09      	add	r3, sp, #36	; 0x24
 8006dc0:	ec49 8b10 	vmov	d0, r8, r9
 8006dc4:	9300      	str	r3, [sp, #0]
 8006dc6:	6022      	str	r2, [r4, #0]
 8006dc8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006dcc:	4628      	mov	r0, r5
 8006dce:	f7ff fece 	bl	8006b6e <__cvt>
 8006dd2:	9b06      	ldr	r3, [sp, #24]
 8006dd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006dd6:	2b47      	cmp	r3, #71	; 0x47
 8006dd8:	4680      	mov	r8, r0
 8006dda:	d108      	bne.n	8006dee <_printf_float+0x13e>
 8006ddc:	1cc8      	adds	r0, r1, #3
 8006dde:	db02      	blt.n	8006de6 <_printf_float+0x136>
 8006de0:	6863      	ldr	r3, [r4, #4]
 8006de2:	4299      	cmp	r1, r3
 8006de4:	dd41      	ble.n	8006e6a <_printf_float+0x1ba>
 8006de6:	f1ab 0302 	sub.w	r3, fp, #2
 8006dea:	fa5f fb83 	uxtb.w	fp, r3
 8006dee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006df2:	d820      	bhi.n	8006e36 <_printf_float+0x186>
 8006df4:	3901      	subs	r1, #1
 8006df6:	465a      	mov	r2, fp
 8006df8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006dfc:	9109      	str	r1, [sp, #36]	; 0x24
 8006dfe:	f7ff ff18 	bl	8006c32 <__exponent>
 8006e02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e04:	1813      	adds	r3, r2, r0
 8006e06:	2a01      	cmp	r2, #1
 8006e08:	4681      	mov	r9, r0
 8006e0a:	6123      	str	r3, [r4, #16]
 8006e0c:	dc02      	bgt.n	8006e14 <_printf_float+0x164>
 8006e0e:	6822      	ldr	r2, [r4, #0]
 8006e10:	07d2      	lsls	r2, r2, #31
 8006e12:	d501      	bpl.n	8006e18 <_printf_float+0x168>
 8006e14:	3301      	adds	r3, #1
 8006e16:	6123      	str	r3, [r4, #16]
 8006e18:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d09c      	beq.n	8006d5a <_printf_float+0xaa>
 8006e20:	232d      	movs	r3, #45	; 0x2d
 8006e22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e26:	e798      	b.n	8006d5a <_printf_float+0xaa>
 8006e28:	9a06      	ldr	r2, [sp, #24]
 8006e2a:	2a47      	cmp	r2, #71	; 0x47
 8006e2c:	d1be      	bne.n	8006dac <_printf_float+0xfc>
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d1bc      	bne.n	8006dac <_printf_float+0xfc>
 8006e32:	2301      	movs	r3, #1
 8006e34:	e7b9      	b.n	8006daa <_printf_float+0xfa>
 8006e36:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006e3a:	d118      	bne.n	8006e6e <_printf_float+0x1be>
 8006e3c:	2900      	cmp	r1, #0
 8006e3e:	6863      	ldr	r3, [r4, #4]
 8006e40:	dd0b      	ble.n	8006e5a <_printf_float+0x1aa>
 8006e42:	6121      	str	r1, [r4, #16]
 8006e44:	b913      	cbnz	r3, 8006e4c <_printf_float+0x19c>
 8006e46:	6822      	ldr	r2, [r4, #0]
 8006e48:	07d0      	lsls	r0, r2, #31
 8006e4a:	d502      	bpl.n	8006e52 <_printf_float+0x1a2>
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	440b      	add	r3, r1
 8006e50:	6123      	str	r3, [r4, #16]
 8006e52:	65a1      	str	r1, [r4, #88]	; 0x58
 8006e54:	f04f 0900 	mov.w	r9, #0
 8006e58:	e7de      	b.n	8006e18 <_printf_float+0x168>
 8006e5a:	b913      	cbnz	r3, 8006e62 <_printf_float+0x1b2>
 8006e5c:	6822      	ldr	r2, [r4, #0]
 8006e5e:	07d2      	lsls	r2, r2, #31
 8006e60:	d501      	bpl.n	8006e66 <_printf_float+0x1b6>
 8006e62:	3302      	adds	r3, #2
 8006e64:	e7f4      	b.n	8006e50 <_printf_float+0x1a0>
 8006e66:	2301      	movs	r3, #1
 8006e68:	e7f2      	b.n	8006e50 <_printf_float+0x1a0>
 8006e6a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006e6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e70:	4299      	cmp	r1, r3
 8006e72:	db05      	blt.n	8006e80 <_printf_float+0x1d0>
 8006e74:	6823      	ldr	r3, [r4, #0]
 8006e76:	6121      	str	r1, [r4, #16]
 8006e78:	07d8      	lsls	r0, r3, #31
 8006e7a:	d5ea      	bpl.n	8006e52 <_printf_float+0x1a2>
 8006e7c:	1c4b      	adds	r3, r1, #1
 8006e7e:	e7e7      	b.n	8006e50 <_printf_float+0x1a0>
 8006e80:	2900      	cmp	r1, #0
 8006e82:	bfd4      	ite	le
 8006e84:	f1c1 0202 	rsble	r2, r1, #2
 8006e88:	2201      	movgt	r2, #1
 8006e8a:	4413      	add	r3, r2
 8006e8c:	e7e0      	b.n	8006e50 <_printf_float+0x1a0>
 8006e8e:	6823      	ldr	r3, [r4, #0]
 8006e90:	055a      	lsls	r2, r3, #21
 8006e92:	d407      	bmi.n	8006ea4 <_printf_float+0x1f4>
 8006e94:	6923      	ldr	r3, [r4, #16]
 8006e96:	4642      	mov	r2, r8
 8006e98:	4631      	mov	r1, r6
 8006e9a:	4628      	mov	r0, r5
 8006e9c:	47b8      	blx	r7
 8006e9e:	3001      	adds	r0, #1
 8006ea0:	d12c      	bne.n	8006efc <_printf_float+0x24c>
 8006ea2:	e764      	b.n	8006d6e <_printf_float+0xbe>
 8006ea4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006ea8:	f240 80e0 	bls.w	800706c <_printf_float+0x3bc>
 8006eac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	f7f9 fe08 	bl	8000ac8 <__aeabi_dcmpeq>
 8006eb8:	2800      	cmp	r0, #0
 8006eba:	d034      	beq.n	8006f26 <_printf_float+0x276>
 8006ebc:	4a37      	ldr	r2, [pc, #220]	; (8006f9c <_printf_float+0x2ec>)
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	4631      	mov	r1, r6
 8006ec2:	4628      	mov	r0, r5
 8006ec4:	47b8      	blx	r7
 8006ec6:	3001      	adds	r0, #1
 8006ec8:	f43f af51 	beq.w	8006d6e <_printf_float+0xbe>
 8006ecc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	db02      	blt.n	8006eda <_printf_float+0x22a>
 8006ed4:	6823      	ldr	r3, [r4, #0]
 8006ed6:	07d8      	lsls	r0, r3, #31
 8006ed8:	d510      	bpl.n	8006efc <_printf_float+0x24c>
 8006eda:	ee18 3a10 	vmov	r3, s16
 8006ede:	4652      	mov	r2, sl
 8006ee0:	4631      	mov	r1, r6
 8006ee2:	4628      	mov	r0, r5
 8006ee4:	47b8      	blx	r7
 8006ee6:	3001      	adds	r0, #1
 8006ee8:	f43f af41 	beq.w	8006d6e <_printf_float+0xbe>
 8006eec:	f04f 0800 	mov.w	r8, #0
 8006ef0:	f104 091a 	add.w	r9, r4, #26
 8006ef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	4543      	cmp	r3, r8
 8006efa:	dc09      	bgt.n	8006f10 <_printf_float+0x260>
 8006efc:	6823      	ldr	r3, [r4, #0]
 8006efe:	079b      	lsls	r3, r3, #30
 8006f00:	f100 8107 	bmi.w	8007112 <_printf_float+0x462>
 8006f04:	68e0      	ldr	r0, [r4, #12]
 8006f06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f08:	4298      	cmp	r0, r3
 8006f0a:	bfb8      	it	lt
 8006f0c:	4618      	movlt	r0, r3
 8006f0e:	e730      	b.n	8006d72 <_printf_float+0xc2>
 8006f10:	2301      	movs	r3, #1
 8006f12:	464a      	mov	r2, r9
 8006f14:	4631      	mov	r1, r6
 8006f16:	4628      	mov	r0, r5
 8006f18:	47b8      	blx	r7
 8006f1a:	3001      	adds	r0, #1
 8006f1c:	f43f af27 	beq.w	8006d6e <_printf_float+0xbe>
 8006f20:	f108 0801 	add.w	r8, r8, #1
 8006f24:	e7e6      	b.n	8006ef4 <_printf_float+0x244>
 8006f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	dc39      	bgt.n	8006fa0 <_printf_float+0x2f0>
 8006f2c:	4a1b      	ldr	r2, [pc, #108]	; (8006f9c <_printf_float+0x2ec>)
 8006f2e:	2301      	movs	r3, #1
 8006f30:	4631      	mov	r1, r6
 8006f32:	4628      	mov	r0, r5
 8006f34:	47b8      	blx	r7
 8006f36:	3001      	adds	r0, #1
 8006f38:	f43f af19 	beq.w	8006d6e <_printf_float+0xbe>
 8006f3c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006f40:	4313      	orrs	r3, r2
 8006f42:	d102      	bne.n	8006f4a <_printf_float+0x29a>
 8006f44:	6823      	ldr	r3, [r4, #0]
 8006f46:	07d9      	lsls	r1, r3, #31
 8006f48:	d5d8      	bpl.n	8006efc <_printf_float+0x24c>
 8006f4a:	ee18 3a10 	vmov	r3, s16
 8006f4e:	4652      	mov	r2, sl
 8006f50:	4631      	mov	r1, r6
 8006f52:	4628      	mov	r0, r5
 8006f54:	47b8      	blx	r7
 8006f56:	3001      	adds	r0, #1
 8006f58:	f43f af09 	beq.w	8006d6e <_printf_float+0xbe>
 8006f5c:	f04f 0900 	mov.w	r9, #0
 8006f60:	f104 0a1a 	add.w	sl, r4, #26
 8006f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f66:	425b      	negs	r3, r3
 8006f68:	454b      	cmp	r3, r9
 8006f6a:	dc01      	bgt.n	8006f70 <_printf_float+0x2c0>
 8006f6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f6e:	e792      	b.n	8006e96 <_printf_float+0x1e6>
 8006f70:	2301      	movs	r3, #1
 8006f72:	4652      	mov	r2, sl
 8006f74:	4631      	mov	r1, r6
 8006f76:	4628      	mov	r0, r5
 8006f78:	47b8      	blx	r7
 8006f7a:	3001      	adds	r0, #1
 8006f7c:	f43f aef7 	beq.w	8006d6e <_printf_float+0xbe>
 8006f80:	f109 0901 	add.w	r9, r9, #1
 8006f84:	e7ee      	b.n	8006f64 <_printf_float+0x2b4>
 8006f86:	bf00      	nop
 8006f88:	7fefffff 	.word	0x7fefffff
 8006f8c:	080098d8 	.word	0x080098d8
 8006f90:	080098dc 	.word	0x080098dc
 8006f94:	080098e0 	.word	0x080098e0
 8006f98:	080098e4 	.word	0x080098e4
 8006f9c:	080098e8 	.word	0x080098e8
 8006fa0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fa2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	bfa8      	it	ge
 8006fa8:	461a      	movge	r2, r3
 8006faa:	2a00      	cmp	r2, #0
 8006fac:	4691      	mov	r9, r2
 8006fae:	dc37      	bgt.n	8007020 <_printf_float+0x370>
 8006fb0:	f04f 0b00 	mov.w	fp, #0
 8006fb4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006fb8:	f104 021a 	add.w	r2, r4, #26
 8006fbc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006fbe:	9305      	str	r3, [sp, #20]
 8006fc0:	eba3 0309 	sub.w	r3, r3, r9
 8006fc4:	455b      	cmp	r3, fp
 8006fc6:	dc33      	bgt.n	8007030 <_printf_float+0x380>
 8006fc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	db3b      	blt.n	8007048 <_printf_float+0x398>
 8006fd0:	6823      	ldr	r3, [r4, #0]
 8006fd2:	07da      	lsls	r2, r3, #31
 8006fd4:	d438      	bmi.n	8007048 <_printf_float+0x398>
 8006fd6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006fda:	eba2 0903 	sub.w	r9, r2, r3
 8006fde:	9b05      	ldr	r3, [sp, #20]
 8006fe0:	1ad2      	subs	r2, r2, r3
 8006fe2:	4591      	cmp	r9, r2
 8006fe4:	bfa8      	it	ge
 8006fe6:	4691      	movge	r9, r2
 8006fe8:	f1b9 0f00 	cmp.w	r9, #0
 8006fec:	dc35      	bgt.n	800705a <_printf_float+0x3aa>
 8006fee:	f04f 0800 	mov.w	r8, #0
 8006ff2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ff6:	f104 0a1a 	add.w	sl, r4, #26
 8006ffa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ffe:	1a9b      	subs	r3, r3, r2
 8007000:	eba3 0309 	sub.w	r3, r3, r9
 8007004:	4543      	cmp	r3, r8
 8007006:	f77f af79 	ble.w	8006efc <_printf_float+0x24c>
 800700a:	2301      	movs	r3, #1
 800700c:	4652      	mov	r2, sl
 800700e:	4631      	mov	r1, r6
 8007010:	4628      	mov	r0, r5
 8007012:	47b8      	blx	r7
 8007014:	3001      	adds	r0, #1
 8007016:	f43f aeaa 	beq.w	8006d6e <_printf_float+0xbe>
 800701a:	f108 0801 	add.w	r8, r8, #1
 800701e:	e7ec      	b.n	8006ffa <_printf_float+0x34a>
 8007020:	4613      	mov	r3, r2
 8007022:	4631      	mov	r1, r6
 8007024:	4642      	mov	r2, r8
 8007026:	4628      	mov	r0, r5
 8007028:	47b8      	blx	r7
 800702a:	3001      	adds	r0, #1
 800702c:	d1c0      	bne.n	8006fb0 <_printf_float+0x300>
 800702e:	e69e      	b.n	8006d6e <_printf_float+0xbe>
 8007030:	2301      	movs	r3, #1
 8007032:	4631      	mov	r1, r6
 8007034:	4628      	mov	r0, r5
 8007036:	9205      	str	r2, [sp, #20]
 8007038:	47b8      	blx	r7
 800703a:	3001      	adds	r0, #1
 800703c:	f43f ae97 	beq.w	8006d6e <_printf_float+0xbe>
 8007040:	9a05      	ldr	r2, [sp, #20]
 8007042:	f10b 0b01 	add.w	fp, fp, #1
 8007046:	e7b9      	b.n	8006fbc <_printf_float+0x30c>
 8007048:	ee18 3a10 	vmov	r3, s16
 800704c:	4652      	mov	r2, sl
 800704e:	4631      	mov	r1, r6
 8007050:	4628      	mov	r0, r5
 8007052:	47b8      	blx	r7
 8007054:	3001      	adds	r0, #1
 8007056:	d1be      	bne.n	8006fd6 <_printf_float+0x326>
 8007058:	e689      	b.n	8006d6e <_printf_float+0xbe>
 800705a:	9a05      	ldr	r2, [sp, #20]
 800705c:	464b      	mov	r3, r9
 800705e:	4442      	add	r2, r8
 8007060:	4631      	mov	r1, r6
 8007062:	4628      	mov	r0, r5
 8007064:	47b8      	blx	r7
 8007066:	3001      	adds	r0, #1
 8007068:	d1c1      	bne.n	8006fee <_printf_float+0x33e>
 800706a:	e680      	b.n	8006d6e <_printf_float+0xbe>
 800706c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800706e:	2a01      	cmp	r2, #1
 8007070:	dc01      	bgt.n	8007076 <_printf_float+0x3c6>
 8007072:	07db      	lsls	r3, r3, #31
 8007074:	d53a      	bpl.n	80070ec <_printf_float+0x43c>
 8007076:	2301      	movs	r3, #1
 8007078:	4642      	mov	r2, r8
 800707a:	4631      	mov	r1, r6
 800707c:	4628      	mov	r0, r5
 800707e:	47b8      	blx	r7
 8007080:	3001      	adds	r0, #1
 8007082:	f43f ae74 	beq.w	8006d6e <_printf_float+0xbe>
 8007086:	ee18 3a10 	vmov	r3, s16
 800708a:	4652      	mov	r2, sl
 800708c:	4631      	mov	r1, r6
 800708e:	4628      	mov	r0, r5
 8007090:	47b8      	blx	r7
 8007092:	3001      	adds	r0, #1
 8007094:	f43f ae6b 	beq.w	8006d6e <_printf_float+0xbe>
 8007098:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800709c:	2200      	movs	r2, #0
 800709e:	2300      	movs	r3, #0
 80070a0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80070a4:	f7f9 fd10 	bl	8000ac8 <__aeabi_dcmpeq>
 80070a8:	b9d8      	cbnz	r0, 80070e2 <_printf_float+0x432>
 80070aa:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80070ae:	f108 0201 	add.w	r2, r8, #1
 80070b2:	4631      	mov	r1, r6
 80070b4:	4628      	mov	r0, r5
 80070b6:	47b8      	blx	r7
 80070b8:	3001      	adds	r0, #1
 80070ba:	d10e      	bne.n	80070da <_printf_float+0x42a>
 80070bc:	e657      	b.n	8006d6e <_printf_float+0xbe>
 80070be:	2301      	movs	r3, #1
 80070c0:	4652      	mov	r2, sl
 80070c2:	4631      	mov	r1, r6
 80070c4:	4628      	mov	r0, r5
 80070c6:	47b8      	blx	r7
 80070c8:	3001      	adds	r0, #1
 80070ca:	f43f ae50 	beq.w	8006d6e <_printf_float+0xbe>
 80070ce:	f108 0801 	add.w	r8, r8, #1
 80070d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070d4:	3b01      	subs	r3, #1
 80070d6:	4543      	cmp	r3, r8
 80070d8:	dcf1      	bgt.n	80070be <_printf_float+0x40e>
 80070da:	464b      	mov	r3, r9
 80070dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80070e0:	e6da      	b.n	8006e98 <_printf_float+0x1e8>
 80070e2:	f04f 0800 	mov.w	r8, #0
 80070e6:	f104 0a1a 	add.w	sl, r4, #26
 80070ea:	e7f2      	b.n	80070d2 <_printf_float+0x422>
 80070ec:	2301      	movs	r3, #1
 80070ee:	4642      	mov	r2, r8
 80070f0:	e7df      	b.n	80070b2 <_printf_float+0x402>
 80070f2:	2301      	movs	r3, #1
 80070f4:	464a      	mov	r2, r9
 80070f6:	4631      	mov	r1, r6
 80070f8:	4628      	mov	r0, r5
 80070fa:	47b8      	blx	r7
 80070fc:	3001      	adds	r0, #1
 80070fe:	f43f ae36 	beq.w	8006d6e <_printf_float+0xbe>
 8007102:	f108 0801 	add.w	r8, r8, #1
 8007106:	68e3      	ldr	r3, [r4, #12]
 8007108:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800710a:	1a5b      	subs	r3, r3, r1
 800710c:	4543      	cmp	r3, r8
 800710e:	dcf0      	bgt.n	80070f2 <_printf_float+0x442>
 8007110:	e6f8      	b.n	8006f04 <_printf_float+0x254>
 8007112:	f04f 0800 	mov.w	r8, #0
 8007116:	f104 0919 	add.w	r9, r4, #25
 800711a:	e7f4      	b.n	8007106 <_printf_float+0x456>

0800711c <_printf_common>:
 800711c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007120:	4616      	mov	r6, r2
 8007122:	4699      	mov	r9, r3
 8007124:	688a      	ldr	r2, [r1, #8]
 8007126:	690b      	ldr	r3, [r1, #16]
 8007128:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800712c:	4293      	cmp	r3, r2
 800712e:	bfb8      	it	lt
 8007130:	4613      	movlt	r3, r2
 8007132:	6033      	str	r3, [r6, #0]
 8007134:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007138:	4607      	mov	r7, r0
 800713a:	460c      	mov	r4, r1
 800713c:	b10a      	cbz	r2, 8007142 <_printf_common+0x26>
 800713e:	3301      	adds	r3, #1
 8007140:	6033      	str	r3, [r6, #0]
 8007142:	6823      	ldr	r3, [r4, #0]
 8007144:	0699      	lsls	r1, r3, #26
 8007146:	bf42      	ittt	mi
 8007148:	6833      	ldrmi	r3, [r6, #0]
 800714a:	3302      	addmi	r3, #2
 800714c:	6033      	strmi	r3, [r6, #0]
 800714e:	6825      	ldr	r5, [r4, #0]
 8007150:	f015 0506 	ands.w	r5, r5, #6
 8007154:	d106      	bne.n	8007164 <_printf_common+0x48>
 8007156:	f104 0a19 	add.w	sl, r4, #25
 800715a:	68e3      	ldr	r3, [r4, #12]
 800715c:	6832      	ldr	r2, [r6, #0]
 800715e:	1a9b      	subs	r3, r3, r2
 8007160:	42ab      	cmp	r3, r5
 8007162:	dc26      	bgt.n	80071b2 <_printf_common+0x96>
 8007164:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007168:	1e13      	subs	r3, r2, #0
 800716a:	6822      	ldr	r2, [r4, #0]
 800716c:	bf18      	it	ne
 800716e:	2301      	movne	r3, #1
 8007170:	0692      	lsls	r2, r2, #26
 8007172:	d42b      	bmi.n	80071cc <_printf_common+0xb0>
 8007174:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007178:	4649      	mov	r1, r9
 800717a:	4638      	mov	r0, r7
 800717c:	47c0      	blx	r8
 800717e:	3001      	adds	r0, #1
 8007180:	d01e      	beq.n	80071c0 <_printf_common+0xa4>
 8007182:	6823      	ldr	r3, [r4, #0]
 8007184:	6922      	ldr	r2, [r4, #16]
 8007186:	f003 0306 	and.w	r3, r3, #6
 800718a:	2b04      	cmp	r3, #4
 800718c:	bf02      	ittt	eq
 800718e:	68e5      	ldreq	r5, [r4, #12]
 8007190:	6833      	ldreq	r3, [r6, #0]
 8007192:	1aed      	subeq	r5, r5, r3
 8007194:	68a3      	ldr	r3, [r4, #8]
 8007196:	bf0c      	ite	eq
 8007198:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800719c:	2500      	movne	r5, #0
 800719e:	4293      	cmp	r3, r2
 80071a0:	bfc4      	itt	gt
 80071a2:	1a9b      	subgt	r3, r3, r2
 80071a4:	18ed      	addgt	r5, r5, r3
 80071a6:	2600      	movs	r6, #0
 80071a8:	341a      	adds	r4, #26
 80071aa:	42b5      	cmp	r5, r6
 80071ac:	d11a      	bne.n	80071e4 <_printf_common+0xc8>
 80071ae:	2000      	movs	r0, #0
 80071b0:	e008      	b.n	80071c4 <_printf_common+0xa8>
 80071b2:	2301      	movs	r3, #1
 80071b4:	4652      	mov	r2, sl
 80071b6:	4649      	mov	r1, r9
 80071b8:	4638      	mov	r0, r7
 80071ba:	47c0      	blx	r8
 80071bc:	3001      	adds	r0, #1
 80071be:	d103      	bne.n	80071c8 <_printf_common+0xac>
 80071c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071c8:	3501      	adds	r5, #1
 80071ca:	e7c6      	b.n	800715a <_printf_common+0x3e>
 80071cc:	18e1      	adds	r1, r4, r3
 80071ce:	1c5a      	adds	r2, r3, #1
 80071d0:	2030      	movs	r0, #48	; 0x30
 80071d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80071d6:	4422      	add	r2, r4
 80071d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80071dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80071e0:	3302      	adds	r3, #2
 80071e2:	e7c7      	b.n	8007174 <_printf_common+0x58>
 80071e4:	2301      	movs	r3, #1
 80071e6:	4622      	mov	r2, r4
 80071e8:	4649      	mov	r1, r9
 80071ea:	4638      	mov	r0, r7
 80071ec:	47c0      	blx	r8
 80071ee:	3001      	adds	r0, #1
 80071f0:	d0e6      	beq.n	80071c0 <_printf_common+0xa4>
 80071f2:	3601      	adds	r6, #1
 80071f4:	e7d9      	b.n	80071aa <_printf_common+0x8e>
	...

080071f8 <_printf_i>:
 80071f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071fc:	7e0f      	ldrb	r7, [r1, #24]
 80071fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007200:	2f78      	cmp	r7, #120	; 0x78
 8007202:	4691      	mov	r9, r2
 8007204:	4680      	mov	r8, r0
 8007206:	460c      	mov	r4, r1
 8007208:	469a      	mov	sl, r3
 800720a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800720e:	d807      	bhi.n	8007220 <_printf_i+0x28>
 8007210:	2f62      	cmp	r7, #98	; 0x62
 8007212:	d80a      	bhi.n	800722a <_printf_i+0x32>
 8007214:	2f00      	cmp	r7, #0
 8007216:	f000 80d4 	beq.w	80073c2 <_printf_i+0x1ca>
 800721a:	2f58      	cmp	r7, #88	; 0x58
 800721c:	f000 80c0 	beq.w	80073a0 <_printf_i+0x1a8>
 8007220:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007224:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007228:	e03a      	b.n	80072a0 <_printf_i+0xa8>
 800722a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800722e:	2b15      	cmp	r3, #21
 8007230:	d8f6      	bhi.n	8007220 <_printf_i+0x28>
 8007232:	a101      	add	r1, pc, #4	; (adr r1, 8007238 <_printf_i+0x40>)
 8007234:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007238:	08007291 	.word	0x08007291
 800723c:	080072a5 	.word	0x080072a5
 8007240:	08007221 	.word	0x08007221
 8007244:	08007221 	.word	0x08007221
 8007248:	08007221 	.word	0x08007221
 800724c:	08007221 	.word	0x08007221
 8007250:	080072a5 	.word	0x080072a5
 8007254:	08007221 	.word	0x08007221
 8007258:	08007221 	.word	0x08007221
 800725c:	08007221 	.word	0x08007221
 8007260:	08007221 	.word	0x08007221
 8007264:	080073a9 	.word	0x080073a9
 8007268:	080072d1 	.word	0x080072d1
 800726c:	08007363 	.word	0x08007363
 8007270:	08007221 	.word	0x08007221
 8007274:	08007221 	.word	0x08007221
 8007278:	080073cb 	.word	0x080073cb
 800727c:	08007221 	.word	0x08007221
 8007280:	080072d1 	.word	0x080072d1
 8007284:	08007221 	.word	0x08007221
 8007288:	08007221 	.word	0x08007221
 800728c:	0800736b 	.word	0x0800736b
 8007290:	682b      	ldr	r3, [r5, #0]
 8007292:	1d1a      	adds	r2, r3, #4
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	602a      	str	r2, [r5, #0]
 8007298:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800729c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80072a0:	2301      	movs	r3, #1
 80072a2:	e09f      	b.n	80073e4 <_printf_i+0x1ec>
 80072a4:	6820      	ldr	r0, [r4, #0]
 80072a6:	682b      	ldr	r3, [r5, #0]
 80072a8:	0607      	lsls	r7, r0, #24
 80072aa:	f103 0104 	add.w	r1, r3, #4
 80072ae:	6029      	str	r1, [r5, #0]
 80072b0:	d501      	bpl.n	80072b6 <_printf_i+0xbe>
 80072b2:	681e      	ldr	r6, [r3, #0]
 80072b4:	e003      	b.n	80072be <_printf_i+0xc6>
 80072b6:	0646      	lsls	r6, r0, #25
 80072b8:	d5fb      	bpl.n	80072b2 <_printf_i+0xba>
 80072ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 80072be:	2e00      	cmp	r6, #0
 80072c0:	da03      	bge.n	80072ca <_printf_i+0xd2>
 80072c2:	232d      	movs	r3, #45	; 0x2d
 80072c4:	4276      	negs	r6, r6
 80072c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072ca:	485a      	ldr	r0, [pc, #360]	; (8007434 <_printf_i+0x23c>)
 80072cc:	230a      	movs	r3, #10
 80072ce:	e012      	b.n	80072f6 <_printf_i+0xfe>
 80072d0:	682b      	ldr	r3, [r5, #0]
 80072d2:	6820      	ldr	r0, [r4, #0]
 80072d4:	1d19      	adds	r1, r3, #4
 80072d6:	6029      	str	r1, [r5, #0]
 80072d8:	0605      	lsls	r5, r0, #24
 80072da:	d501      	bpl.n	80072e0 <_printf_i+0xe8>
 80072dc:	681e      	ldr	r6, [r3, #0]
 80072de:	e002      	b.n	80072e6 <_printf_i+0xee>
 80072e0:	0641      	lsls	r1, r0, #25
 80072e2:	d5fb      	bpl.n	80072dc <_printf_i+0xe4>
 80072e4:	881e      	ldrh	r6, [r3, #0]
 80072e6:	4853      	ldr	r0, [pc, #332]	; (8007434 <_printf_i+0x23c>)
 80072e8:	2f6f      	cmp	r7, #111	; 0x6f
 80072ea:	bf0c      	ite	eq
 80072ec:	2308      	moveq	r3, #8
 80072ee:	230a      	movne	r3, #10
 80072f0:	2100      	movs	r1, #0
 80072f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80072f6:	6865      	ldr	r5, [r4, #4]
 80072f8:	60a5      	str	r5, [r4, #8]
 80072fa:	2d00      	cmp	r5, #0
 80072fc:	bfa2      	ittt	ge
 80072fe:	6821      	ldrge	r1, [r4, #0]
 8007300:	f021 0104 	bicge.w	r1, r1, #4
 8007304:	6021      	strge	r1, [r4, #0]
 8007306:	b90e      	cbnz	r6, 800730c <_printf_i+0x114>
 8007308:	2d00      	cmp	r5, #0
 800730a:	d04b      	beq.n	80073a4 <_printf_i+0x1ac>
 800730c:	4615      	mov	r5, r2
 800730e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007312:	fb03 6711 	mls	r7, r3, r1, r6
 8007316:	5dc7      	ldrb	r7, [r0, r7]
 8007318:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800731c:	4637      	mov	r7, r6
 800731e:	42bb      	cmp	r3, r7
 8007320:	460e      	mov	r6, r1
 8007322:	d9f4      	bls.n	800730e <_printf_i+0x116>
 8007324:	2b08      	cmp	r3, #8
 8007326:	d10b      	bne.n	8007340 <_printf_i+0x148>
 8007328:	6823      	ldr	r3, [r4, #0]
 800732a:	07de      	lsls	r6, r3, #31
 800732c:	d508      	bpl.n	8007340 <_printf_i+0x148>
 800732e:	6923      	ldr	r3, [r4, #16]
 8007330:	6861      	ldr	r1, [r4, #4]
 8007332:	4299      	cmp	r1, r3
 8007334:	bfde      	ittt	le
 8007336:	2330      	movle	r3, #48	; 0x30
 8007338:	f805 3c01 	strble.w	r3, [r5, #-1]
 800733c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007340:	1b52      	subs	r2, r2, r5
 8007342:	6122      	str	r2, [r4, #16]
 8007344:	f8cd a000 	str.w	sl, [sp]
 8007348:	464b      	mov	r3, r9
 800734a:	aa03      	add	r2, sp, #12
 800734c:	4621      	mov	r1, r4
 800734e:	4640      	mov	r0, r8
 8007350:	f7ff fee4 	bl	800711c <_printf_common>
 8007354:	3001      	adds	r0, #1
 8007356:	d14a      	bne.n	80073ee <_printf_i+0x1f6>
 8007358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800735c:	b004      	add	sp, #16
 800735e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007362:	6823      	ldr	r3, [r4, #0]
 8007364:	f043 0320 	orr.w	r3, r3, #32
 8007368:	6023      	str	r3, [r4, #0]
 800736a:	4833      	ldr	r0, [pc, #204]	; (8007438 <_printf_i+0x240>)
 800736c:	2778      	movs	r7, #120	; 0x78
 800736e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007372:	6823      	ldr	r3, [r4, #0]
 8007374:	6829      	ldr	r1, [r5, #0]
 8007376:	061f      	lsls	r7, r3, #24
 8007378:	f851 6b04 	ldr.w	r6, [r1], #4
 800737c:	d402      	bmi.n	8007384 <_printf_i+0x18c>
 800737e:	065f      	lsls	r7, r3, #25
 8007380:	bf48      	it	mi
 8007382:	b2b6      	uxthmi	r6, r6
 8007384:	07df      	lsls	r7, r3, #31
 8007386:	bf48      	it	mi
 8007388:	f043 0320 	orrmi.w	r3, r3, #32
 800738c:	6029      	str	r1, [r5, #0]
 800738e:	bf48      	it	mi
 8007390:	6023      	strmi	r3, [r4, #0]
 8007392:	b91e      	cbnz	r6, 800739c <_printf_i+0x1a4>
 8007394:	6823      	ldr	r3, [r4, #0]
 8007396:	f023 0320 	bic.w	r3, r3, #32
 800739a:	6023      	str	r3, [r4, #0]
 800739c:	2310      	movs	r3, #16
 800739e:	e7a7      	b.n	80072f0 <_printf_i+0xf8>
 80073a0:	4824      	ldr	r0, [pc, #144]	; (8007434 <_printf_i+0x23c>)
 80073a2:	e7e4      	b.n	800736e <_printf_i+0x176>
 80073a4:	4615      	mov	r5, r2
 80073a6:	e7bd      	b.n	8007324 <_printf_i+0x12c>
 80073a8:	682b      	ldr	r3, [r5, #0]
 80073aa:	6826      	ldr	r6, [r4, #0]
 80073ac:	6961      	ldr	r1, [r4, #20]
 80073ae:	1d18      	adds	r0, r3, #4
 80073b0:	6028      	str	r0, [r5, #0]
 80073b2:	0635      	lsls	r5, r6, #24
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	d501      	bpl.n	80073bc <_printf_i+0x1c4>
 80073b8:	6019      	str	r1, [r3, #0]
 80073ba:	e002      	b.n	80073c2 <_printf_i+0x1ca>
 80073bc:	0670      	lsls	r0, r6, #25
 80073be:	d5fb      	bpl.n	80073b8 <_printf_i+0x1c0>
 80073c0:	8019      	strh	r1, [r3, #0]
 80073c2:	2300      	movs	r3, #0
 80073c4:	6123      	str	r3, [r4, #16]
 80073c6:	4615      	mov	r5, r2
 80073c8:	e7bc      	b.n	8007344 <_printf_i+0x14c>
 80073ca:	682b      	ldr	r3, [r5, #0]
 80073cc:	1d1a      	adds	r2, r3, #4
 80073ce:	602a      	str	r2, [r5, #0]
 80073d0:	681d      	ldr	r5, [r3, #0]
 80073d2:	6862      	ldr	r2, [r4, #4]
 80073d4:	2100      	movs	r1, #0
 80073d6:	4628      	mov	r0, r5
 80073d8:	f7f8 fefa 	bl	80001d0 <memchr>
 80073dc:	b108      	cbz	r0, 80073e2 <_printf_i+0x1ea>
 80073de:	1b40      	subs	r0, r0, r5
 80073e0:	6060      	str	r0, [r4, #4]
 80073e2:	6863      	ldr	r3, [r4, #4]
 80073e4:	6123      	str	r3, [r4, #16]
 80073e6:	2300      	movs	r3, #0
 80073e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073ec:	e7aa      	b.n	8007344 <_printf_i+0x14c>
 80073ee:	6923      	ldr	r3, [r4, #16]
 80073f0:	462a      	mov	r2, r5
 80073f2:	4649      	mov	r1, r9
 80073f4:	4640      	mov	r0, r8
 80073f6:	47d0      	blx	sl
 80073f8:	3001      	adds	r0, #1
 80073fa:	d0ad      	beq.n	8007358 <_printf_i+0x160>
 80073fc:	6823      	ldr	r3, [r4, #0]
 80073fe:	079b      	lsls	r3, r3, #30
 8007400:	d413      	bmi.n	800742a <_printf_i+0x232>
 8007402:	68e0      	ldr	r0, [r4, #12]
 8007404:	9b03      	ldr	r3, [sp, #12]
 8007406:	4298      	cmp	r0, r3
 8007408:	bfb8      	it	lt
 800740a:	4618      	movlt	r0, r3
 800740c:	e7a6      	b.n	800735c <_printf_i+0x164>
 800740e:	2301      	movs	r3, #1
 8007410:	4632      	mov	r2, r6
 8007412:	4649      	mov	r1, r9
 8007414:	4640      	mov	r0, r8
 8007416:	47d0      	blx	sl
 8007418:	3001      	adds	r0, #1
 800741a:	d09d      	beq.n	8007358 <_printf_i+0x160>
 800741c:	3501      	adds	r5, #1
 800741e:	68e3      	ldr	r3, [r4, #12]
 8007420:	9903      	ldr	r1, [sp, #12]
 8007422:	1a5b      	subs	r3, r3, r1
 8007424:	42ab      	cmp	r3, r5
 8007426:	dcf2      	bgt.n	800740e <_printf_i+0x216>
 8007428:	e7eb      	b.n	8007402 <_printf_i+0x20a>
 800742a:	2500      	movs	r5, #0
 800742c:	f104 0619 	add.w	r6, r4, #25
 8007430:	e7f5      	b.n	800741e <_printf_i+0x226>
 8007432:	bf00      	nop
 8007434:	080098ea 	.word	0x080098ea
 8007438:	080098fb 	.word	0x080098fb

0800743c <std>:
 800743c:	2300      	movs	r3, #0
 800743e:	b510      	push	{r4, lr}
 8007440:	4604      	mov	r4, r0
 8007442:	e9c0 3300 	strd	r3, r3, [r0]
 8007446:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800744a:	6083      	str	r3, [r0, #8]
 800744c:	8181      	strh	r1, [r0, #12]
 800744e:	6643      	str	r3, [r0, #100]	; 0x64
 8007450:	81c2      	strh	r2, [r0, #14]
 8007452:	6183      	str	r3, [r0, #24]
 8007454:	4619      	mov	r1, r3
 8007456:	2208      	movs	r2, #8
 8007458:	305c      	adds	r0, #92	; 0x5c
 800745a:	f000 f8c3 	bl	80075e4 <memset>
 800745e:	4b0d      	ldr	r3, [pc, #52]	; (8007494 <std+0x58>)
 8007460:	6263      	str	r3, [r4, #36]	; 0x24
 8007462:	4b0d      	ldr	r3, [pc, #52]	; (8007498 <std+0x5c>)
 8007464:	62a3      	str	r3, [r4, #40]	; 0x28
 8007466:	4b0d      	ldr	r3, [pc, #52]	; (800749c <std+0x60>)
 8007468:	62e3      	str	r3, [r4, #44]	; 0x2c
 800746a:	4b0d      	ldr	r3, [pc, #52]	; (80074a0 <std+0x64>)
 800746c:	6323      	str	r3, [r4, #48]	; 0x30
 800746e:	4b0d      	ldr	r3, [pc, #52]	; (80074a4 <std+0x68>)
 8007470:	6224      	str	r4, [r4, #32]
 8007472:	429c      	cmp	r4, r3
 8007474:	d006      	beq.n	8007484 <std+0x48>
 8007476:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800747a:	4294      	cmp	r4, r2
 800747c:	d002      	beq.n	8007484 <std+0x48>
 800747e:	33d0      	adds	r3, #208	; 0xd0
 8007480:	429c      	cmp	r4, r3
 8007482:	d105      	bne.n	8007490 <std+0x54>
 8007484:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800748c:	f000 b8e0 	b.w	8007650 <__retarget_lock_init_recursive>
 8007490:	bd10      	pop	{r4, pc}
 8007492:	bf00      	nop
 8007494:	08008f91 	.word	0x08008f91
 8007498:	08008fb3 	.word	0x08008fb3
 800749c:	08008feb 	.word	0x08008feb
 80074a0:	0800900f 	.word	0x0800900f
 80074a4:	200004f8 	.word	0x200004f8

080074a8 <stdio_exit_handler>:
 80074a8:	4a02      	ldr	r2, [pc, #8]	; (80074b4 <stdio_exit_handler+0xc>)
 80074aa:	4903      	ldr	r1, [pc, #12]	; (80074b8 <stdio_exit_handler+0x10>)
 80074ac:	4803      	ldr	r0, [pc, #12]	; (80074bc <stdio_exit_handler+0x14>)
 80074ae:	f000 b869 	b.w	8007584 <_fwalk_sglue>
 80074b2:	bf00      	nop
 80074b4:	20000010 	.word	0x20000010
 80074b8:	08008831 	.word	0x08008831
 80074bc:	2000001c 	.word	0x2000001c

080074c0 <cleanup_stdio>:
 80074c0:	6841      	ldr	r1, [r0, #4]
 80074c2:	4b0c      	ldr	r3, [pc, #48]	; (80074f4 <cleanup_stdio+0x34>)
 80074c4:	4299      	cmp	r1, r3
 80074c6:	b510      	push	{r4, lr}
 80074c8:	4604      	mov	r4, r0
 80074ca:	d001      	beq.n	80074d0 <cleanup_stdio+0x10>
 80074cc:	f001 f9b0 	bl	8008830 <_fflush_r>
 80074d0:	68a1      	ldr	r1, [r4, #8]
 80074d2:	4b09      	ldr	r3, [pc, #36]	; (80074f8 <cleanup_stdio+0x38>)
 80074d4:	4299      	cmp	r1, r3
 80074d6:	d002      	beq.n	80074de <cleanup_stdio+0x1e>
 80074d8:	4620      	mov	r0, r4
 80074da:	f001 f9a9 	bl	8008830 <_fflush_r>
 80074de:	68e1      	ldr	r1, [r4, #12]
 80074e0:	4b06      	ldr	r3, [pc, #24]	; (80074fc <cleanup_stdio+0x3c>)
 80074e2:	4299      	cmp	r1, r3
 80074e4:	d004      	beq.n	80074f0 <cleanup_stdio+0x30>
 80074e6:	4620      	mov	r0, r4
 80074e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074ec:	f001 b9a0 	b.w	8008830 <_fflush_r>
 80074f0:	bd10      	pop	{r4, pc}
 80074f2:	bf00      	nop
 80074f4:	200004f8 	.word	0x200004f8
 80074f8:	20000560 	.word	0x20000560
 80074fc:	200005c8 	.word	0x200005c8

08007500 <global_stdio_init.part.0>:
 8007500:	b510      	push	{r4, lr}
 8007502:	4b0b      	ldr	r3, [pc, #44]	; (8007530 <global_stdio_init.part.0+0x30>)
 8007504:	4c0b      	ldr	r4, [pc, #44]	; (8007534 <global_stdio_init.part.0+0x34>)
 8007506:	4a0c      	ldr	r2, [pc, #48]	; (8007538 <global_stdio_init.part.0+0x38>)
 8007508:	601a      	str	r2, [r3, #0]
 800750a:	4620      	mov	r0, r4
 800750c:	2200      	movs	r2, #0
 800750e:	2104      	movs	r1, #4
 8007510:	f7ff ff94 	bl	800743c <std>
 8007514:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007518:	2201      	movs	r2, #1
 800751a:	2109      	movs	r1, #9
 800751c:	f7ff ff8e 	bl	800743c <std>
 8007520:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007524:	2202      	movs	r2, #2
 8007526:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800752a:	2112      	movs	r1, #18
 800752c:	f7ff bf86 	b.w	800743c <std>
 8007530:	20000630 	.word	0x20000630
 8007534:	200004f8 	.word	0x200004f8
 8007538:	080074a9 	.word	0x080074a9

0800753c <__sfp_lock_acquire>:
 800753c:	4801      	ldr	r0, [pc, #4]	; (8007544 <__sfp_lock_acquire+0x8>)
 800753e:	f000 b888 	b.w	8007652 <__retarget_lock_acquire_recursive>
 8007542:	bf00      	nop
 8007544:	20000635 	.word	0x20000635

08007548 <__sfp_lock_release>:
 8007548:	4801      	ldr	r0, [pc, #4]	; (8007550 <__sfp_lock_release+0x8>)
 800754a:	f000 b883 	b.w	8007654 <__retarget_lock_release_recursive>
 800754e:	bf00      	nop
 8007550:	20000635 	.word	0x20000635

08007554 <__sinit>:
 8007554:	b510      	push	{r4, lr}
 8007556:	4604      	mov	r4, r0
 8007558:	f7ff fff0 	bl	800753c <__sfp_lock_acquire>
 800755c:	6a23      	ldr	r3, [r4, #32]
 800755e:	b11b      	cbz	r3, 8007568 <__sinit+0x14>
 8007560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007564:	f7ff bff0 	b.w	8007548 <__sfp_lock_release>
 8007568:	4b04      	ldr	r3, [pc, #16]	; (800757c <__sinit+0x28>)
 800756a:	6223      	str	r3, [r4, #32]
 800756c:	4b04      	ldr	r3, [pc, #16]	; (8007580 <__sinit+0x2c>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d1f5      	bne.n	8007560 <__sinit+0xc>
 8007574:	f7ff ffc4 	bl	8007500 <global_stdio_init.part.0>
 8007578:	e7f2      	b.n	8007560 <__sinit+0xc>
 800757a:	bf00      	nop
 800757c:	080074c1 	.word	0x080074c1
 8007580:	20000630 	.word	0x20000630

08007584 <_fwalk_sglue>:
 8007584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007588:	4607      	mov	r7, r0
 800758a:	4688      	mov	r8, r1
 800758c:	4614      	mov	r4, r2
 800758e:	2600      	movs	r6, #0
 8007590:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007594:	f1b9 0901 	subs.w	r9, r9, #1
 8007598:	d505      	bpl.n	80075a6 <_fwalk_sglue+0x22>
 800759a:	6824      	ldr	r4, [r4, #0]
 800759c:	2c00      	cmp	r4, #0
 800759e:	d1f7      	bne.n	8007590 <_fwalk_sglue+0xc>
 80075a0:	4630      	mov	r0, r6
 80075a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075a6:	89ab      	ldrh	r3, [r5, #12]
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d907      	bls.n	80075bc <_fwalk_sglue+0x38>
 80075ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80075b0:	3301      	adds	r3, #1
 80075b2:	d003      	beq.n	80075bc <_fwalk_sglue+0x38>
 80075b4:	4629      	mov	r1, r5
 80075b6:	4638      	mov	r0, r7
 80075b8:	47c0      	blx	r8
 80075ba:	4306      	orrs	r6, r0
 80075bc:	3568      	adds	r5, #104	; 0x68
 80075be:	e7e9      	b.n	8007594 <_fwalk_sglue+0x10>

080075c0 <iprintf>:
 80075c0:	b40f      	push	{r0, r1, r2, r3}
 80075c2:	b507      	push	{r0, r1, r2, lr}
 80075c4:	4906      	ldr	r1, [pc, #24]	; (80075e0 <iprintf+0x20>)
 80075c6:	ab04      	add	r3, sp, #16
 80075c8:	6808      	ldr	r0, [r1, #0]
 80075ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80075ce:	6881      	ldr	r1, [r0, #8]
 80075d0:	9301      	str	r3, [sp, #4]
 80075d2:	f000 fee5 	bl	80083a0 <_vfiprintf_r>
 80075d6:	b003      	add	sp, #12
 80075d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80075dc:	b004      	add	sp, #16
 80075de:	4770      	bx	lr
 80075e0:	20000068 	.word	0x20000068

080075e4 <memset>:
 80075e4:	4402      	add	r2, r0
 80075e6:	4603      	mov	r3, r0
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d100      	bne.n	80075ee <memset+0xa>
 80075ec:	4770      	bx	lr
 80075ee:	f803 1b01 	strb.w	r1, [r3], #1
 80075f2:	e7f9      	b.n	80075e8 <memset+0x4>

080075f4 <_localeconv_r>:
 80075f4:	4800      	ldr	r0, [pc, #0]	; (80075f8 <_localeconv_r+0x4>)
 80075f6:	4770      	bx	lr
 80075f8:	2000015c 	.word	0x2000015c

080075fc <__errno>:
 80075fc:	4b01      	ldr	r3, [pc, #4]	; (8007604 <__errno+0x8>)
 80075fe:	6818      	ldr	r0, [r3, #0]
 8007600:	4770      	bx	lr
 8007602:	bf00      	nop
 8007604:	20000068 	.word	0x20000068

08007608 <__libc_init_array>:
 8007608:	b570      	push	{r4, r5, r6, lr}
 800760a:	4d0d      	ldr	r5, [pc, #52]	; (8007640 <__libc_init_array+0x38>)
 800760c:	4c0d      	ldr	r4, [pc, #52]	; (8007644 <__libc_init_array+0x3c>)
 800760e:	1b64      	subs	r4, r4, r5
 8007610:	10a4      	asrs	r4, r4, #2
 8007612:	2600      	movs	r6, #0
 8007614:	42a6      	cmp	r6, r4
 8007616:	d109      	bne.n	800762c <__libc_init_array+0x24>
 8007618:	4d0b      	ldr	r5, [pc, #44]	; (8007648 <__libc_init_array+0x40>)
 800761a:	4c0c      	ldr	r4, [pc, #48]	; (800764c <__libc_init_array+0x44>)
 800761c:	f001 ff74 	bl	8009508 <_init>
 8007620:	1b64      	subs	r4, r4, r5
 8007622:	10a4      	asrs	r4, r4, #2
 8007624:	2600      	movs	r6, #0
 8007626:	42a6      	cmp	r6, r4
 8007628:	d105      	bne.n	8007636 <__libc_init_array+0x2e>
 800762a:	bd70      	pop	{r4, r5, r6, pc}
 800762c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007630:	4798      	blx	r3
 8007632:	3601      	adds	r6, #1
 8007634:	e7ee      	b.n	8007614 <__libc_init_array+0xc>
 8007636:	f855 3b04 	ldr.w	r3, [r5], #4
 800763a:	4798      	blx	r3
 800763c:	3601      	adds	r6, #1
 800763e:	e7f2      	b.n	8007626 <__libc_init_array+0x1e>
 8007640:	08009c54 	.word	0x08009c54
 8007644:	08009c54 	.word	0x08009c54
 8007648:	08009c54 	.word	0x08009c54
 800764c:	08009c58 	.word	0x08009c58

08007650 <__retarget_lock_init_recursive>:
 8007650:	4770      	bx	lr

08007652 <__retarget_lock_acquire_recursive>:
 8007652:	4770      	bx	lr

08007654 <__retarget_lock_release_recursive>:
 8007654:	4770      	bx	lr

08007656 <quorem>:
 8007656:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800765a:	6903      	ldr	r3, [r0, #16]
 800765c:	690c      	ldr	r4, [r1, #16]
 800765e:	42a3      	cmp	r3, r4
 8007660:	4607      	mov	r7, r0
 8007662:	db7e      	blt.n	8007762 <quorem+0x10c>
 8007664:	3c01      	subs	r4, #1
 8007666:	f101 0814 	add.w	r8, r1, #20
 800766a:	f100 0514 	add.w	r5, r0, #20
 800766e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007672:	9301      	str	r3, [sp, #4]
 8007674:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007678:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800767c:	3301      	adds	r3, #1
 800767e:	429a      	cmp	r2, r3
 8007680:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007684:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007688:	fbb2 f6f3 	udiv	r6, r2, r3
 800768c:	d331      	bcc.n	80076f2 <quorem+0x9c>
 800768e:	f04f 0e00 	mov.w	lr, #0
 8007692:	4640      	mov	r0, r8
 8007694:	46ac      	mov	ip, r5
 8007696:	46f2      	mov	sl, lr
 8007698:	f850 2b04 	ldr.w	r2, [r0], #4
 800769c:	b293      	uxth	r3, r2
 800769e:	fb06 e303 	mla	r3, r6, r3, lr
 80076a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80076a6:	0c1a      	lsrs	r2, r3, #16
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	ebaa 0303 	sub.w	r3, sl, r3
 80076ae:	f8dc a000 	ldr.w	sl, [ip]
 80076b2:	fa13 f38a 	uxtah	r3, r3, sl
 80076b6:	fb06 220e 	mla	r2, r6, lr, r2
 80076ba:	9300      	str	r3, [sp, #0]
 80076bc:	9b00      	ldr	r3, [sp, #0]
 80076be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80076c2:	b292      	uxth	r2, r2
 80076c4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80076c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076cc:	f8bd 3000 	ldrh.w	r3, [sp]
 80076d0:	4581      	cmp	r9, r0
 80076d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076d6:	f84c 3b04 	str.w	r3, [ip], #4
 80076da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80076de:	d2db      	bcs.n	8007698 <quorem+0x42>
 80076e0:	f855 300b 	ldr.w	r3, [r5, fp]
 80076e4:	b92b      	cbnz	r3, 80076f2 <quorem+0x9c>
 80076e6:	9b01      	ldr	r3, [sp, #4]
 80076e8:	3b04      	subs	r3, #4
 80076ea:	429d      	cmp	r5, r3
 80076ec:	461a      	mov	r2, r3
 80076ee:	d32c      	bcc.n	800774a <quorem+0xf4>
 80076f0:	613c      	str	r4, [r7, #16]
 80076f2:	4638      	mov	r0, r7
 80076f4:	f001 fb4c 	bl	8008d90 <__mcmp>
 80076f8:	2800      	cmp	r0, #0
 80076fa:	db22      	blt.n	8007742 <quorem+0xec>
 80076fc:	3601      	adds	r6, #1
 80076fe:	4629      	mov	r1, r5
 8007700:	2000      	movs	r0, #0
 8007702:	f858 2b04 	ldr.w	r2, [r8], #4
 8007706:	f8d1 c000 	ldr.w	ip, [r1]
 800770a:	b293      	uxth	r3, r2
 800770c:	1ac3      	subs	r3, r0, r3
 800770e:	0c12      	lsrs	r2, r2, #16
 8007710:	fa13 f38c 	uxtah	r3, r3, ip
 8007714:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007718:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800771c:	b29b      	uxth	r3, r3
 800771e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007722:	45c1      	cmp	r9, r8
 8007724:	f841 3b04 	str.w	r3, [r1], #4
 8007728:	ea4f 4022 	mov.w	r0, r2, asr #16
 800772c:	d2e9      	bcs.n	8007702 <quorem+0xac>
 800772e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007732:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007736:	b922      	cbnz	r2, 8007742 <quorem+0xec>
 8007738:	3b04      	subs	r3, #4
 800773a:	429d      	cmp	r5, r3
 800773c:	461a      	mov	r2, r3
 800773e:	d30a      	bcc.n	8007756 <quorem+0x100>
 8007740:	613c      	str	r4, [r7, #16]
 8007742:	4630      	mov	r0, r6
 8007744:	b003      	add	sp, #12
 8007746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800774a:	6812      	ldr	r2, [r2, #0]
 800774c:	3b04      	subs	r3, #4
 800774e:	2a00      	cmp	r2, #0
 8007750:	d1ce      	bne.n	80076f0 <quorem+0x9a>
 8007752:	3c01      	subs	r4, #1
 8007754:	e7c9      	b.n	80076ea <quorem+0x94>
 8007756:	6812      	ldr	r2, [r2, #0]
 8007758:	3b04      	subs	r3, #4
 800775a:	2a00      	cmp	r2, #0
 800775c:	d1f0      	bne.n	8007740 <quorem+0xea>
 800775e:	3c01      	subs	r4, #1
 8007760:	e7eb      	b.n	800773a <quorem+0xe4>
 8007762:	2000      	movs	r0, #0
 8007764:	e7ee      	b.n	8007744 <quorem+0xee>
	...

08007768 <_dtoa_r>:
 8007768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800776c:	ed2d 8b04 	vpush	{d8-d9}
 8007770:	69c5      	ldr	r5, [r0, #28]
 8007772:	b093      	sub	sp, #76	; 0x4c
 8007774:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007778:	ec57 6b10 	vmov	r6, r7, d0
 800777c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007780:	9107      	str	r1, [sp, #28]
 8007782:	4604      	mov	r4, r0
 8007784:	920a      	str	r2, [sp, #40]	; 0x28
 8007786:	930d      	str	r3, [sp, #52]	; 0x34
 8007788:	b975      	cbnz	r5, 80077a8 <_dtoa_r+0x40>
 800778a:	2010      	movs	r0, #16
 800778c:	f000 ff22 	bl	80085d4 <malloc>
 8007790:	4602      	mov	r2, r0
 8007792:	61e0      	str	r0, [r4, #28]
 8007794:	b920      	cbnz	r0, 80077a0 <_dtoa_r+0x38>
 8007796:	4bae      	ldr	r3, [pc, #696]	; (8007a50 <_dtoa_r+0x2e8>)
 8007798:	21ef      	movs	r1, #239	; 0xef
 800779a:	48ae      	ldr	r0, [pc, #696]	; (8007a54 <_dtoa_r+0x2ec>)
 800779c:	f001 fdb8 	bl	8009310 <__assert_func>
 80077a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80077a4:	6005      	str	r5, [r0, #0]
 80077a6:	60c5      	str	r5, [r0, #12]
 80077a8:	69e3      	ldr	r3, [r4, #28]
 80077aa:	6819      	ldr	r1, [r3, #0]
 80077ac:	b151      	cbz	r1, 80077c4 <_dtoa_r+0x5c>
 80077ae:	685a      	ldr	r2, [r3, #4]
 80077b0:	604a      	str	r2, [r1, #4]
 80077b2:	2301      	movs	r3, #1
 80077b4:	4093      	lsls	r3, r2
 80077b6:	608b      	str	r3, [r1, #8]
 80077b8:	4620      	mov	r0, r4
 80077ba:	f001 f8ad 	bl	8008918 <_Bfree>
 80077be:	69e3      	ldr	r3, [r4, #28]
 80077c0:	2200      	movs	r2, #0
 80077c2:	601a      	str	r2, [r3, #0]
 80077c4:	1e3b      	subs	r3, r7, #0
 80077c6:	bfbb      	ittet	lt
 80077c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80077cc:	9303      	strlt	r3, [sp, #12]
 80077ce:	2300      	movge	r3, #0
 80077d0:	2201      	movlt	r2, #1
 80077d2:	bfac      	ite	ge
 80077d4:	f8c8 3000 	strge.w	r3, [r8]
 80077d8:	f8c8 2000 	strlt.w	r2, [r8]
 80077dc:	4b9e      	ldr	r3, [pc, #632]	; (8007a58 <_dtoa_r+0x2f0>)
 80077de:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80077e2:	ea33 0308 	bics.w	r3, r3, r8
 80077e6:	d11b      	bne.n	8007820 <_dtoa_r+0xb8>
 80077e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80077ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80077ee:	6013      	str	r3, [r2, #0]
 80077f0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80077f4:	4333      	orrs	r3, r6
 80077f6:	f000 8593 	beq.w	8008320 <_dtoa_r+0xbb8>
 80077fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077fc:	b963      	cbnz	r3, 8007818 <_dtoa_r+0xb0>
 80077fe:	4b97      	ldr	r3, [pc, #604]	; (8007a5c <_dtoa_r+0x2f4>)
 8007800:	e027      	b.n	8007852 <_dtoa_r+0xea>
 8007802:	4b97      	ldr	r3, [pc, #604]	; (8007a60 <_dtoa_r+0x2f8>)
 8007804:	9300      	str	r3, [sp, #0]
 8007806:	3308      	adds	r3, #8
 8007808:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800780a:	6013      	str	r3, [r2, #0]
 800780c:	9800      	ldr	r0, [sp, #0]
 800780e:	b013      	add	sp, #76	; 0x4c
 8007810:	ecbd 8b04 	vpop	{d8-d9}
 8007814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007818:	4b90      	ldr	r3, [pc, #576]	; (8007a5c <_dtoa_r+0x2f4>)
 800781a:	9300      	str	r3, [sp, #0]
 800781c:	3303      	adds	r3, #3
 800781e:	e7f3      	b.n	8007808 <_dtoa_r+0xa0>
 8007820:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007824:	2200      	movs	r2, #0
 8007826:	ec51 0b17 	vmov	r0, r1, d7
 800782a:	eeb0 8a47 	vmov.f32	s16, s14
 800782e:	eef0 8a67 	vmov.f32	s17, s15
 8007832:	2300      	movs	r3, #0
 8007834:	f7f9 f948 	bl	8000ac8 <__aeabi_dcmpeq>
 8007838:	4681      	mov	r9, r0
 800783a:	b160      	cbz	r0, 8007856 <_dtoa_r+0xee>
 800783c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800783e:	2301      	movs	r3, #1
 8007840:	6013      	str	r3, [r2, #0]
 8007842:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007844:	2b00      	cmp	r3, #0
 8007846:	f000 8568 	beq.w	800831a <_dtoa_r+0xbb2>
 800784a:	4b86      	ldr	r3, [pc, #536]	; (8007a64 <_dtoa_r+0x2fc>)
 800784c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800784e:	6013      	str	r3, [r2, #0]
 8007850:	3b01      	subs	r3, #1
 8007852:	9300      	str	r3, [sp, #0]
 8007854:	e7da      	b.n	800780c <_dtoa_r+0xa4>
 8007856:	aa10      	add	r2, sp, #64	; 0x40
 8007858:	a911      	add	r1, sp, #68	; 0x44
 800785a:	4620      	mov	r0, r4
 800785c:	eeb0 0a48 	vmov.f32	s0, s16
 8007860:	eef0 0a68 	vmov.f32	s1, s17
 8007864:	f001 fb3a 	bl	8008edc <__d2b>
 8007868:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800786c:	4682      	mov	sl, r0
 800786e:	2d00      	cmp	r5, #0
 8007870:	d07f      	beq.n	8007972 <_dtoa_r+0x20a>
 8007872:	ee18 3a90 	vmov	r3, s17
 8007876:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800787a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800787e:	ec51 0b18 	vmov	r0, r1, d8
 8007882:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007886:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800788a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800788e:	4619      	mov	r1, r3
 8007890:	2200      	movs	r2, #0
 8007892:	4b75      	ldr	r3, [pc, #468]	; (8007a68 <_dtoa_r+0x300>)
 8007894:	f7f8 fcf8 	bl	8000288 <__aeabi_dsub>
 8007898:	a367      	add	r3, pc, #412	; (adr r3, 8007a38 <_dtoa_r+0x2d0>)
 800789a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789e:	f7f8 feab 	bl	80005f8 <__aeabi_dmul>
 80078a2:	a367      	add	r3, pc, #412	; (adr r3, 8007a40 <_dtoa_r+0x2d8>)
 80078a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a8:	f7f8 fcf0 	bl	800028c <__adddf3>
 80078ac:	4606      	mov	r6, r0
 80078ae:	4628      	mov	r0, r5
 80078b0:	460f      	mov	r7, r1
 80078b2:	f7f8 fe37 	bl	8000524 <__aeabi_i2d>
 80078b6:	a364      	add	r3, pc, #400	; (adr r3, 8007a48 <_dtoa_r+0x2e0>)
 80078b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078bc:	f7f8 fe9c 	bl	80005f8 <__aeabi_dmul>
 80078c0:	4602      	mov	r2, r0
 80078c2:	460b      	mov	r3, r1
 80078c4:	4630      	mov	r0, r6
 80078c6:	4639      	mov	r1, r7
 80078c8:	f7f8 fce0 	bl	800028c <__adddf3>
 80078cc:	4606      	mov	r6, r0
 80078ce:	460f      	mov	r7, r1
 80078d0:	f7f9 f942 	bl	8000b58 <__aeabi_d2iz>
 80078d4:	2200      	movs	r2, #0
 80078d6:	4683      	mov	fp, r0
 80078d8:	2300      	movs	r3, #0
 80078da:	4630      	mov	r0, r6
 80078dc:	4639      	mov	r1, r7
 80078de:	f7f9 f8fd 	bl	8000adc <__aeabi_dcmplt>
 80078e2:	b148      	cbz	r0, 80078f8 <_dtoa_r+0x190>
 80078e4:	4658      	mov	r0, fp
 80078e6:	f7f8 fe1d 	bl	8000524 <__aeabi_i2d>
 80078ea:	4632      	mov	r2, r6
 80078ec:	463b      	mov	r3, r7
 80078ee:	f7f9 f8eb 	bl	8000ac8 <__aeabi_dcmpeq>
 80078f2:	b908      	cbnz	r0, 80078f8 <_dtoa_r+0x190>
 80078f4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80078f8:	f1bb 0f16 	cmp.w	fp, #22
 80078fc:	d857      	bhi.n	80079ae <_dtoa_r+0x246>
 80078fe:	4b5b      	ldr	r3, [pc, #364]	; (8007a6c <_dtoa_r+0x304>)
 8007900:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007908:	ec51 0b18 	vmov	r0, r1, d8
 800790c:	f7f9 f8e6 	bl	8000adc <__aeabi_dcmplt>
 8007910:	2800      	cmp	r0, #0
 8007912:	d04e      	beq.n	80079b2 <_dtoa_r+0x24a>
 8007914:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007918:	2300      	movs	r3, #0
 800791a:	930c      	str	r3, [sp, #48]	; 0x30
 800791c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800791e:	1b5b      	subs	r3, r3, r5
 8007920:	1e5a      	subs	r2, r3, #1
 8007922:	bf45      	ittet	mi
 8007924:	f1c3 0301 	rsbmi	r3, r3, #1
 8007928:	9305      	strmi	r3, [sp, #20]
 800792a:	2300      	movpl	r3, #0
 800792c:	2300      	movmi	r3, #0
 800792e:	9206      	str	r2, [sp, #24]
 8007930:	bf54      	ite	pl
 8007932:	9305      	strpl	r3, [sp, #20]
 8007934:	9306      	strmi	r3, [sp, #24]
 8007936:	f1bb 0f00 	cmp.w	fp, #0
 800793a:	db3c      	blt.n	80079b6 <_dtoa_r+0x24e>
 800793c:	9b06      	ldr	r3, [sp, #24]
 800793e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007942:	445b      	add	r3, fp
 8007944:	9306      	str	r3, [sp, #24]
 8007946:	2300      	movs	r3, #0
 8007948:	9308      	str	r3, [sp, #32]
 800794a:	9b07      	ldr	r3, [sp, #28]
 800794c:	2b09      	cmp	r3, #9
 800794e:	d868      	bhi.n	8007a22 <_dtoa_r+0x2ba>
 8007950:	2b05      	cmp	r3, #5
 8007952:	bfc4      	itt	gt
 8007954:	3b04      	subgt	r3, #4
 8007956:	9307      	strgt	r3, [sp, #28]
 8007958:	9b07      	ldr	r3, [sp, #28]
 800795a:	f1a3 0302 	sub.w	r3, r3, #2
 800795e:	bfcc      	ite	gt
 8007960:	2500      	movgt	r5, #0
 8007962:	2501      	movle	r5, #1
 8007964:	2b03      	cmp	r3, #3
 8007966:	f200 8085 	bhi.w	8007a74 <_dtoa_r+0x30c>
 800796a:	e8df f003 	tbb	[pc, r3]
 800796e:	3b2e      	.short	0x3b2e
 8007970:	5839      	.short	0x5839
 8007972:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007976:	441d      	add	r5, r3
 8007978:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800797c:	2b20      	cmp	r3, #32
 800797e:	bfc1      	itttt	gt
 8007980:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007984:	fa08 f803 	lslgt.w	r8, r8, r3
 8007988:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800798c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007990:	bfd6      	itet	le
 8007992:	f1c3 0320 	rsble	r3, r3, #32
 8007996:	ea48 0003 	orrgt.w	r0, r8, r3
 800799a:	fa06 f003 	lslle.w	r0, r6, r3
 800799e:	f7f8 fdb1 	bl	8000504 <__aeabi_ui2d>
 80079a2:	2201      	movs	r2, #1
 80079a4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80079a8:	3d01      	subs	r5, #1
 80079aa:	920e      	str	r2, [sp, #56]	; 0x38
 80079ac:	e76f      	b.n	800788e <_dtoa_r+0x126>
 80079ae:	2301      	movs	r3, #1
 80079b0:	e7b3      	b.n	800791a <_dtoa_r+0x1b2>
 80079b2:	900c      	str	r0, [sp, #48]	; 0x30
 80079b4:	e7b2      	b.n	800791c <_dtoa_r+0x1b4>
 80079b6:	9b05      	ldr	r3, [sp, #20]
 80079b8:	eba3 030b 	sub.w	r3, r3, fp
 80079bc:	9305      	str	r3, [sp, #20]
 80079be:	f1cb 0300 	rsb	r3, fp, #0
 80079c2:	9308      	str	r3, [sp, #32]
 80079c4:	2300      	movs	r3, #0
 80079c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80079c8:	e7bf      	b.n	800794a <_dtoa_r+0x1e2>
 80079ca:	2300      	movs	r3, #0
 80079cc:	9309      	str	r3, [sp, #36]	; 0x24
 80079ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	dc52      	bgt.n	8007a7a <_dtoa_r+0x312>
 80079d4:	2301      	movs	r3, #1
 80079d6:	9301      	str	r3, [sp, #4]
 80079d8:	9304      	str	r3, [sp, #16]
 80079da:	461a      	mov	r2, r3
 80079dc:	920a      	str	r2, [sp, #40]	; 0x28
 80079de:	e00b      	b.n	80079f8 <_dtoa_r+0x290>
 80079e0:	2301      	movs	r3, #1
 80079e2:	e7f3      	b.n	80079cc <_dtoa_r+0x264>
 80079e4:	2300      	movs	r3, #0
 80079e6:	9309      	str	r3, [sp, #36]	; 0x24
 80079e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079ea:	445b      	add	r3, fp
 80079ec:	9301      	str	r3, [sp, #4]
 80079ee:	3301      	adds	r3, #1
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	9304      	str	r3, [sp, #16]
 80079f4:	bfb8      	it	lt
 80079f6:	2301      	movlt	r3, #1
 80079f8:	69e0      	ldr	r0, [r4, #28]
 80079fa:	2100      	movs	r1, #0
 80079fc:	2204      	movs	r2, #4
 80079fe:	f102 0614 	add.w	r6, r2, #20
 8007a02:	429e      	cmp	r6, r3
 8007a04:	d93d      	bls.n	8007a82 <_dtoa_r+0x31a>
 8007a06:	6041      	str	r1, [r0, #4]
 8007a08:	4620      	mov	r0, r4
 8007a0a:	f000 ff45 	bl	8008898 <_Balloc>
 8007a0e:	9000      	str	r0, [sp, #0]
 8007a10:	2800      	cmp	r0, #0
 8007a12:	d139      	bne.n	8007a88 <_dtoa_r+0x320>
 8007a14:	4b16      	ldr	r3, [pc, #88]	; (8007a70 <_dtoa_r+0x308>)
 8007a16:	4602      	mov	r2, r0
 8007a18:	f240 11af 	movw	r1, #431	; 0x1af
 8007a1c:	e6bd      	b.n	800779a <_dtoa_r+0x32>
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e7e1      	b.n	80079e6 <_dtoa_r+0x27e>
 8007a22:	2501      	movs	r5, #1
 8007a24:	2300      	movs	r3, #0
 8007a26:	9307      	str	r3, [sp, #28]
 8007a28:	9509      	str	r5, [sp, #36]	; 0x24
 8007a2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a2e:	9301      	str	r3, [sp, #4]
 8007a30:	9304      	str	r3, [sp, #16]
 8007a32:	2200      	movs	r2, #0
 8007a34:	2312      	movs	r3, #18
 8007a36:	e7d1      	b.n	80079dc <_dtoa_r+0x274>
 8007a38:	636f4361 	.word	0x636f4361
 8007a3c:	3fd287a7 	.word	0x3fd287a7
 8007a40:	8b60c8b3 	.word	0x8b60c8b3
 8007a44:	3fc68a28 	.word	0x3fc68a28
 8007a48:	509f79fb 	.word	0x509f79fb
 8007a4c:	3fd34413 	.word	0x3fd34413
 8007a50:	08009919 	.word	0x08009919
 8007a54:	08009930 	.word	0x08009930
 8007a58:	7ff00000 	.word	0x7ff00000
 8007a5c:	08009915 	.word	0x08009915
 8007a60:	0800990c 	.word	0x0800990c
 8007a64:	080098e9 	.word	0x080098e9
 8007a68:	3ff80000 	.word	0x3ff80000
 8007a6c:	08009a30 	.word	0x08009a30
 8007a70:	08009988 	.word	0x08009988
 8007a74:	2301      	movs	r3, #1
 8007a76:	9309      	str	r3, [sp, #36]	; 0x24
 8007a78:	e7d7      	b.n	8007a2a <_dtoa_r+0x2c2>
 8007a7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a7c:	9301      	str	r3, [sp, #4]
 8007a7e:	9304      	str	r3, [sp, #16]
 8007a80:	e7ba      	b.n	80079f8 <_dtoa_r+0x290>
 8007a82:	3101      	adds	r1, #1
 8007a84:	0052      	lsls	r2, r2, #1
 8007a86:	e7ba      	b.n	80079fe <_dtoa_r+0x296>
 8007a88:	69e3      	ldr	r3, [r4, #28]
 8007a8a:	9a00      	ldr	r2, [sp, #0]
 8007a8c:	601a      	str	r2, [r3, #0]
 8007a8e:	9b04      	ldr	r3, [sp, #16]
 8007a90:	2b0e      	cmp	r3, #14
 8007a92:	f200 80a8 	bhi.w	8007be6 <_dtoa_r+0x47e>
 8007a96:	2d00      	cmp	r5, #0
 8007a98:	f000 80a5 	beq.w	8007be6 <_dtoa_r+0x47e>
 8007a9c:	f1bb 0f00 	cmp.w	fp, #0
 8007aa0:	dd38      	ble.n	8007b14 <_dtoa_r+0x3ac>
 8007aa2:	4bc0      	ldr	r3, [pc, #768]	; (8007da4 <_dtoa_r+0x63c>)
 8007aa4:	f00b 020f 	and.w	r2, fp, #15
 8007aa8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007aac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007ab0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007ab4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007ab8:	d019      	beq.n	8007aee <_dtoa_r+0x386>
 8007aba:	4bbb      	ldr	r3, [pc, #748]	; (8007da8 <_dtoa_r+0x640>)
 8007abc:	ec51 0b18 	vmov	r0, r1, d8
 8007ac0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ac4:	f7f8 fec2 	bl	800084c <__aeabi_ddiv>
 8007ac8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007acc:	f008 080f 	and.w	r8, r8, #15
 8007ad0:	2503      	movs	r5, #3
 8007ad2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007da8 <_dtoa_r+0x640>
 8007ad6:	f1b8 0f00 	cmp.w	r8, #0
 8007ada:	d10a      	bne.n	8007af2 <_dtoa_r+0x38a>
 8007adc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ae0:	4632      	mov	r2, r6
 8007ae2:	463b      	mov	r3, r7
 8007ae4:	f7f8 feb2 	bl	800084c <__aeabi_ddiv>
 8007ae8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007aec:	e02b      	b.n	8007b46 <_dtoa_r+0x3de>
 8007aee:	2502      	movs	r5, #2
 8007af0:	e7ef      	b.n	8007ad2 <_dtoa_r+0x36a>
 8007af2:	f018 0f01 	tst.w	r8, #1
 8007af6:	d008      	beq.n	8007b0a <_dtoa_r+0x3a2>
 8007af8:	4630      	mov	r0, r6
 8007afa:	4639      	mov	r1, r7
 8007afc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007b00:	f7f8 fd7a 	bl	80005f8 <__aeabi_dmul>
 8007b04:	3501      	adds	r5, #1
 8007b06:	4606      	mov	r6, r0
 8007b08:	460f      	mov	r7, r1
 8007b0a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007b0e:	f109 0908 	add.w	r9, r9, #8
 8007b12:	e7e0      	b.n	8007ad6 <_dtoa_r+0x36e>
 8007b14:	f000 809f 	beq.w	8007c56 <_dtoa_r+0x4ee>
 8007b18:	f1cb 0600 	rsb	r6, fp, #0
 8007b1c:	4ba1      	ldr	r3, [pc, #644]	; (8007da4 <_dtoa_r+0x63c>)
 8007b1e:	4fa2      	ldr	r7, [pc, #648]	; (8007da8 <_dtoa_r+0x640>)
 8007b20:	f006 020f 	and.w	r2, r6, #15
 8007b24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b2c:	ec51 0b18 	vmov	r0, r1, d8
 8007b30:	f7f8 fd62 	bl	80005f8 <__aeabi_dmul>
 8007b34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b38:	1136      	asrs	r6, r6, #4
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	2502      	movs	r5, #2
 8007b3e:	2e00      	cmp	r6, #0
 8007b40:	d17e      	bne.n	8007c40 <_dtoa_r+0x4d8>
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d1d0      	bne.n	8007ae8 <_dtoa_r+0x380>
 8007b46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b48:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	f000 8084 	beq.w	8007c5a <_dtoa_r+0x4f2>
 8007b52:	4b96      	ldr	r3, [pc, #600]	; (8007dac <_dtoa_r+0x644>)
 8007b54:	2200      	movs	r2, #0
 8007b56:	4640      	mov	r0, r8
 8007b58:	4649      	mov	r1, r9
 8007b5a:	f7f8 ffbf 	bl	8000adc <__aeabi_dcmplt>
 8007b5e:	2800      	cmp	r0, #0
 8007b60:	d07b      	beq.n	8007c5a <_dtoa_r+0x4f2>
 8007b62:	9b04      	ldr	r3, [sp, #16]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d078      	beq.n	8007c5a <_dtoa_r+0x4f2>
 8007b68:	9b01      	ldr	r3, [sp, #4]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	dd39      	ble.n	8007be2 <_dtoa_r+0x47a>
 8007b6e:	4b90      	ldr	r3, [pc, #576]	; (8007db0 <_dtoa_r+0x648>)
 8007b70:	2200      	movs	r2, #0
 8007b72:	4640      	mov	r0, r8
 8007b74:	4649      	mov	r1, r9
 8007b76:	f7f8 fd3f 	bl	80005f8 <__aeabi_dmul>
 8007b7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b7e:	9e01      	ldr	r6, [sp, #4]
 8007b80:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8007b84:	3501      	adds	r5, #1
 8007b86:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007b8a:	4628      	mov	r0, r5
 8007b8c:	f7f8 fcca 	bl	8000524 <__aeabi_i2d>
 8007b90:	4642      	mov	r2, r8
 8007b92:	464b      	mov	r3, r9
 8007b94:	f7f8 fd30 	bl	80005f8 <__aeabi_dmul>
 8007b98:	4b86      	ldr	r3, [pc, #536]	; (8007db4 <_dtoa_r+0x64c>)
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f7f8 fb76 	bl	800028c <__adddf3>
 8007ba0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007ba4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ba8:	9303      	str	r3, [sp, #12]
 8007baa:	2e00      	cmp	r6, #0
 8007bac:	d158      	bne.n	8007c60 <_dtoa_r+0x4f8>
 8007bae:	4b82      	ldr	r3, [pc, #520]	; (8007db8 <_dtoa_r+0x650>)
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	4640      	mov	r0, r8
 8007bb4:	4649      	mov	r1, r9
 8007bb6:	f7f8 fb67 	bl	8000288 <__aeabi_dsub>
 8007bba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007bbe:	4680      	mov	r8, r0
 8007bc0:	4689      	mov	r9, r1
 8007bc2:	f7f8 ffa9 	bl	8000b18 <__aeabi_dcmpgt>
 8007bc6:	2800      	cmp	r0, #0
 8007bc8:	f040 8296 	bne.w	80080f8 <_dtoa_r+0x990>
 8007bcc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007bd0:	4640      	mov	r0, r8
 8007bd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007bd6:	4649      	mov	r1, r9
 8007bd8:	f7f8 ff80 	bl	8000adc <__aeabi_dcmplt>
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	f040 8289 	bne.w	80080f4 <_dtoa_r+0x98c>
 8007be2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007be6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	f2c0 814e 	blt.w	8007e8a <_dtoa_r+0x722>
 8007bee:	f1bb 0f0e 	cmp.w	fp, #14
 8007bf2:	f300 814a 	bgt.w	8007e8a <_dtoa_r+0x722>
 8007bf6:	4b6b      	ldr	r3, [pc, #428]	; (8007da4 <_dtoa_r+0x63c>)
 8007bf8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007bfc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007c00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	f280 80dc 	bge.w	8007dc0 <_dtoa_r+0x658>
 8007c08:	9b04      	ldr	r3, [sp, #16]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	f300 80d8 	bgt.w	8007dc0 <_dtoa_r+0x658>
 8007c10:	f040 826f 	bne.w	80080f2 <_dtoa_r+0x98a>
 8007c14:	4b68      	ldr	r3, [pc, #416]	; (8007db8 <_dtoa_r+0x650>)
 8007c16:	2200      	movs	r2, #0
 8007c18:	4640      	mov	r0, r8
 8007c1a:	4649      	mov	r1, r9
 8007c1c:	f7f8 fcec 	bl	80005f8 <__aeabi_dmul>
 8007c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c24:	f7f8 ff6e 	bl	8000b04 <__aeabi_dcmpge>
 8007c28:	9e04      	ldr	r6, [sp, #16]
 8007c2a:	4637      	mov	r7, r6
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	f040 8245 	bne.w	80080bc <_dtoa_r+0x954>
 8007c32:	9d00      	ldr	r5, [sp, #0]
 8007c34:	2331      	movs	r3, #49	; 0x31
 8007c36:	f805 3b01 	strb.w	r3, [r5], #1
 8007c3a:	f10b 0b01 	add.w	fp, fp, #1
 8007c3e:	e241      	b.n	80080c4 <_dtoa_r+0x95c>
 8007c40:	07f2      	lsls	r2, r6, #31
 8007c42:	d505      	bpl.n	8007c50 <_dtoa_r+0x4e8>
 8007c44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c48:	f7f8 fcd6 	bl	80005f8 <__aeabi_dmul>
 8007c4c:	3501      	adds	r5, #1
 8007c4e:	2301      	movs	r3, #1
 8007c50:	1076      	asrs	r6, r6, #1
 8007c52:	3708      	adds	r7, #8
 8007c54:	e773      	b.n	8007b3e <_dtoa_r+0x3d6>
 8007c56:	2502      	movs	r5, #2
 8007c58:	e775      	b.n	8007b46 <_dtoa_r+0x3de>
 8007c5a:	9e04      	ldr	r6, [sp, #16]
 8007c5c:	465f      	mov	r7, fp
 8007c5e:	e792      	b.n	8007b86 <_dtoa_r+0x41e>
 8007c60:	9900      	ldr	r1, [sp, #0]
 8007c62:	4b50      	ldr	r3, [pc, #320]	; (8007da4 <_dtoa_r+0x63c>)
 8007c64:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c68:	4431      	add	r1, r6
 8007c6a:	9102      	str	r1, [sp, #8]
 8007c6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c6e:	eeb0 9a47 	vmov.f32	s18, s14
 8007c72:	eef0 9a67 	vmov.f32	s19, s15
 8007c76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007c7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c7e:	2900      	cmp	r1, #0
 8007c80:	d044      	beq.n	8007d0c <_dtoa_r+0x5a4>
 8007c82:	494e      	ldr	r1, [pc, #312]	; (8007dbc <_dtoa_r+0x654>)
 8007c84:	2000      	movs	r0, #0
 8007c86:	f7f8 fde1 	bl	800084c <__aeabi_ddiv>
 8007c8a:	ec53 2b19 	vmov	r2, r3, d9
 8007c8e:	f7f8 fafb 	bl	8000288 <__aeabi_dsub>
 8007c92:	9d00      	ldr	r5, [sp, #0]
 8007c94:	ec41 0b19 	vmov	d9, r0, r1
 8007c98:	4649      	mov	r1, r9
 8007c9a:	4640      	mov	r0, r8
 8007c9c:	f7f8 ff5c 	bl	8000b58 <__aeabi_d2iz>
 8007ca0:	4606      	mov	r6, r0
 8007ca2:	f7f8 fc3f 	bl	8000524 <__aeabi_i2d>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	460b      	mov	r3, r1
 8007caa:	4640      	mov	r0, r8
 8007cac:	4649      	mov	r1, r9
 8007cae:	f7f8 faeb 	bl	8000288 <__aeabi_dsub>
 8007cb2:	3630      	adds	r6, #48	; 0x30
 8007cb4:	f805 6b01 	strb.w	r6, [r5], #1
 8007cb8:	ec53 2b19 	vmov	r2, r3, d9
 8007cbc:	4680      	mov	r8, r0
 8007cbe:	4689      	mov	r9, r1
 8007cc0:	f7f8 ff0c 	bl	8000adc <__aeabi_dcmplt>
 8007cc4:	2800      	cmp	r0, #0
 8007cc6:	d164      	bne.n	8007d92 <_dtoa_r+0x62a>
 8007cc8:	4642      	mov	r2, r8
 8007cca:	464b      	mov	r3, r9
 8007ccc:	4937      	ldr	r1, [pc, #220]	; (8007dac <_dtoa_r+0x644>)
 8007cce:	2000      	movs	r0, #0
 8007cd0:	f7f8 fada 	bl	8000288 <__aeabi_dsub>
 8007cd4:	ec53 2b19 	vmov	r2, r3, d9
 8007cd8:	f7f8 ff00 	bl	8000adc <__aeabi_dcmplt>
 8007cdc:	2800      	cmp	r0, #0
 8007cde:	f040 80b6 	bne.w	8007e4e <_dtoa_r+0x6e6>
 8007ce2:	9b02      	ldr	r3, [sp, #8]
 8007ce4:	429d      	cmp	r5, r3
 8007ce6:	f43f af7c 	beq.w	8007be2 <_dtoa_r+0x47a>
 8007cea:	4b31      	ldr	r3, [pc, #196]	; (8007db0 <_dtoa_r+0x648>)
 8007cec:	ec51 0b19 	vmov	r0, r1, d9
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f7f8 fc81 	bl	80005f8 <__aeabi_dmul>
 8007cf6:	4b2e      	ldr	r3, [pc, #184]	; (8007db0 <_dtoa_r+0x648>)
 8007cf8:	ec41 0b19 	vmov	d9, r0, r1
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	4640      	mov	r0, r8
 8007d00:	4649      	mov	r1, r9
 8007d02:	f7f8 fc79 	bl	80005f8 <__aeabi_dmul>
 8007d06:	4680      	mov	r8, r0
 8007d08:	4689      	mov	r9, r1
 8007d0a:	e7c5      	b.n	8007c98 <_dtoa_r+0x530>
 8007d0c:	ec51 0b17 	vmov	r0, r1, d7
 8007d10:	f7f8 fc72 	bl	80005f8 <__aeabi_dmul>
 8007d14:	9b02      	ldr	r3, [sp, #8]
 8007d16:	9d00      	ldr	r5, [sp, #0]
 8007d18:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d1a:	ec41 0b19 	vmov	d9, r0, r1
 8007d1e:	4649      	mov	r1, r9
 8007d20:	4640      	mov	r0, r8
 8007d22:	f7f8 ff19 	bl	8000b58 <__aeabi_d2iz>
 8007d26:	4606      	mov	r6, r0
 8007d28:	f7f8 fbfc 	bl	8000524 <__aeabi_i2d>
 8007d2c:	3630      	adds	r6, #48	; 0x30
 8007d2e:	4602      	mov	r2, r0
 8007d30:	460b      	mov	r3, r1
 8007d32:	4640      	mov	r0, r8
 8007d34:	4649      	mov	r1, r9
 8007d36:	f7f8 faa7 	bl	8000288 <__aeabi_dsub>
 8007d3a:	f805 6b01 	strb.w	r6, [r5], #1
 8007d3e:	9b02      	ldr	r3, [sp, #8]
 8007d40:	429d      	cmp	r5, r3
 8007d42:	4680      	mov	r8, r0
 8007d44:	4689      	mov	r9, r1
 8007d46:	f04f 0200 	mov.w	r2, #0
 8007d4a:	d124      	bne.n	8007d96 <_dtoa_r+0x62e>
 8007d4c:	4b1b      	ldr	r3, [pc, #108]	; (8007dbc <_dtoa_r+0x654>)
 8007d4e:	ec51 0b19 	vmov	r0, r1, d9
 8007d52:	f7f8 fa9b 	bl	800028c <__adddf3>
 8007d56:	4602      	mov	r2, r0
 8007d58:	460b      	mov	r3, r1
 8007d5a:	4640      	mov	r0, r8
 8007d5c:	4649      	mov	r1, r9
 8007d5e:	f7f8 fedb 	bl	8000b18 <__aeabi_dcmpgt>
 8007d62:	2800      	cmp	r0, #0
 8007d64:	d173      	bne.n	8007e4e <_dtoa_r+0x6e6>
 8007d66:	ec53 2b19 	vmov	r2, r3, d9
 8007d6a:	4914      	ldr	r1, [pc, #80]	; (8007dbc <_dtoa_r+0x654>)
 8007d6c:	2000      	movs	r0, #0
 8007d6e:	f7f8 fa8b 	bl	8000288 <__aeabi_dsub>
 8007d72:	4602      	mov	r2, r0
 8007d74:	460b      	mov	r3, r1
 8007d76:	4640      	mov	r0, r8
 8007d78:	4649      	mov	r1, r9
 8007d7a:	f7f8 feaf 	bl	8000adc <__aeabi_dcmplt>
 8007d7e:	2800      	cmp	r0, #0
 8007d80:	f43f af2f 	beq.w	8007be2 <_dtoa_r+0x47a>
 8007d84:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007d86:	1e6b      	subs	r3, r5, #1
 8007d88:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d8a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007d8e:	2b30      	cmp	r3, #48	; 0x30
 8007d90:	d0f8      	beq.n	8007d84 <_dtoa_r+0x61c>
 8007d92:	46bb      	mov	fp, r7
 8007d94:	e04a      	b.n	8007e2c <_dtoa_r+0x6c4>
 8007d96:	4b06      	ldr	r3, [pc, #24]	; (8007db0 <_dtoa_r+0x648>)
 8007d98:	f7f8 fc2e 	bl	80005f8 <__aeabi_dmul>
 8007d9c:	4680      	mov	r8, r0
 8007d9e:	4689      	mov	r9, r1
 8007da0:	e7bd      	b.n	8007d1e <_dtoa_r+0x5b6>
 8007da2:	bf00      	nop
 8007da4:	08009a30 	.word	0x08009a30
 8007da8:	08009a08 	.word	0x08009a08
 8007dac:	3ff00000 	.word	0x3ff00000
 8007db0:	40240000 	.word	0x40240000
 8007db4:	401c0000 	.word	0x401c0000
 8007db8:	40140000 	.word	0x40140000
 8007dbc:	3fe00000 	.word	0x3fe00000
 8007dc0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007dc4:	9d00      	ldr	r5, [sp, #0]
 8007dc6:	4642      	mov	r2, r8
 8007dc8:	464b      	mov	r3, r9
 8007dca:	4630      	mov	r0, r6
 8007dcc:	4639      	mov	r1, r7
 8007dce:	f7f8 fd3d 	bl	800084c <__aeabi_ddiv>
 8007dd2:	f7f8 fec1 	bl	8000b58 <__aeabi_d2iz>
 8007dd6:	9001      	str	r0, [sp, #4]
 8007dd8:	f7f8 fba4 	bl	8000524 <__aeabi_i2d>
 8007ddc:	4642      	mov	r2, r8
 8007dde:	464b      	mov	r3, r9
 8007de0:	f7f8 fc0a 	bl	80005f8 <__aeabi_dmul>
 8007de4:	4602      	mov	r2, r0
 8007de6:	460b      	mov	r3, r1
 8007de8:	4630      	mov	r0, r6
 8007dea:	4639      	mov	r1, r7
 8007dec:	f7f8 fa4c 	bl	8000288 <__aeabi_dsub>
 8007df0:	9e01      	ldr	r6, [sp, #4]
 8007df2:	9f04      	ldr	r7, [sp, #16]
 8007df4:	3630      	adds	r6, #48	; 0x30
 8007df6:	f805 6b01 	strb.w	r6, [r5], #1
 8007dfa:	9e00      	ldr	r6, [sp, #0]
 8007dfc:	1bae      	subs	r6, r5, r6
 8007dfe:	42b7      	cmp	r7, r6
 8007e00:	4602      	mov	r2, r0
 8007e02:	460b      	mov	r3, r1
 8007e04:	d134      	bne.n	8007e70 <_dtoa_r+0x708>
 8007e06:	f7f8 fa41 	bl	800028c <__adddf3>
 8007e0a:	4642      	mov	r2, r8
 8007e0c:	464b      	mov	r3, r9
 8007e0e:	4606      	mov	r6, r0
 8007e10:	460f      	mov	r7, r1
 8007e12:	f7f8 fe81 	bl	8000b18 <__aeabi_dcmpgt>
 8007e16:	b9c8      	cbnz	r0, 8007e4c <_dtoa_r+0x6e4>
 8007e18:	4642      	mov	r2, r8
 8007e1a:	464b      	mov	r3, r9
 8007e1c:	4630      	mov	r0, r6
 8007e1e:	4639      	mov	r1, r7
 8007e20:	f7f8 fe52 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e24:	b110      	cbz	r0, 8007e2c <_dtoa_r+0x6c4>
 8007e26:	9b01      	ldr	r3, [sp, #4]
 8007e28:	07db      	lsls	r3, r3, #31
 8007e2a:	d40f      	bmi.n	8007e4c <_dtoa_r+0x6e4>
 8007e2c:	4651      	mov	r1, sl
 8007e2e:	4620      	mov	r0, r4
 8007e30:	f000 fd72 	bl	8008918 <_Bfree>
 8007e34:	2300      	movs	r3, #0
 8007e36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007e38:	702b      	strb	r3, [r5, #0]
 8007e3a:	f10b 0301 	add.w	r3, fp, #1
 8007e3e:	6013      	str	r3, [r2, #0]
 8007e40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	f43f ace2 	beq.w	800780c <_dtoa_r+0xa4>
 8007e48:	601d      	str	r5, [r3, #0]
 8007e4a:	e4df      	b.n	800780c <_dtoa_r+0xa4>
 8007e4c:	465f      	mov	r7, fp
 8007e4e:	462b      	mov	r3, r5
 8007e50:	461d      	mov	r5, r3
 8007e52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e56:	2a39      	cmp	r2, #57	; 0x39
 8007e58:	d106      	bne.n	8007e68 <_dtoa_r+0x700>
 8007e5a:	9a00      	ldr	r2, [sp, #0]
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d1f7      	bne.n	8007e50 <_dtoa_r+0x6e8>
 8007e60:	9900      	ldr	r1, [sp, #0]
 8007e62:	2230      	movs	r2, #48	; 0x30
 8007e64:	3701      	adds	r7, #1
 8007e66:	700a      	strb	r2, [r1, #0]
 8007e68:	781a      	ldrb	r2, [r3, #0]
 8007e6a:	3201      	adds	r2, #1
 8007e6c:	701a      	strb	r2, [r3, #0]
 8007e6e:	e790      	b.n	8007d92 <_dtoa_r+0x62a>
 8007e70:	4ba3      	ldr	r3, [pc, #652]	; (8008100 <_dtoa_r+0x998>)
 8007e72:	2200      	movs	r2, #0
 8007e74:	f7f8 fbc0 	bl	80005f8 <__aeabi_dmul>
 8007e78:	2200      	movs	r2, #0
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	4606      	mov	r6, r0
 8007e7e:	460f      	mov	r7, r1
 8007e80:	f7f8 fe22 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e84:	2800      	cmp	r0, #0
 8007e86:	d09e      	beq.n	8007dc6 <_dtoa_r+0x65e>
 8007e88:	e7d0      	b.n	8007e2c <_dtoa_r+0x6c4>
 8007e8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e8c:	2a00      	cmp	r2, #0
 8007e8e:	f000 80ca 	beq.w	8008026 <_dtoa_r+0x8be>
 8007e92:	9a07      	ldr	r2, [sp, #28]
 8007e94:	2a01      	cmp	r2, #1
 8007e96:	f300 80ad 	bgt.w	8007ff4 <_dtoa_r+0x88c>
 8007e9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e9c:	2a00      	cmp	r2, #0
 8007e9e:	f000 80a5 	beq.w	8007fec <_dtoa_r+0x884>
 8007ea2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007ea6:	9e08      	ldr	r6, [sp, #32]
 8007ea8:	9d05      	ldr	r5, [sp, #20]
 8007eaa:	9a05      	ldr	r2, [sp, #20]
 8007eac:	441a      	add	r2, r3
 8007eae:	9205      	str	r2, [sp, #20]
 8007eb0:	9a06      	ldr	r2, [sp, #24]
 8007eb2:	2101      	movs	r1, #1
 8007eb4:	441a      	add	r2, r3
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	9206      	str	r2, [sp, #24]
 8007eba:	f000 fde3 	bl	8008a84 <__i2b>
 8007ebe:	4607      	mov	r7, r0
 8007ec0:	b165      	cbz	r5, 8007edc <_dtoa_r+0x774>
 8007ec2:	9b06      	ldr	r3, [sp, #24]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	dd09      	ble.n	8007edc <_dtoa_r+0x774>
 8007ec8:	42ab      	cmp	r3, r5
 8007eca:	9a05      	ldr	r2, [sp, #20]
 8007ecc:	bfa8      	it	ge
 8007ece:	462b      	movge	r3, r5
 8007ed0:	1ad2      	subs	r2, r2, r3
 8007ed2:	9205      	str	r2, [sp, #20]
 8007ed4:	9a06      	ldr	r2, [sp, #24]
 8007ed6:	1aed      	subs	r5, r5, r3
 8007ed8:	1ad3      	subs	r3, r2, r3
 8007eda:	9306      	str	r3, [sp, #24]
 8007edc:	9b08      	ldr	r3, [sp, #32]
 8007ede:	b1f3      	cbz	r3, 8007f1e <_dtoa_r+0x7b6>
 8007ee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	f000 80a3 	beq.w	800802e <_dtoa_r+0x8c6>
 8007ee8:	2e00      	cmp	r6, #0
 8007eea:	dd10      	ble.n	8007f0e <_dtoa_r+0x7a6>
 8007eec:	4639      	mov	r1, r7
 8007eee:	4632      	mov	r2, r6
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	f000 fe87 	bl	8008c04 <__pow5mult>
 8007ef6:	4652      	mov	r2, sl
 8007ef8:	4601      	mov	r1, r0
 8007efa:	4607      	mov	r7, r0
 8007efc:	4620      	mov	r0, r4
 8007efe:	f000 fdd7 	bl	8008ab0 <__multiply>
 8007f02:	4651      	mov	r1, sl
 8007f04:	4680      	mov	r8, r0
 8007f06:	4620      	mov	r0, r4
 8007f08:	f000 fd06 	bl	8008918 <_Bfree>
 8007f0c:	46c2      	mov	sl, r8
 8007f0e:	9b08      	ldr	r3, [sp, #32]
 8007f10:	1b9a      	subs	r2, r3, r6
 8007f12:	d004      	beq.n	8007f1e <_dtoa_r+0x7b6>
 8007f14:	4651      	mov	r1, sl
 8007f16:	4620      	mov	r0, r4
 8007f18:	f000 fe74 	bl	8008c04 <__pow5mult>
 8007f1c:	4682      	mov	sl, r0
 8007f1e:	2101      	movs	r1, #1
 8007f20:	4620      	mov	r0, r4
 8007f22:	f000 fdaf 	bl	8008a84 <__i2b>
 8007f26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	4606      	mov	r6, r0
 8007f2c:	f340 8081 	ble.w	8008032 <_dtoa_r+0x8ca>
 8007f30:	461a      	mov	r2, r3
 8007f32:	4601      	mov	r1, r0
 8007f34:	4620      	mov	r0, r4
 8007f36:	f000 fe65 	bl	8008c04 <__pow5mult>
 8007f3a:	9b07      	ldr	r3, [sp, #28]
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	4606      	mov	r6, r0
 8007f40:	dd7a      	ble.n	8008038 <_dtoa_r+0x8d0>
 8007f42:	f04f 0800 	mov.w	r8, #0
 8007f46:	6933      	ldr	r3, [r6, #16]
 8007f48:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007f4c:	6918      	ldr	r0, [r3, #16]
 8007f4e:	f000 fd4b 	bl	80089e8 <__hi0bits>
 8007f52:	f1c0 0020 	rsb	r0, r0, #32
 8007f56:	9b06      	ldr	r3, [sp, #24]
 8007f58:	4418      	add	r0, r3
 8007f5a:	f010 001f 	ands.w	r0, r0, #31
 8007f5e:	f000 8094 	beq.w	800808a <_dtoa_r+0x922>
 8007f62:	f1c0 0320 	rsb	r3, r0, #32
 8007f66:	2b04      	cmp	r3, #4
 8007f68:	f340 8085 	ble.w	8008076 <_dtoa_r+0x90e>
 8007f6c:	9b05      	ldr	r3, [sp, #20]
 8007f6e:	f1c0 001c 	rsb	r0, r0, #28
 8007f72:	4403      	add	r3, r0
 8007f74:	9305      	str	r3, [sp, #20]
 8007f76:	9b06      	ldr	r3, [sp, #24]
 8007f78:	4403      	add	r3, r0
 8007f7a:	4405      	add	r5, r0
 8007f7c:	9306      	str	r3, [sp, #24]
 8007f7e:	9b05      	ldr	r3, [sp, #20]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	dd05      	ble.n	8007f90 <_dtoa_r+0x828>
 8007f84:	4651      	mov	r1, sl
 8007f86:	461a      	mov	r2, r3
 8007f88:	4620      	mov	r0, r4
 8007f8a:	f000 fe95 	bl	8008cb8 <__lshift>
 8007f8e:	4682      	mov	sl, r0
 8007f90:	9b06      	ldr	r3, [sp, #24]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	dd05      	ble.n	8007fa2 <_dtoa_r+0x83a>
 8007f96:	4631      	mov	r1, r6
 8007f98:	461a      	mov	r2, r3
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	f000 fe8c 	bl	8008cb8 <__lshift>
 8007fa0:	4606      	mov	r6, r0
 8007fa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d072      	beq.n	800808e <_dtoa_r+0x926>
 8007fa8:	4631      	mov	r1, r6
 8007faa:	4650      	mov	r0, sl
 8007fac:	f000 fef0 	bl	8008d90 <__mcmp>
 8007fb0:	2800      	cmp	r0, #0
 8007fb2:	da6c      	bge.n	800808e <_dtoa_r+0x926>
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	4651      	mov	r1, sl
 8007fb8:	220a      	movs	r2, #10
 8007fba:	4620      	mov	r0, r4
 8007fbc:	f000 fcce 	bl	800895c <__multadd>
 8007fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fc2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007fc6:	4682      	mov	sl, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	f000 81b0 	beq.w	800832e <_dtoa_r+0xbc6>
 8007fce:	2300      	movs	r3, #0
 8007fd0:	4639      	mov	r1, r7
 8007fd2:	220a      	movs	r2, #10
 8007fd4:	4620      	mov	r0, r4
 8007fd6:	f000 fcc1 	bl	800895c <__multadd>
 8007fda:	9b01      	ldr	r3, [sp, #4]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	4607      	mov	r7, r0
 8007fe0:	f300 8096 	bgt.w	8008110 <_dtoa_r+0x9a8>
 8007fe4:	9b07      	ldr	r3, [sp, #28]
 8007fe6:	2b02      	cmp	r3, #2
 8007fe8:	dc59      	bgt.n	800809e <_dtoa_r+0x936>
 8007fea:	e091      	b.n	8008110 <_dtoa_r+0x9a8>
 8007fec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007fee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007ff2:	e758      	b.n	8007ea6 <_dtoa_r+0x73e>
 8007ff4:	9b04      	ldr	r3, [sp, #16]
 8007ff6:	1e5e      	subs	r6, r3, #1
 8007ff8:	9b08      	ldr	r3, [sp, #32]
 8007ffa:	42b3      	cmp	r3, r6
 8007ffc:	bfbf      	itttt	lt
 8007ffe:	9b08      	ldrlt	r3, [sp, #32]
 8008000:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008002:	9608      	strlt	r6, [sp, #32]
 8008004:	1af3      	sublt	r3, r6, r3
 8008006:	bfb4      	ite	lt
 8008008:	18d2      	addlt	r2, r2, r3
 800800a:	1b9e      	subge	r6, r3, r6
 800800c:	9b04      	ldr	r3, [sp, #16]
 800800e:	bfbc      	itt	lt
 8008010:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008012:	2600      	movlt	r6, #0
 8008014:	2b00      	cmp	r3, #0
 8008016:	bfb7      	itett	lt
 8008018:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800801c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008020:	1a9d      	sublt	r5, r3, r2
 8008022:	2300      	movlt	r3, #0
 8008024:	e741      	b.n	8007eaa <_dtoa_r+0x742>
 8008026:	9e08      	ldr	r6, [sp, #32]
 8008028:	9d05      	ldr	r5, [sp, #20]
 800802a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800802c:	e748      	b.n	8007ec0 <_dtoa_r+0x758>
 800802e:	9a08      	ldr	r2, [sp, #32]
 8008030:	e770      	b.n	8007f14 <_dtoa_r+0x7ac>
 8008032:	9b07      	ldr	r3, [sp, #28]
 8008034:	2b01      	cmp	r3, #1
 8008036:	dc19      	bgt.n	800806c <_dtoa_r+0x904>
 8008038:	9b02      	ldr	r3, [sp, #8]
 800803a:	b9bb      	cbnz	r3, 800806c <_dtoa_r+0x904>
 800803c:	9b03      	ldr	r3, [sp, #12]
 800803e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008042:	b99b      	cbnz	r3, 800806c <_dtoa_r+0x904>
 8008044:	9b03      	ldr	r3, [sp, #12]
 8008046:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800804a:	0d1b      	lsrs	r3, r3, #20
 800804c:	051b      	lsls	r3, r3, #20
 800804e:	b183      	cbz	r3, 8008072 <_dtoa_r+0x90a>
 8008050:	9b05      	ldr	r3, [sp, #20]
 8008052:	3301      	adds	r3, #1
 8008054:	9305      	str	r3, [sp, #20]
 8008056:	9b06      	ldr	r3, [sp, #24]
 8008058:	3301      	adds	r3, #1
 800805a:	9306      	str	r3, [sp, #24]
 800805c:	f04f 0801 	mov.w	r8, #1
 8008060:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008062:	2b00      	cmp	r3, #0
 8008064:	f47f af6f 	bne.w	8007f46 <_dtoa_r+0x7de>
 8008068:	2001      	movs	r0, #1
 800806a:	e774      	b.n	8007f56 <_dtoa_r+0x7ee>
 800806c:	f04f 0800 	mov.w	r8, #0
 8008070:	e7f6      	b.n	8008060 <_dtoa_r+0x8f8>
 8008072:	4698      	mov	r8, r3
 8008074:	e7f4      	b.n	8008060 <_dtoa_r+0x8f8>
 8008076:	d082      	beq.n	8007f7e <_dtoa_r+0x816>
 8008078:	9a05      	ldr	r2, [sp, #20]
 800807a:	331c      	adds	r3, #28
 800807c:	441a      	add	r2, r3
 800807e:	9205      	str	r2, [sp, #20]
 8008080:	9a06      	ldr	r2, [sp, #24]
 8008082:	441a      	add	r2, r3
 8008084:	441d      	add	r5, r3
 8008086:	9206      	str	r2, [sp, #24]
 8008088:	e779      	b.n	8007f7e <_dtoa_r+0x816>
 800808a:	4603      	mov	r3, r0
 800808c:	e7f4      	b.n	8008078 <_dtoa_r+0x910>
 800808e:	9b04      	ldr	r3, [sp, #16]
 8008090:	2b00      	cmp	r3, #0
 8008092:	dc37      	bgt.n	8008104 <_dtoa_r+0x99c>
 8008094:	9b07      	ldr	r3, [sp, #28]
 8008096:	2b02      	cmp	r3, #2
 8008098:	dd34      	ble.n	8008104 <_dtoa_r+0x99c>
 800809a:	9b04      	ldr	r3, [sp, #16]
 800809c:	9301      	str	r3, [sp, #4]
 800809e:	9b01      	ldr	r3, [sp, #4]
 80080a0:	b963      	cbnz	r3, 80080bc <_dtoa_r+0x954>
 80080a2:	4631      	mov	r1, r6
 80080a4:	2205      	movs	r2, #5
 80080a6:	4620      	mov	r0, r4
 80080a8:	f000 fc58 	bl	800895c <__multadd>
 80080ac:	4601      	mov	r1, r0
 80080ae:	4606      	mov	r6, r0
 80080b0:	4650      	mov	r0, sl
 80080b2:	f000 fe6d 	bl	8008d90 <__mcmp>
 80080b6:	2800      	cmp	r0, #0
 80080b8:	f73f adbb 	bgt.w	8007c32 <_dtoa_r+0x4ca>
 80080bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080be:	9d00      	ldr	r5, [sp, #0]
 80080c0:	ea6f 0b03 	mvn.w	fp, r3
 80080c4:	f04f 0800 	mov.w	r8, #0
 80080c8:	4631      	mov	r1, r6
 80080ca:	4620      	mov	r0, r4
 80080cc:	f000 fc24 	bl	8008918 <_Bfree>
 80080d0:	2f00      	cmp	r7, #0
 80080d2:	f43f aeab 	beq.w	8007e2c <_dtoa_r+0x6c4>
 80080d6:	f1b8 0f00 	cmp.w	r8, #0
 80080da:	d005      	beq.n	80080e8 <_dtoa_r+0x980>
 80080dc:	45b8      	cmp	r8, r7
 80080de:	d003      	beq.n	80080e8 <_dtoa_r+0x980>
 80080e0:	4641      	mov	r1, r8
 80080e2:	4620      	mov	r0, r4
 80080e4:	f000 fc18 	bl	8008918 <_Bfree>
 80080e8:	4639      	mov	r1, r7
 80080ea:	4620      	mov	r0, r4
 80080ec:	f000 fc14 	bl	8008918 <_Bfree>
 80080f0:	e69c      	b.n	8007e2c <_dtoa_r+0x6c4>
 80080f2:	2600      	movs	r6, #0
 80080f4:	4637      	mov	r7, r6
 80080f6:	e7e1      	b.n	80080bc <_dtoa_r+0x954>
 80080f8:	46bb      	mov	fp, r7
 80080fa:	4637      	mov	r7, r6
 80080fc:	e599      	b.n	8007c32 <_dtoa_r+0x4ca>
 80080fe:	bf00      	nop
 8008100:	40240000 	.word	0x40240000
 8008104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008106:	2b00      	cmp	r3, #0
 8008108:	f000 80c8 	beq.w	800829c <_dtoa_r+0xb34>
 800810c:	9b04      	ldr	r3, [sp, #16]
 800810e:	9301      	str	r3, [sp, #4]
 8008110:	2d00      	cmp	r5, #0
 8008112:	dd05      	ble.n	8008120 <_dtoa_r+0x9b8>
 8008114:	4639      	mov	r1, r7
 8008116:	462a      	mov	r2, r5
 8008118:	4620      	mov	r0, r4
 800811a:	f000 fdcd 	bl	8008cb8 <__lshift>
 800811e:	4607      	mov	r7, r0
 8008120:	f1b8 0f00 	cmp.w	r8, #0
 8008124:	d05b      	beq.n	80081de <_dtoa_r+0xa76>
 8008126:	6879      	ldr	r1, [r7, #4]
 8008128:	4620      	mov	r0, r4
 800812a:	f000 fbb5 	bl	8008898 <_Balloc>
 800812e:	4605      	mov	r5, r0
 8008130:	b928      	cbnz	r0, 800813e <_dtoa_r+0x9d6>
 8008132:	4b83      	ldr	r3, [pc, #524]	; (8008340 <_dtoa_r+0xbd8>)
 8008134:	4602      	mov	r2, r0
 8008136:	f240 21ef 	movw	r1, #751	; 0x2ef
 800813a:	f7ff bb2e 	b.w	800779a <_dtoa_r+0x32>
 800813e:	693a      	ldr	r2, [r7, #16]
 8008140:	3202      	adds	r2, #2
 8008142:	0092      	lsls	r2, r2, #2
 8008144:	f107 010c 	add.w	r1, r7, #12
 8008148:	300c      	adds	r0, #12
 800814a:	f001 f8d3 	bl	80092f4 <memcpy>
 800814e:	2201      	movs	r2, #1
 8008150:	4629      	mov	r1, r5
 8008152:	4620      	mov	r0, r4
 8008154:	f000 fdb0 	bl	8008cb8 <__lshift>
 8008158:	9b00      	ldr	r3, [sp, #0]
 800815a:	3301      	adds	r3, #1
 800815c:	9304      	str	r3, [sp, #16]
 800815e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008162:	4413      	add	r3, r2
 8008164:	9308      	str	r3, [sp, #32]
 8008166:	9b02      	ldr	r3, [sp, #8]
 8008168:	f003 0301 	and.w	r3, r3, #1
 800816c:	46b8      	mov	r8, r7
 800816e:	9306      	str	r3, [sp, #24]
 8008170:	4607      	mov	r7, r0
 8008172:	9b04      	ldr	r3, [sp, #16]
 8008174:	4631      	mov	r1, r6
 8008176:	3b01      	subs	r3, #1
 8008178:	4650      	mov	r0, sl
 800817a:	9301      	str	r3, [sp, #4]
 800817c:	f7ff fa6b 	bl	8007656 <quorem>
 8008180:	4641      	mov	r1, r8
 8008182:	9002      	str	r0, [sp, #8]
 8008184:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008188:	4650      	mov	r0, sl
 800818a:	f000 fe01 	bl	8008d90 <__mcmp>
 800818e:	463a      	mov	r2, r7
 8008190:	9005      	str	r0, [sp, #20]
 8008192:	4631      	mov	r1, r6
 8008194:	4620      	mov	r0, r4
 8008196:	f000 fe17 	bl	8008dc8 <__mdiff>
 800819a:	68c2      	ldr	r2, [r0, #12]
 800819c:	4605      	mov	r5, r0
 800819e:	bb02      	cbnz	r2, 80081e2 <_dtoa_r+0xa7a>
 80081a0:	4601      	mov	r1, r0
 80081a2:	4650      	mov	r0, sl
 80081a4:	f000 fdf4 	bl	8008d90 <__mcmp>
 80081a8:	4602      	mov	r2, r0
 80081aa:	4629      	mov	r1, r5
 80081ac:	4620      	mov	r0, r4
 80081ae:	9209      	str	r2, [sp, #36]	; 0x24
 80081b0:	f000 fbb2 	bl	8008918 <_Bfree>
 80081b4:	9b07      	ldr	r3, [sp, #28]
 80081b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081b8:	9d04      	ldr	r5, [sp, #16]
 80081ba:	ea43 0102 	orr.w	r1, r3, r2
 80081be:	9b06      	ldr	r3, [sp, #24]
 80081c0:	4319      	orrs	r1, r3
 80081c2:	d110      	bne.n	80081e6 <_dtoa_r+0xa7e>
 80081c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80081c8:	d029      	beq.n	800821e <_dtoa_r+0xab6>
 80081ca:	9b05      	ldr	r3, [sp, #20]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	dd02      	ble.n	80081d6 <_dtoa_r+0xa6e>
 80081d0:	9b02      	ldr	r3, [sp, #8]
 80081d2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80081d6:	9b01      	ldr	r3, [sp, #4]
 80081d8:	f883 9000 	strb.w	r9, [r3]
 80081dc:	e774      	b.n	80080c8 <_dtoa_r+0x960>
 80081de:	4638      	mov	r0, r7
 80081e0:	e7ba      	b.n	8008158 <_dtoa_r+0x9f0>
 80081e2:	2201      	movs	r2, #1
 80081e4:	e7e1      	b.n	80081aa <_dtoa_r+0xa42>
 80081e6:	9b05      	ldr	r3, [sp, #20]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	db04      	blt.n	80081f6 <_dtoa_r+0xa8e>
 80081ec:	9907      	ldr	r1, [sp, #28]
 80081ee:	430b      	orrs	r3, r1
 80081f0:	9906      	ldr	r1, [sp, #24]
 80081f2:	430b      	orrs	r3, r1
 80081f4:	d120      	bne.n	8008238 <_dtoa_r+0xad0>
 80081f6:	2a00      	cmp	r2, #0
 80081f8:	dded      	ble.n	80081d6 <_dtoa_r+0xa6e>
 80081fa:	4651      	mov	r1, sl
 80081fc:	2201      	movs	r2, #1
 80081fe:	4620      	mov	r0, r4
 8008200:	f000 fd5a 	bl	8008cb8 <__lshift>
 8008204:	4631      	mov	r1, r6
 8008206:	4682      	mov	sl, r0
 8008208:	f000 fdc2 	bl	8008d90 <__mcmp>
 800820c:	2800      	cmp	r0, #0
 800820e:	dc03      	bgt.n	8008218 <_dtoa_r+0xab0>
 8008210:	d1e1      	bne.n	80081d6 <_dtoa_r+0xa6e>
 8008212:	f019 0f01 	tst.w	r9, #1
 8008216:	d0de      	beq.n	80081d6 <_dtoa_r+0xa6e>
 8008218:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800821c:	d1d8      	bne.n	80081d0 <_dtoa_r+0xa68>
 800821e:	9a01      	ldr	r2, [sp, #4]
 8008220:	2339      	movs	r3, #57	; 0x39
 8008222:	7013      	strb	r3, [r2, #0]
 8008224:	462b      	mov	r3, r5
 8008226:	461d      	mov	r5, r3
 8008228:	3b01      	subs	r3, #1
 800822a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800822e:	2a39      	cmp	r2, #57	; 0x39
 8008230:	d06c      	beq.n	800830c <_dtoa_r+0xba4>
 8008232:	3201      	adds	r2, #1
 8008234:	701a      	strb	r2, [r3, #0]
 8008236:	e747      	b.n	80080c8 <_dtoa_r+0x960>
 8008238:	2a00      	cmp	r2, #0
 800823a:	dd07      	ble.n	800824c <_dtoa_r+0xae4>
 800823c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008240:	d0ed      	beq.n	800821e <_dtoa_r+0xab6>
 8008242:	9a01      	ldr	r2, [sp, #4]
 8008244:	f109 0301 	add.w	r3, r9, #1
 8008248:	7013      	strb	r3, [r2, #0]
 800824a:	e73d      	b.n	80080c8 <_dtoa_r+0x960>
 800824c:	9b04      	ldr	r3, [sp, #16]
 800824e:	9a08      	ldr	r2, [sp, #32]
 8008250:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008254:	4293      	cmp	r3, r2
 8008256:	d043      	beq.n	80082e0 <_dtoa_r+0xb78>
 8008258:	4651      	mov	r1, sl
 800825a:	2300      	movs	r3, #0
 800825c:	220a      	movs	r2, #10
 800825e:	4620      	mov	r0, r4
 8008260:	f000 fb7c 	bl	800895c <__multadd>
 8008264:	45b8      	cmp	r8, r7
 8008266:	4682      	mov	sl, r0
 8008268:	f04f 0300 	mov.w	r3, #0
 800826c:	f04f 020a 	mov.w	r2, #10
 8008270:	4641      	mov	r1, r8
 8008272:	4620      	mov	r0, r4
 8008274:	d107      	bne.n	8008286 <_dtoa_r+0xb1e>
 8008276:	f000 fb71 	bl	800895c <__multadd>
 800827a:	4680      	mov	r8, r0
 800827c:	4607      	mov	r7, r0
 800827e:	9b04      	ldr	r3, [sp, #16]
 8008280:	3301      	adds	r3, #1
 8008282:	9304      	str	r3, [sp, #16]
 8008284:	e775      	b.n	8008172 <_dtoa_r+0xa0a>
 8008286:	f000 fb69 	bl	800895c <__multadd>
 800828a:	4639      	mov	r1, r7
 800828c:	4680      	mov	r8, r0
 800828e:	2300      	movs	r3, #0
 8008290:	220a      	movs	r2, #10
 8008292:	4620      	mov	r0, r4
 8008294:	f000 fb62 	bl	800895c <__multadd>
 8008298:	4607      	mov	r7, r0
 800829a:	e7f0      	b.n	800827e <_dtoa_r+0xb16>
 800829c:	9b04      	ldr	r3, [sp, #16]
 800829e:	9301      	str	r3, [sp, #4]
 80082a0:	9d00      	ldr	r5, [sp, #0]
 80082a2:	4631      	mov	r1, r6
 80082a4:	4650      	mov	r0, sl
 80082a6:	f7ff f9d6 	bl	8007656 <quorem>
 80082aa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80082ae:	9b00      	ldr	r3, [sp, #0]
 80082b0:	f805 9b01 	strb.w	r9, [r5], #1
 80082b4:	1aea      	subs	r2, r5, r3
 80082b6:	9b01      	ldr	r3, [sp, #4]
 80082b8:	4293      	cmp	r3, r2
 80082ba:	dd07      	ble.n	80082cc <_dtoa_r+0xb64>
 80082bc:	4651      	mov	r1, sl
 80082be:	2300      	movs	r3, #0
 80082c0:	220a      	movs	r2, #10
 80082c2:	4620      	mov	r0, r4
 80082c4:	f000 fb4a 	bl	800895c <__multadd>
 80082c8:	4682      	mov	sl, r0
 80082ca:	e7ea      	b.n	80082a2 <_dtoa_r+0xb3a>
 80082cc:	9b01      	ldr	r3, [sp, #4]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	bfc8      	it	gt
 80082d2:	461d      	movgt	r5, r3
 80082d4:	9b00      	ldr	r3, [sp, #0]
 80082d6:	bfd8      	it	le
 80082d8:	2501      	movle	r5, #1
 80082da:	441d      	add	r5, r3
 80082dc:	f04f 0800 	mov.w	r8, #0
 80082e0:	4651      	mov	r1, sl
 80082e2:	2201      	movs	r2, #1
 80082e4:	4620      	mov	r0, r4
 80082e6:	f000 fce7 	bl	8008cb8 <__lshift>
 80082ea:	4631      	mov	r1, r6
 80082ec:	4682      	mov	sl, r0
 80082ee:	f000 fd4f 	bl	8008d90 <__mcmp>
 80082f2:	2800      	cmp	r0, #0
 80082f4:	dc96      	bgt.n	8008224 <_dtoa_r+0xabc>
 80082f6:	d102      	bne.n	80082fe <_dtoa_r+0xb96>
 80082f8:	f019 0f01 	tst.w	r9, #1
 80082fc:	d192      	bne.n	8008224 <_dtoa_r+0xabc>
 80082fe:	462b      	mov	r3, r5
 8008300:	461d      	mov	r5, r3
 8008302:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008306:	2a30      	cmp	r2, #48	; 0x30
 8008308:	d0fa      	beq.n	8008300 <_dtoa_r+0xb98>
 800830a:	e6dd      	b.n	80080c8 <_dtoa_r+0x960>
 800830c:	9a00      	ldr	r2, [sp, #0]
 800830e:	429a      	cmp	r2, r3
 8008310:	d189      	bne.n	8008226 <_dtoa_r+0xabe>
 8008312:	f10b 0b01 	add.w	fp, fp, #1
 8008316:	2331      	movs	r3, #49	; 0x31
 8008318:	e796      	b.n	8008248 <_dtoa_r+0xae0>
 800831a:	4b0a      	ldr	r3, [pc, #40]	; (8008344 <_dtoa_r+0xbdc>)
 800831c:	f7ff ba99 	b.w	8007852 <_dtoa_r+0xea>
 8008320:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008322:	2b00      	cmp	r3, #0
 8008324:	f47f aa6d 	bne.w	8007802 <_dtoa_r+0x9a>
 8008328:	4b07      	ldr	r3, [pc, #28]	; (8008348 <_dtoa_r+0xbe0>)
 800832a:	f7ff ba92 	b.w	8007852 <_dtoa_r+0xea>
 800832e:	9b01      	ldr	r3, [sp, #4]
 8008330:	2b00      	cmp	r3, #0
 8008332:	dcb5      	bgt.n	80082a0 <_dtoa_r+0xb38>
 8008334:	9b07      	ldr	r3, [sp, #28]
 8008336:	2b02      	cmp	r3, #2
 8008338:	f73f aeb1 	bgt.w	800809e <_dtoa_r+0x936>
 800833c:	e7b0      	b.n	80082a0 <_dtoa_r+0xb38>
 800833e:	bf00      	nop
 8008340:	08009988 	.word	0x08009988
 8008344:	080098e8 	.word	0x080098e8
 8008348:	0800990c 	.word	0x0800990c

0800834c <__sfputc_r>:
 800834c:	6893      	ldr	r3, [r2, #8]
 800834e:	3b01      	subs	r3, #1
 8008350:	2b00      	cmp	r3, #0
 8008352:	b410      	push	{r4}
 8008354:	6093      	str	r3, [r2, #8]
 8008356:	da08      	bge.n	800836a <__sfputc_r+0x1e>
 8008358:	6994      	ldr	r4, [r2, #24]
 800835a:	42a3      	cmp	r3, r4
 800835c:	db01      	blt.n	8008362 <__sfputc_r+0x16>
 800835e:	290a      	cmp	r1, #10
 8008360:	d103      	bne.n	800836a <__sfputc_r+0x1e>
 8008362:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008366:	f000 be56 	b.w	8009016 <__swbuf_r>
 800836a:	6813      	ldr	r3, [r2, #0]
 800836c:	1c58      	adds	r0, r3, #1
 800836e:	6010      	str	r0, [r2, #0]
 8008370:	7019      	strb	r1, [r3, #0]
 8008372:	4608      	mov	r0, r1
 8008374:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008378:	4770      	bx	lr

0800837a <__sfputs_r>:
 800837a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800837c:	4606      	mov	r6, r0
 800837e:	460f      	mov	r7, r1
 8008380:	4614      	mov	r4, r2
 8008382:	18d5      	adds	r5, r2, r3
 8008384:	42ac      	cmp	r4, r5
 8008386:	d101      	bne.n	800838c <__sfputs_r+0x12>
 8008388:	2000      	movs	r0, #0
 800838a:	e007      	b.n	800839c <__sfputs_r+0x22>
 800838c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008390:	463a      	mov	r2, r7
 8008392:	4630      	mov	r0, r6
 8008394:	f7ff ffda 	bl	800834c <__sfputc_r>
 8008398:	1c43      	adds	r3, r0, #1
 800839a:	d1f3      	bne.n	8008384 <__sfputs_r+0xa>
 800839c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080083a0 <_vfiprintf_r>:
 80083a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083a4:	460d      	mov	r5, r1
 80083a6:	b09d      	sub	sp, #116	; 0x74
 80083a8:	4614      	mov	r4, r2
 80083aa:	4698      	mov	r8, r3
 80083ac:	4606      	mov	r6, r0
 80083ae:	b118      	cbz	r0, 80083b8 <_vfiprintf_r+0x18>
 80083b0:	6a03      	ldr	r3, [r0, #32]
 80083b2:	b90b      	cbnz	r3, 80083b8 <_vfiprintf_r+0x18>
 80083b4:	f7ff f8ce 	bl	8007554 <__sinit>
 80083b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083ba:	07d9      	lsls	r1, r3, #31
 80083bc:	d405      	bmi.n	80083ca <_vfiprintf_r+0x2a>
 80083be:	89ab      	ldrh	r3, [r5, #12]
 80083c0:	059a      	lsls	r2, r3, #22
 80083c2:	d402      	bmi.n	80083ca <_vfiprintf_r+0x2a>
 80083c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083c6:	f7ff f944 	bl	8007652 <__retarget_lock_acquire_recursive>
 80083ca:	89ab      	ldrh	r3, [r5, #12]
 80083cc:	071b      	lsls	r3, r3, #28
 80083ce:	d501      	bpl.n	80083d4 <_vfiprintf_r+0x34>
 80083d0:	692b      	ldr	r3, [r5, #16]
 80083d2:	b99b      	cbnz	r3, 80083fc <_vfiprintf_r+0x5c>
 80083d4:	4629      	mov	r1, r5
 80083d6:	4630      	mov	r0, r6
 80083d8:	f000 fe5a 	bl	8009090 <__swsetup_r>
 80083dc:	b170      	cbz	r0, 80083fc <_vfiprintf_r+0x5c>
 80083de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083e0:	07dc      	lsls	r4, r3, #31
 80083e2:	d504      	bpl.n	80083ee <_vfiprintf_r+0x4e>
 80083e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083e8:	b01d      	add	sp, #116	; 0x74
 80083ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083ee:	89ab      	ldrh	r3, [r5, #12]
 80083f0:	0598      	lsls	r0, r3, #22
 80083f2:	d4f7      	bmi.n	80083e4 <_vfiprintf_r+0x44>
 80083f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083f6:	f7ff f92d 	bl	8007654 <__retarget_lock_release_recursive>
 80083fa:	e7f3      	b.n	80083e4 <_vfiprintf_r+0x44>
 80083fc:	2300      	movs	r3, #0
 80083fe:	9309      	str	r3, [sp, #36]	; 0x24
 8008400:	2320      	movs	r3, #32
 8008402:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008406:	f8cd 800c 	str.w	r8, [sp, #12]
 800840a:	2330      	movs	r3, #48	; 0x30
 800840c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80085c0 <_vfiprintf_r+0x220>
 8008410:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008414:	f04f 0901 	mov.w	r9, #1
 8008418:	4623      	mov	r3, r4
 800841a:	469a      	mov	sl, r3
 800841c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008420:	b10a      	cbz	r2, 8008426 <_vfiprintf_r+0x86>
 8008422:	2a25      	cmp	r2, #37	; 0x25
 8008424:	d1f9      	bne.n	800841a <_vfiprintf_r+0x7a>
 8008426:	ebba 0b04 	subs.w	fp, sl, r4
 800842a:	d00b      	beq.n	8008444 <_vfiprintf_r+0xa4>
 800842c:	465b      	mov	r3, fp
 800842e:	4622      	mov	r2, r4
 8008430:	4629      	mov	r1, r5
 8008432:	4630      	mov	r0, r6
 8008434:	f7ff ffa1 	bl	800837a <__sfputs_r>
 8008438:	3001      	adds	r0, #1
 800843a:	f000 80a9 	beq.w	8008590 <_vfiprintf_r+0x1f0>
 800843e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008440:	445a      	add	r2, fp
 8008442:	9209      	str	r2, [sp, #36]	; 0x24
 8008444:	f89a 3000 	ldrb.w	r3, [sl]
 8008448:	2b00      	cmp	r3, #0
 800844a:	f000 80a1 	beq.w	8008590 <_vfiprintf_r+0x1f0>
 800844e:	2300      	movs	r3, #0
 8008450:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008454:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008458:	f10a 0a01 	add.w	sl, sl, #1
 800845c:	9304      	str	r3, [sp, #16]
 800845e:	9307      	str	r3, [sp, #28]
 8008460:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008464:	931a      	str	r3, [sp, #104]	; 0x68
 8008466:	4654      	mov	r4, sl
 8008468:	2205      	movs	r2, #5
 800846a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800846e:	4854      	ldr	r0, [pc, #336]	; (80085c0 <_vfiprintf_r+0x220>)
 8008470:	f7f7 feae 	bl	80001d0 <memchr>
 8008474:	9a04      	ldr	r2, [sp, #16]
 8008476:	b9d8      	cbnz	r0, 80084b0 <_vfiprintf_r+0x110>
 8008478:	06d1      	lsls	r1, r2, #27
 800847a:	bf44      	itt	mi
 800847c:	2320      	movmi	r3, #32
 800847e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008482:	0713      	lsls	r3, r2, #28
 8008484:	bf44      	itt	mi
 8008486:	232b      	movmi	r3, #43	; 0x2b
 8008488:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800848c:	f89a 3000 	ldrb.w	r3, [sl]
 8008490:	2b2a      	cmp	r3, #42	; 0x2a
 8008492:	d015      	beq.n	80084c0 <_vfiprintf_r+0x120>
 8008494:	9a07      	ldr	r2, [sp, #28]
 8008496:	4654      	mov	r4, sl
 8008498:	2000      	movs	r0, #0
 800849a:	f04f 0c0a 	mov.w	ip, #10
 800849e:	4621      	mov	r1, r4
 80084a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084a4:	3b30      	subs	r3, #48	; 0x30
 80084a6:	2b09      	cmp	r3, #9
 80084a8:	d94d      	bls.n	8008546 <_vfiprintf_r+0x1a6>
 80084aa:	b1b0      	cbz	r0, 80084da <_vfiprintf_r+0x13a>
 80084ac:	9207      	str	r2, [sp, #28]
 80084ae:	e014      	b.n	80084da <_vfiprintf_r+0x13a>
 80084b0:	eba0 0308 	sub.w	r3, r0, r8
 80084b4:	fa09 f303 	lsl.w	r3, r9, r3
 80084b8:	4313      	orrs	r3, r2
 80084ba:	9304      	str	r3, [sp, #16]
 80084bc:	46a2      	mov	sl, r4
 80084be:	e7d2      	b.n	8008466 <_vfiprintf_r+0xc6>
 80084c0:	9b03      	ldr	r3, [sp, #12]
 80084c2:	1d19      	adds	r1, r3, #4
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	9103      	str	r1, [sp, #12]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	bfbb      	ittet	lt
 80084cc:	425b      	neglt	r3, r3
 80084ce:	f042 0202 	orrlt.w	r2, r2, #2
 80084d2:	9307      	strge	r3, [sp, #28]
 80084d4:	9307      	strlt	r3, [sp, #28]
 80084d6:	bfb8      	it	lt
 80084d8:	9204      	strlt	r2, [sp, #16]
 80084da:	7823      	ldrb	r3, [r4, #0]
 80084dc:	2b2e      	cmp	r3, #46	; 0x2e
 80084de:	d10c      	bne.n	80084fa <_vfiprintf_r+0x15a>
 80084e0:	7863      	ldrb	r3, [r4, #1]
 80084e2:	2b2a      	cmp	r3, #42	; 0x2a
 80084e4:	d134      	bne.n	8008550 <_vfiprintf_r+0x1b0>
 80084e6:	9b03      	ldr	r3, [sp, #12]
 80084e8:	1d1a      	adds	r2, r3, #4
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	9203      	str	r2, [sp, #12]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	bfb8      	it	lt
 80084f2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80084f6:	3402      	adds	r4, #2
 80084f8:	9305      	str	r3, [sp, #20]
 80084fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80085d0 <_vfiprintf_r+0x230>
 80084fe:	7821      	ldrb	r1, [r4, #0]
 8008500:	2203      	movs	r2, #3
 8008502:	4650      	mov	r0, sl
 8008504:	f7f7 fe64 	bl	80001d0 <memchr>
 8008508:	b138      	cbz	r0, 800851a <_vfiprintf_r+0x17a>
 800850a:	9b04      	ldr	r3, [sp, #16]
 800850c:	eba0 000a 	sub.w	r0, r0, sl
 8008510:	2240      	movs	r2, #64	; 0x40
 8008512:	4082      	lsls	r2, r0
 8008514:	4313      	orrs	r3, r2
 8008516:	3401      	adds	r4, #1
 8008518:	9304      	str	r3, [sp, #16]
 800851a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800851e:	4829      	ldr	r0, [pc, #164]	; (80085c4 <_vfiprintf_r+0x224>)
 8008520:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008524:	2206      	movs	r2, #6
 8008526:	f7f7 fe53 	bl	80001d0 <memchr>
 800852a:	2800      	cmp	r0, #0
 800852c:	d03f      	beq.n	80085ae <_vfiprintf_r+0x20e>
 800852e:	4b26      	ldr	r3, [pc, #152]	; (80085c8 <_vfiprintf_r+0x228>)
 8008530:	bb1b      	cbnz	r3, 800857a <_vfiprintf_r+0x1da>
 8008532:	9b03      	ldr	r3, [sp, #12]
 8008534:	3307      	adds	r3, #7
 8008536:	f023 0307 	bic.w	r3, r3, #7
 800853a:	3308      	adds	r3, #8
 800853c:	9303      	str	r3, [sp, #12]
 800853e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008540:	443b      	add	r3, r7
 8008542:	9309      	str	r3, [sp, #36]	; 0x24
 8008544:	e768      	b.n	8008418 <_vfiprintf_r+0x78>
 8008546:	fb0c 3202 	mla	r2, ip, r2, r3
 800854a:	460c      	mov	r4, r1
 800854c:	2001      	movs	r0, #1
 800854e:	e7a6      	b.n	800849e <_vfiprintf_r+0xfe>
 8008550:	2300      	movs	r3, #0
 8008552:	3401      	adds	r4, #1
 8008554:	9305      	str	r3, [sp, #20]
 8008556:	4619      	mov	r1, r3
 8008558:	f04f 0c0a 	mov.w	ip, #10
 800855c:	4620      	mov	r0, r4
 800855e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008562:	3a30      	subs	r2, #48	; 0x30
 8008564:	2a09      	cmp	r2, #9
 8008566:	d903      	bls.n	8008570 <_vfiprintf_r+0x1d0>
 8008568:	2b00      	cmp	r3, #0
 800856a:	d0c6      	beq.n	80084fa <_vfiprintf_r+0x15a>
 800856c:	9105      	str	r1, [sp, #20]
 800856e:	e7c4      	b.n	80084fa <_vfiprintf_r+0x15a>
 8008570:	fb0c 2101 	mla	r1, ip, r1, r2
 8008574:	4604      	mov	r4, r0
 8008576:	2301      	movs	r3, #1
 8008578:	e7f0      	b.n	800855c <_vfiprintf_r+0x1bc>
 800857a:	ab03      	add	r3, sp, #12
 800857c:	9300      	str	r3, [sp, #0]
 800857e:	462a      	mov	r2, r5
 8008580:	4b12      	ldr	r3, [pc, #72]	; (80085cc <_vfiprintf_r+0x22c>)
 8008582:	a904      	add	r1, sp, #16
 8008584:	4630      	mov	r0, r6
 8008586:	f7fe fb93 	bl	8006cb0 <_printf_float>
 800858a:	4607      	mov	r7, r0
 800858c:	1c78      	adds	r0, r7, #1
 800858e:	d1d6      	bne.n	800853e <_vfiprintf_r+0x19e>
 8008590:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008592:	07d9      	lsls	r1, r3, #31
 8008594:	d405      	bmi.n	80085a2 <_vfiprintf_r+0x202>
 8008596:	89ab      	ldrh	r3, [r5, #12]
 8008598:	059a      	lsls	r2, r3, #22
 800859a:	d402      	bmi.n	80085a2 <_vfiprintf_r+0x202>
 800859c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800859e:	f7ff f859 	bl	8007654 <__retarget_lock_release_recursive>
 80085a2:	89ab      	ldrh	r3, [r5, #12]
 80085a4:	065b      	lsls	r3, r3, #25
 80085a6:	f53f af1d 	bmi.w	80083e4 <_vfiprintf_r+0x44>
 80085aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085ac:	e71c      	b.n	80083e8 <_vfiprintf_r+0x48>
 80085ae:	ab03      	add	r3, sp, #12
 80085b0:	9300      	str	r3, [sp, #0]
 80085b2:	462a      	mov	r2, r5
 80085b4:	4b05      	ldr	r3, [pc, #20]	; (80085cc <_vfiprintf_r+0x22c>)
 80085b6:	a904      	add	r1, sp, #16
 80085b8:	4630      	mov	r0, r6
 80085ba:	f7fe fe1d 	bl	80071f8 <_printf_i>
 80085be:	e7e4      	b.n	800858a <_vfiprintf_r+0x1ea>
 80085c0:	08009999 	.word	0x08009999
 80085c4:	080099a3 	.word	0x080099a3
 80085c8:	08006cb1 	.word	0x08006cb1
 80085cc:	0800837b 	.word	0x0800837b
 80085d0:	0800999f 	.word	0x0800999f

080085d4 <malloc>:
 80085d4:	4b02      	ldr	r3, [pc, #8]	; (80085e0 <malloc+0xc>)
 80085d6:	4601      	mov	r1, r0
 80085d8:	6818      	ldr	r0, [r3, #0]
 80085da:	f000 b823 	b.w	8008624 <_malloc_r>
 80085de:	bf00      	nop
 80085e0:	20000068 	.word	0x20000068

080085e4 <sbrk_aligned>:
 80085e4:	b570      	push	{r4, r5, r6, lr}
 80085e6:	4e0e      	ldr	r6, [pc, #56]	; (8008620 <sbrk_aligned+0x3c>)
 80085e8:	460c      	mov	r4, r1
 80085ea:	6831      	ldr	r1, [r6, #0]
 80085ec:	4605      	mov	r5, r0
 80085ee:	b911      	cbnz	r1, 80085f6 <sbrk_aligned+0x12>
 80085f0:	f000 fe5e 	bl	80092b0 <_sbrk_r>
 80085f4:	6030      	str	r0, [r6, #0]
 80085f6:	4621      	mov	r1, r4
 80085f8:	4628      	mov	r0, r5
 80085fa:	f000 fe59 	bl	80092b0 <_sbrk_r>
 80085fe:	1c43      	adds	r3, r0, #1
 8008600:	d00a      	beq.n	8008618 <sbrk_aligned+0x34>
 8008602:	1cc4      	adds	r4, r0, #3
 8008604:	f024 0403 	bic.w	r4, r4, #3
 8008608:	42a0      	cmp	r0, r4
 800860a:	d007      	beq.n	800861c <sbrk_aligned+0x38>
 800860c:	1a21      	subs	r1, r4, r0
 800860e:	4628      	mov	r0, r5
 8008610:	f000 fe4e 	bl	80092b0 <_sbrk_r>
 8008614:	3001      	adds	r0, #1
 8008616:	d101      	bne.n	800861c <sbrk_aligned+0x38>
 8008618:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800861c:	4620      	mov	r0, r4
 800861e:	bd70      	pop	{r4, r5, r6, pc}
 8008620:	2000063c 	.word	0x2000063c

08008624 <_malloc_r>:
 8008624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008628:	1ccd      	adds	r5, r1, #3
 800862a:	f025 0503 	bic.w	r5, r5, #3
 800862e:	3508      	adds	r5, #8
 8008630:	2d0c      	cmp	r5, #12
 8008632:	bf38      	it	cc
 8008634:	250c      	movcc	r5, #12
 8008636:	2d00      	cmp	r5, #0
 8008638:	4607      	mov	r7, r0
 800863a:	db01      	blt.n	8008640 <_malloc_r+0x1c>
 800863c:	42a9      	cmp	r1, r5
 800863e:	d905      	bls.n	800864c <_malloc_r+0x28>
 8008640:	230c      	movs	r3, #12
 8008642:	603b      	str	r3, [r7, #0]
 8008644:	2600      	movs	r6, #0
 8008646:	4630      	mov	r0, r6
 8008648:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800864c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008720 <_malloc_r+0xfc>
 8008650:	f000 f916 	bl	8008880 <__malloc_lock>
 8008654:	f8d8 3000 	ldr.w	r3, [r8]
 8008658:	461c      	mov	r4, r3
 800865a:	bb5c      	cbnz	r4, 80086b4 <_malloc_r+0x90>
 800865c:	4629      	mov	r1, r5
 800865e:	4638      	mov	r0, r7
 8008660:	f7ff ffc0 	bl	80085e4 <sbrk_aligned>
 8008664:	1c43      	adds	r3, r0, #1
 8008666:	4604      	mov	r4, r0
 8008668:	d155      	bne.n	8008716 <_malloc_r+0xf2>
 800866a:	f8d8 4000 	ldr.w	r4, [r8]
 800866e:	4626      	mov	r6, r4
 8008670:	2e00      	cmp	r6, #0
 8008672:	d145      	bne.n	8008700 <_malloc_r+0xdc>
 8008674:	2c00      	cmp	r4, #0
 8008676:	d048      	beq.n	800870a <_malloc_r+0xe6>
 8008678:	6823      	ldr	r3, [r4, #0]
 800867a:	4631      	mov	r1, r6
 800867c:	4638      	mov	r0, r7
 800867e:	eb04 0903 	add.w	r9, r4, r3
 8008682:	f000 fe15 	bl	80092b0 <_sbrk_r>
 8008686:	4581      	cmp	r9, r0
 8008688:	d13f      	bne.n	800870a <_malloc_r+0xe6>
 800868a:	6821      	ldr	r1, [r4, #0]
 800868c:	1a6d      	subs	r5, r5, r1
 800868e:	4629      	mov	r1, r5
 8008690:	4638      	mov	r0, r7
 8008692:	f7ff ffa7 	bl	80085e4 <sbrk_aligned>
 8008696:	3001      	adds	r0, #1
 8008698:	d037      	beq.n	800870a <_malloc_r+0xe6>
 800869a:	6823      	ldr	r3, [r4, #0]
 800869c:	442b      	add	r3, r5
 800869e:	6023      	str	r3, [r4, #0]
 80086a0:	f8d8 3000 	ldr.w	r3, [r8]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d038      	beq.n	800871a <_malloc_r+0xf6>
 80086a8:	685a      	ldr	r2, [r3, #4]
 80086aa:	42a2      	cmp	r2, r4
 80086ac:	d12b      	bne.n	8008706 <_malloc_r+0xe2>
 80086ae:	2200      	movs	r2, #0
 80086b0:	605a      	str	r2, [r3, #4]
 80086b2:	e00f      	b.n	80086d4 <_malloc_r+0xb0>
 80086b4:	6822      	ldr	r2, [r4, #0]
 80086b6:	1b52      	subs	r2, r2, r5
 80086b8:	d41f      	bmi.n	80086fa <_malloc_r+0xd6>
 80086ba:	2a0b      	cmp	r2, #11
 80086bc:	d917      	bls.n	80086ee <_malloc_r+0xca>
 80086be:	1961      	adds	r1, r4, r5
 80086c0:	42a3      	cmp	r3, r4
 80086c2:	6025      	str	r5, [r4, #0]
 80086c4:	bf18      	it	ne
 80086c6:	6059      	strne	r1, [r3, #4]
 80086c8:	6863      	ldr	r3, [r4, #4]
 80086ca:	bf08      	it	eq
 80086cc:	f8c8 1000 	streq.w	r1, [r8]
 80086d0:	5162      	str	r2, [r4, r5]
 80086d2:	604b      	str	r3, [r1, #4]
 80086d4:	4638      	mov	r0, r7
 80086d6:	f104 060b 	add.w	r6, r4, #11
 80086da:	f000 f8d7 	bl	800888c <__malloc_unlock>
 80086de:	f026 0607 	bic.w	r6, r6, #7
 80086e2:	1d23      	adds	r3, r4, #4
 80086e4:	1af2      	subs	r2, r6, r3
 80086e6:	d0ae      	beq.n	8008646 <_malloc_r+0x22>
 80086e8:	1b9b      	subs	r3, r3, r6
 80086ea:	50a3      	str	r3, [r4, r2]
 80086ec:	e7ab      	b.n	8008646 <_malloc_r+0x22>
 80086ee:	42a3      	cmp	r3, r4
 80086f0:	6862      	ldr	r2, [r4, #4]
 80086f2:	d1dd      	bne.n	80086b0 <_malloc_r+0x8c>
 80086f4:	f8c8 2000 	str.w	r2, [r8]
 80086f8:	e7ec      	b.n	80086d4 <_malloc_r+0xb0>
 80086fa:	4623      	mov	r3, r4
 80086fc:	6864      	ldr	r4, [r4, #4]
 80086fe:	e7ac      	b.n	800865a <_malloc_r+0x36>
 8008700:	4634      	mov	r4, r6
 8008702:	6876      	ldr	r6, [r6, #4]
 8008704:	e7b4      	b.n	8008670 <_malloc_r+0x4c>
 8008706:	4613      	mov	r3, r2
 8008708:	e7cc      	b.n	80086a4 <_malloc_r+0x80>
 800870a:	230c      	movs	r3, #12
 800870c:	603b      	str	r3, [r7, #0]
 800870e:	4638      	mov	r0, r7
 8008710:	f000 f8bc 	bl	800888c <__malloc_unlock>
 8008714:	e797      	b.n	8008646 <_malloc_r+0x22>
 8008716:	6025      	str	r5, [r4, #0]
 8008718:	e7dc      	b.n	80086d4 <_malloc_r+0xb0>
 800871a:	605b      	str	r3, [r3, #4]
 800871c:	deff      	udf	#255	; 0xff
 800871e:	bf00      	nop
 8008720:	20000638 	.word	0x20000638

08008724 <__sflush_r>:
 8008724:	898a      	ldrh	r2, [r1, #12]
 8008726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800872a:	4605      	mov	r5, r0
 800872c:	0710      	lsls	r0, r2, #28
 800872e:	460c      	mov	r4, r1
 8008730:	d458      	bmi.n	80087e4 <__sflush_r+0xc0>
 8008732:	684b      	ldr	r3, [r1, #4]
 8008734:	2b00      	cmp	r3, #0
 8008736:	dc05      	bgt.n	8008744 <__sflush_r+0x20>
 8008738:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800873a:	2b00      	cmp	r3, #0
 800873c:	dc02      	bgt.n	8008744 <__sflush_r+0x20>
 800873e:	2000      	movs	r0, #0
 8008740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008744:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008746:	2e00      	cmp	r6, #0
 8008748:	d0f9      	beq.n	800873e <__sflush_r+0x1a>
 800874a:	2300      	movs	r3, #0
 800874c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008750:	682f      	ldr	r7, [r5, #0]
 8008752:	6a21      	ldr	r1, [r4, #32]
 8008754:	602b      	str	r3, [r5, #0]
 8008756:	d032      	beq.n	80087be <__sflush_r+0x9a>
 8008758:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800875a:	89a3      	ldrh	r3, [r4, #12]
 800875c:	075a      	lsls	r2, r3, #29
 800875e:	d505      	bpl.n	800876c <__sflush_r+0x48>
 8008760:	6863      	ldr	r3, [r4, #4]
 8008762:	1ac0      	subs	r0, r0, r3
 8008764:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008766:	b10b      	cbz	r3, 800876c <__sflush_r+0x48>
 8008768:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800876a:	1ac0      	subs	r0, r0, r3
 800876c:	2300      	movs	r3, #0
 800876e:	4602      	mov	r2, r0
 8008770:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008772:	6a21      	ldr	r1, [r4, #32]
 8008774:	4628      	mov	r0, r5
 8008776:	47b0      	blx	r6
 8008778:	1c43      	adds	r3, r0, #1
 800877a:	89a3      	ldrh	r3, [r4, #12]
 800877c:	d106      	bne.n	800878c <__sflush_r+0x68>
 800877e:	6829      	ldr	r1, [r5, #0]
 8008780:	291d      	cmp	r1, #29
 8008782:	d82b      	bhi.n	80087dc <__sflush_r+0xb8>
 8008784:	4a29      	ldr	r2, [pc, #164]	; (800882c <__sflush_r+0x108>)
 8008786:	410a      	asrs	r2, r1
 8008788:	07d6      	lsls	r6, r2, #31
 800878a:	d427      	bmi.n	80087dc <__sflush_r+0xb8>
 800878c:	2200      	movs	r2, #0
 800878e:	6062      	str	r2, [r4, #4]
 8008790:	04d9      	lsls	r1, r3, #19
 8008792:	6922      	ldr	r2, [r4, #16]
 8008794:	6022      	str	r2, [r4, #0]
 8008796:	d504      	bpl.n	80087a2 <__sflush_r+0x7e>
 8008798:	1c42      	adds	r2, r0, #1
 800879a:	d101      	bne.n	80087a0 <__sflush_r+0x7c>
 800879c:	682b      	ldr	r3, [r5, #0]
 800879e:	b903      	cbnz	r3, 80087a2 <__sflush_r+0x7e>
 80087a0:	6560      	str	r0, [r4, #84]	; 0x54
 80087a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087a4:	602f      	str	r7, [r5, #0]
 80087a6:	2900      	cmp	r1, #0
 80087a8:	d0c9      	beq.n	800873e <__sflush_r+0x1a>
 80087aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087ae:	4299      	cmp	r1, r3
 80087b0:	d002      	beq.n	80087b8 <__sflush_r+0x94>
 80087b2:	4628      	mov	r0, r5
 80087b4:	f000 fde0 	bl	8009378 <_free_r>
 80087b8:	2000      	movs	r0, #0
 80087ba:	6360      	str	r0, [r4, #52]	; 0x34
 80087bc:	e7c0      	b.n	8008740 <__sflush_r+0x1c>
 80087be:	2301      	movs	r3, #1
 80087c0:	4628      	mov	r0, r5
 80087c2:	47b0      	blx	r6
 80087c4:	1c41      	adds	r1, r0, #1
 80087c6:	d1c8      	bne.n	800875a <__sflush_r+0x36>
 80087c8:	682b      	ldr	r3, [r5, #0]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d0c5      	beq.n	800875a <__sflush_r+0x36>
 80087ce:	2b1d      	cmp	r3, #29
 80087d0:	d001      	beq.n	80087d6 <__sflush_r+0xb2>
 80087d2:	2b16      	cmp	r3, #22
 80087d4:	d101      	bne.n	80087da <__sflush_r+0xb6>
 80087d6:	602f      	str	r7, [r5, #0]
 80087d8:	e7b1      	b.n	800873e <__sflush_r+0x1a>
 80087da:	89a3      	ldrh	r3, [r4, #12]
 80087dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087e0:	81a3      	strh	r3, [r4, #12]
 80087e2:	e7ad      	b.n	8008740 <__sflush_r+0x1c>
 80087e4:	690f      	ldr	r7, [r1, #16]
 80087e6:	2f00      	cmp	r7, #0
 80087e8:	d0a9      	beq.n	800873e <__sflush_r+0x1a>
 80087ea:	0793      	lsls	r3, r2, #30
 80087ec:	680e      	ldr	r6, [r1, #0]
 80087ee:	bf08      	it	eq
 80087f0:	694b      	ldreq	r3, [r1, #20]
 80087f2:	600f      	str	r7, [r1, #0]
 80087f4:	bf18      	it	ne
 80087f6:	2300      	movne	r3, #0
 80087f8:	eba6 0807 	sub.w	r8, r6, r7
 80087fc:	608b      	str	r3, [r1, #8]
 80087fe:	f1b8 0f00 	cmp.w	r8, #0
 8008802:	dd9c      	ble.n	800873e <__sflush_r+0x1a>
 8008804:	6a21      	ldr	r1, [r4, #32]
 8008806:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008808:	4643      	mov	r3, r8
 800880a:	463a      	mov	r2, r7
 800880c:	4628      	mov	r0, r5
 800880e:	47b0      	blx	r6
 8008810:	2800      	cmp	r0, #0
 8008812:	dc06      	bgt.n	8008822 <__sflush_r+0xfe>
 8008814:	89a3      	ldrh	r3, [r4, #12]
 8008816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800881a:	81a3      	strh	r3, [r4, #12]
 800881c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008820:	e78e      	b.n	8008740 <__sflush_r+0x1c>
 8008822:	4407      	add	r7, r0
 8008824:	eba8 0800 	sub.w	r8, r8, r0
 8008828:	e7e9      	b.n	80087fe <__sflush_r+0xda>
 800882a:	bf00      	nop
 800882c:	dfbffffe 	.word	0xdfbffffe

08008830 <_fflush_r>:
 8008830:	b538      	push	{r3, r4, r5, lr}
 8008832:	690b      	ldr	r3, [r1, #16]
 8008834:	4605      	mov	r5, r0
 8008836:	460c      	mov	r4, r1
 8008838:	b913      	cbnz	r3, 8008840 <_fflush_r+0x10>
 800883a:	2500      	movs	r5, #0
 800883c:	4628      	mov	r0, r5
 800883e:	bd38      	pop	{r3, r4, r5, pc}
 8008840:	b118      	cbz	r0, 800884a <_fflush_r+0x1a>
 8008842:	6a03      	ldr	r3, [r0, #32]
 8008844:	b90b      	cbnz	r3, 800884a <_fflush_r+0x1a>
 8008846:	f7fe fe85 	bl	8007554 <__sinit>
 800884a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d0f3      	beq.n	800883a <_fflush_r+0xa>
 8008852:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008854:	07d0      	lsls	r0, r2, #31
 8008856:	d404      	bmi.n	8008862 <_fflush_r+0x32>
 8008858:	0599      	lsls	r1, r3, #22
 800885a:	d402      	bmi.n	8008862 <_fflush_r+0x32>
 800885c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800885e:	f7fe fef8 	bl	8007652 <__retarget_lock_acquire_recursive>
 8008862:	4628      	mov	r0, r5
 8008864:	4621      	mov	r1, r4
 8008866:	f7ff ff5d 	bl	8008724 <__sflush_r>
 800886a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800886c:	07da      	lsls	r2, r3, #31
 800886e:	4605      	mov	r5, r0
 8008870:	d4e4      	bmi.n	800883c <_fflush_r+0xc>
 8008872:	89a3      	ldrh	r3, [r4, #12]
 8008874:	059b      	lsls	r3, r3, #22
 8008876:	d4e1      	bmi.n	800883c <_fflush_r+0xc>
 8008878:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800887a:	f7fe feeb 	bl	8007654 <__retarget_lock_release_recursive>
 800887e:	e7dd      	b.n	800883c <_fflush_r+0xc>

08008880 <__malloc_lock>:
 8008880:	4801      	ldr	r0, [pc, #4]	; (8008888 <__malloc_lock+0x8>)
 8008882:	f7fe bee6 	b.w	8007652 <__retarget_lock_acquire_recursive>
 8008886:	bf00      	nop
 8008888:	20000634 	.word	0x20000634

0800888c <__malloc_unlock>:
 800888c:	4801      	ldr	r0, [pc, #4]	; (8008894 <__malloc_unlock+0x8>)
 800888e:	f7fe bee1 	b.w	8007654 <__retarget_lock_release_recursive>
 8008892:	bf00      	nop
 8008894:	20000634 	.word	0x20000634

08008898 <_Balloc>:
 8008898:	b570      	push	{r4, r5, r6, lr}
 800889a:	69c6      	ldr	r6, [r0, #28]
 800889c:	4604      	mov	r4, r0
 800889e:	460d      	mov	r5, r1
 80088a0:	b976      	cbnz	r6, 80088c0 <_Balloc+0x28>
 80088a2:	2010      	movs	r0, #16
 80088a4:	f7ff fe96 	bl	80085d4 <malloc>
 80088a8:	4602      	mov	r2, r0
 80088aa:	61e0      	str	r0, [r4, #28]
 80088ac:	b920      	cbnz	r0, 80088b8 <_Balloc+0x20>
 80088ae:	4b18      	ldr	r3, [pc, #96]	; (8008910 <_Balloc+0x78>)
 80088b0:	4818      	ldr	r0, [pc, #96]	; (8008914 <_Balloc+0x7c>)
 80088b2:	216b      	movs	r1, #107	; 0x6b
 80088b4:	f000 fd2c 	bl	8009310 <__assert_func>
 80088b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088bc:	6006      	str	r6, [r0, #0]
 80088be:	60c6      	str	r6, [r0, #12]
 80088c0:	69e6      	ldr	r6, [r4, #28]
 80088c2:	68f3      	ldr	r3, [r6, #12]
 80088c4:	b183      	cbz	r3, 80088e8 <_Balloc+0x50>
 80088c6:	69e3      	ldr	r3, [r4, #28]
 80088c8:	68db      	ldr	r3, [r3, #12]
 80088ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80088ce:	b9b8      	cbnz	r0, 8008900 <_Balloc+0x68>
 80088d0:	2101      	movs	r1, #1
 80088d2:	fa01 f605 	lsl.w	r6, r1, r5
 80088d6:	1d72      	adds	r2, r6, #5
 80088d8:	0092      	lsls	r2, r2, #2
 80088da:	4620      	mov	r0, r4
 80088dc:	f000 fd36 	bl	800934c <_calloc_r>
 80088e0:	b160      	cbz	r0, 80088fc <_Balloc+0x64>
 80088e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80088e6:	e00e      	b.n	8008906 <_Balloc+0x6e>
 80088e8:	2221      	movs	r2, #33	; 0x21
 80088ea:	2104      	movs	r1, #4
 80088ec:	4620      	mov	r0, r4
 80088ee:	f000 fd2d 	bl	800934c <_calloc_r>
 80088f2:	69e3      	ldr	r3, [r4, #28]
 80088f4:	60f0      	str	r0, [r6, #12]
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d1e4      	bne.n	80088c6 <_Balloc+0x2e>
 80088fc:	2000      	movs	r0, #0
 80088fe:	bd70      	pop	{r4, r5, r6, pc}
 8008900:	6802      	ldr	r2, [r0, #0]
 8008902:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008906:	2300      	movs	r3, #0
 8008908:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800890c:	e7f7      	b.n	80088fe <_Balloc+0x66>
 800890e:	bf00      	nop
 8008910:	08009919 	.word	0x08009919
 8008914:	080099aa 	.word	0x080099aa

08008918 <_Bfree>:
 8008918:	b570      	push	{r4, r5, r6, lr}
 800891a:	69c6      	ldr	r6, [r0, #28]
 800891c:	4605      	mov	r5, r0
 800891e:	460c      	mov	r4, r1
 8008920:	b976      	cbnz	r6, 8008940 <_Bfree+0x28>
 8008922:	2010      	movs	r0, #16
 8008924:	f7ff fe56 	bl	80085d4 <malloc>
 8008928:	4602      	mov	r2, r0
 800892a:	61e8      	str	r0, [r5, #28]
 800892c:	b920      	cbnz	r0, 8008938 <_Bfree+0x20>
 800892e:	4b09      	ldr	r3, [pc, #36]	; (8008954 <_Bfree+0x3c>)
 8008930:	4809      	ldr	r0, [pc, #36]	; (8008958 <_Bfree+0x40>)
 8008932:	218f      	movs	r1, #143	; 0x8f
 8008934:	f000 fcec 	bl	8009310 <__assert_func>
 8008938:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800893c:	6006      	str	r6, [r0, #0]
 800893e:	60c6      	str	r6, [r0, #12]
 8008940:	b13c      	cbz	r4, 8008952 <_Bfree+0x3a>
 8008942:	69eb      	ldr	r3, [r5, #28]
 8008944:	6862      	ldr	r2, [r4, #4]
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800894c:	6021      	str	r1, [r4, #0]
 800894e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008952:	bd70      	pop	{r4, r5, r6, pc}
 8008954:	08009919 	.word	0x08009919
 8008958:	080099aa 	.word	0x080099aa

0800895c <__multadd>:
 800895c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008960:	690d      	ldr	r5, [r1, #16]
 8008962:	4607      	mov	r7, r0
 8008964:	460c      	mov	r4, r1
 8008966:	461e      	mov	r6, r3
 8008968:	f101 0c14 	add.w	ip, r1, #20
 800896c:	2000      	movs	r0, #0
 800896e:	f8dc 3000 	ldr.w	r3, [ip]
 8008972:	b299      	uxth	r1, r3
 8008974:	fb02 6101 	mla	r1, r2, r1, r6
 8008978:	0c1e      	lsrs	r6, r3, #16
 800897a:	0c0b      	lsrs	r3, r1, #16
 800897c:	fb02 3306 	mla	r3, r2, r6, r3
 8008980:	b289      	uxth	r1, r1
 8008982:	3001      	adds	r0, #1
 8008984:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008988:	4285      	cmp	r5, r0
 800898a:	f84c 1b04 	str.w	r1, [ip], #4
 800898e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008992:	dcec      	bgt.n	800896e <__multadd+0x12>
 8008994:	b30e      	cbz	r6, 80089da <__multadd+0x7e>
 8008996:	68a3      	ldr	r3, [r4, #8]
 8008998:	42ab      	cmp	r3, r5
 800899a:	dc19      	bgt.n	80089d0 <__multadd+0x74>
 800899c:	6861      	ldr	r1, [r4, #4]
 800899e:	4638      	mov	r0, r7
 80089a0:	3101      	adds	r1, #1
 80089a2:	f7ff ff79 	bl	8008898 <_Balloc>
 80089a6:	4680      	mov	r8, r0
 80089a8:	b928      	cbnz	r0, 80089b6 <__multadd+0x5a>
 80089aa:	4602      	mov	r2, r0
 80089ac:	4b0c      	ldr	r3, [pc, #48]	; (80089e0 <__multadd+0x84>)
 80089ae:	480d      	ldr	r0, [pc, #52]	; (80089e4 <__multadd+0x88>)
 80089b0:	21ba      	movs	r1, #186	; 0xba
 80089b2:	f000 fcad 	bl	8009310 <__assert_func>
 80089b6:	6922      	ldr	r2, [r4, #16]
 80089b8:	3202      	adds	r2, #2
 80089ba:	f104 010c 	add.w	r1, r4, #12
 80089be:	0092      	lsls	r2, r2, #2
 80089c0:	300c      	adds	r0, #12
 80089c2:	f000 fc97 	bl	80092f4 <memcpy>
 80089c6:	4621      	mov	r1, r4
 80089c8:	4638      	mov	r0, r7
 80089ca:	f7ff ffa5 	bl	8008918 <_Bfree>
 80089ce:	4644      	mov	r4, r8
 80089d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80089d4:	3501      	adds	r5, #1
 80089d6:	615e      	str	r6, [r3, #20]
 80089d8:	6125      	str	r5, [r4, #16]
 80089da:	4620      	mov	r0, r4
 80089dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089e0:	08009988 	.word	0x08009988
 80089e4:	080099aa 	.word	0x080099aa

080089e8 <__hi0bits>:
 80089e8:	0c03      	lsrs	r3, r0, #16
 80089ea:	041b      	lsls	r3, r3, #16
 80089ec:	b9d3      	cbnz	r3, 8008a24 <__hi0bits+0x3c>
 80089ee:	0400      	lsls	r0, r0, #16
 80089f0:	2310      	movs	r3, #16
 80089f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80089f6:	bf04      	itt	eq
 80089f8:	0200      	lsleq	r0, r0, #8
 80089fa:	3308      	addeq	r3, #8
 80089fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008a00:	bf04      	itt	eq
 8008a02:	0100      	lsleq	r0, r0, #4
 8008a04:	3304      	addeq	r3, #4
 8008a06:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008a0a:	bf04      	itt	eq
 8008a0c:	0080      	lsleq	r0, r0, #2
 8008a0e:	3302      	addeq	r3, #2
 8008a10:	2800      	cmp	r0, #0
 8008a12:	db05      	blt.n	8008a20 <__hi0bits+0x38>
 8008a14:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008a18:	f103 0301 	add.w	r3, r3, #1
 8008a1c:	bf08      	it	eq
 8008a1e:	2320      	moveq	r3, #32
 8008a20:	4618      	mov	r0, r3
 8008a22:	4770      	bx	lr
 8008a24:	2300      	movs	r3, #0
 8008a26:	e7e4      	b.n	80089f2 <__hi0bits+0xa>

08008a28 <__lo0bits>:
 8008a28:	6803      	ldr	r3, [r0, #0]
 8008a2a:	f013 0207 	ands.w	r2, r3, #7
 8008a2e:	d00c      	beq.n	8008a4a <__lo0bits+0x22>
 8008a30:	07d9      	lsls	r1, r3, #31
 8008a32:	d422      	bmi.n	8008a7a <__lo0bits+0x52>
 8008a34:	079a      	lsls	r2, r3, #30
 8008a36:	bf49      	itett	mi
 8008a38:	085b      	lsrmi	r3, r3, #1
 8008a3a:	089b      	lsrpl	r3, r3, #2
 8008a3c:	6003      	strmi	r3, [r0, #0]
 8008a3e:	2201      	movmi	r2, #1
 8008a40:	bf5c      	itt	pl
 8008a42:	6003      	strpl	r3, [r0, #0]
 8008a44:	2202      	movpl	r2, #2
 8008a46:	4610      	mov	r0, r2
 8008a48:	4770      	bx	lr
 8008a4a:	b299      	uxth	r1, r3
 8008a4c:	b909      	cbnz	r1, 8008a52 <__lo0bits+0x2a>
 8008a4e:	0c1b      	lsrs	r3, r3, #16
 8008a50:	2210      	movs	r2, #16
 8008a52:	b2d9      	uxtb	r1, r3
 8008a54:	b909      	cbnz	r1, 8008a5a <__lo0bits+0x32>
 8008a56:	3208      	adds	r2, #8
 8008a58:	0a1b      	lsrs	r3, r3, #8
 8008a5a:	0719      	lsls	r1, r3, #28
 8008a5c:	bf04      	itt	eq
 8008a5e:	091b      	lsreq	r3, r3, #4
 8008a60:	3204      	addeq	r2, #4
 8008a62:	0799      	lsls	r1, r3, #30
 8008a64:	bf04      	itt	eq
 8008a66:	089b      	lsreq	r3, r3, #2
 8008a68:	3202      	addeq	r2, #2
 8008a6a:	07d9      	lsls	r1, r3, #31
 8008a6c:	d403      	bmi.n	8008a76 <__lo0bits+0x4e>
 8008a6e:	085b      	lsrs	r3, r3, #1
 8008a70:	f102 0201 	add.w	r2, r2, #1
 8008a74:	d003      	beq.n	8008a7e <__lo0bits+0x56>
 8008a76:	6003      	str	r3, [r0, #0]
 8008a78:	e7e5      	b.n	8008a46 <__lo0bits+0x1e>
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	e7e3      	b.n	8008a46 <__lo0bits+0x1e>
 8008a7e:	2220      	movs	r2, #32
 8008a80:	e7e1      	b.n	8008a46 <__lo0bits+0x1e>
	...

08008a84 <__i2b>:
 8008a84:	b510      	push	{r4, lr}
 8008a86:	460c      	mov	r4, r1
 8008a88:	2101      	movs	r1, #1
 8008a8a:	f7ff ff05 	bl	8008898 <_Balloc>
 8008a8e:	4602      	mov	r2, r0
 8008a90:	b928      	cbnz	r0, 8008a9e <__i2b+0x1a>
 8008a92:	4b05      	ldr	r3, [pc, #20]	; (8008aa8 <__i2b+0x24>)
 8008a94:	4805      	ldr	r0, [pc, #20]	; (8008aac <__i2b+0x28>)
 8008a96:	f240 1145 	movw	r1, #325	; 0x145
 8008a9a:	f000 fc39 	bl	8009310 <__assert_func>
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	6144      	str	r4, [r0, #20]
 8008aa2:	6103      	str	r3, [r0, #16]
 8008aa4:	bd10      	pop	{r4, pc}
 8008aa6:	bf00      	nop
 8008aa8:	08009988 	.word	0x08009988
 8008aac:	080099aa 	.word	0x080099aa

08008ab0 <__multiply>:
 8008ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ab4:	4691      	mov	r9, r2
 8008ab6:	690a      	ldr	r2, [r1, #16]
 8008ab8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008abc:	429a      	cmp	r2, r3
 8008abe:	bfb8      	it	lt
 8008ac0:	460b      	movlt	r3, r1
 8008ac2:	460c      	mov	r4, r1
 8008ac4:	bfbc      	itt	lt
 8008ac6:	464c      	movlt	r4, r9
 8008ac8:	4699      	movlt	r9, r3
 8008aca:	6927      	ldr	r7, [r4, #16]
 8008acc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008ad0:	68a3      	ldr	r3, [r4, #8]
 8008ad2:	6861      	ldr	r1, [r4, #4]
 8008ad4:	eb07 060a 	add.w	r6, r7, sl
 8008ad8:	42b3      	cmp	r3, r6
 8008ada:	b085      	sub	sp, #20
 8008adc:	bfb8      	it	lt
 8008ade:	3101      	addlt	r1, #1
 8008ae0:	f7ff feda 	bl	8008898 <_Balloc>
 8008ae4:	b930      	cbnz	r0, 8008af4 <__multiply+0x44>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	4b44      	ldr	r3, [pc, #272]	; (8008bfc <__multiply+0x14c>)
 8008aea:	4845      	ldr	r0, [pc, #276]	; (8008c00 <__multiply+0x150>)
 8008aec:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008af0:	f000 fc0e 	bl	8009310 <__assert_func>
 8008af4:	f100 0514 	add.w	r5, r0, #20
 8008af8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008afc:	462b      	mov	r3, r5
 8008afe:	2200      	movs	r2, #0
 8008b00:	4543      	cmp	r3, r8
 8008b02:	d321      	bcc.n	8008b48 <__multiply+0x98>
 8008b04:	f104 0314 	add.w	r3, r4, #20
 8008b08:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008b0c:	f109 0314 	add.w	r3, r9, #20
 8008b10:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008b14:	9202      	str	r2, [sp, #8]
 8008b16:	1b3a      	subs	r2, r7, r4
 8008b18:	3a15      	subs	r2, #21
 8008b1a:	f022 0203 	bic.w	r2, r2, #3
 8008b1e:	3204      	adds	r2, #4
 8008b20:	f104 0115 	add.w	r1, r4, #21
 8008b24:	428f      	cmp	r7, r1
 8008b26:	bf38      	it	cc
 8008b28:	2204      	movcc	r2, #4
 8008b2a:	9201      	str	r2, [sp, #4]
 8008b2c:	9a02      	ldr	r2, [sp, #8]
 8008b2e:	9303      	str	r3, [sp, #12]
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d80c      	bhi.n	8008b4e <__multiply+0x9e>
 8008b34:	2e00      	cmp	r6, #0
 8008b36:	dd03      	ble.n	8008b40 <__multiply+0x90>
 8008b38:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d05b      	beq.n	8008bf8 <__multiply+0x148>
 8008b40:	6106      	str	r6, [r0, #16]
 8008b42:	b005      	add	sp, #20
 8008b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b48:	f843 2b04 	str.w	r2, [r3], #4
 8008b4c:	e7d8      	b.n	8008b00 <__multiply+0x50>
 8008b4e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008b52:	f1ba 0f00 	cmp.w	sl, #0
 8008b56:	d024      	beq.n	8008ba2 <__multiply+0xf2>
 8008b58:	f104 0e14 	add.w	lr, r4, #20
 8008b5c:	46a9      	mov	r9, r5
 8008b5e:	f04f 0c00 	mov.w	ip, #0
 8008b62:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008b66:	f8d9 1000 	ldr.w	r1, [r9]
 8008b6a:	fa1f fb82 	uxth.w	fp, r2
 8008b6e:	b289      	uxth	r1, r1
 8008b70:	fb0a 110b 	mla	r1, sl, fp, r1
 8008b74:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008b78:	f8d9 2000 	ldr.w	r2, [r9]
 8008b7c:	4461      	add	r1, ip
 8008b7e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008b82:	fb0a c20b 	mla	r2, sl, fp, ip
 8008b86:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008b8a:	b289      	uxth	r1, r1
 8008b8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008b90:	4577      	cmp	r7, lr
 8008b92:	f849 1b04 	str.w	r1, [r9], #4
 8008b96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008b9a:	d8e2      	bhi.n	8008b62 <__multiply+0xb2>
 8008b9c:	9a01      	ldr	r2, [sp, #4]
 8008b9e:	f845 c002 	str.w	ip, [r5, r2]
 8008ba2:	9a03      	ldr	r2, [sp, #12]
 8008ba4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008ba8:	3304      	adds	r3, #4
 8008baa:	f1b9 0f00 	cmp.w	r9, #0
 8008bae:	d021      	beq.n	8008bf4 <__multiply+0x144>
 8008bb0:	6829      	ldr	r1, [r5, #0]
 8008bb2:	f104 0c14 	add.w	ip, r4, #20
 8008bb6:	46ae      	mov	lr, r5
 8008bb8:	f04f 0a00 	mov.w	sl, #0
 8008bbc:	f8bc b000 	ldrh.w	fp, [ip]
 8008bc0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008bc4:	fb09 220b 	mla	r2, r9, fp, r2
 8008bc8:	4452      	add	r2, sl
 8008bca:	b289      	uxth	r1, r1
 8008bcc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008bd0:	f84e 1b04 	str.w	r1, [lr], #4
 8008bd4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008bd8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008bdc:	f8be 1000 	ldrh.w	r1, [lr]
 8008be0:	fb09 110a 	mla	r1, r9, sl, r1
 8008be4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008be8:	4567      	cmp	r7, ip
 8008bea:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008bee:	d8e5      	bhi.n	8008bbc <__multiply+0x10c>
 8008bf0:	9a01      	ldr	r2, [sp, #4]
 8008bf2:	50a9      	str	r1, [r5, r2]
 8008bf4:	3504      	adds	r5, #4
 8008bf6:	e799      	b.n	8008b2c <__multiply+0x7c>
 8008bf8:	3e01      	subs	r6, #1
 8008bfa:	e79b      	b.n	8008b34 <__multiply+0x84>
 8008bfc:	08009988 	.word	0x08009988
 8008c00:	080099aa 	.word	0x080099aa

08008c04 <__pow5mult>:
 8008c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c08:	4615      	mov	r5, r2
 8008c0a:	f012 0203 	ands.w	r2, r2, #3
 8008c0e:	4606      	mov	r6, r0
 8008c10:	460f      	mov	r7, r1
 8008c12:	d007      	beq.n	8008c24 <__pow5mult+0x20>
 8008c14:	4c25      	ldr	r4, [pc, #148]	; (8008cac <__pow5mult+0xa8>)
 8008c16:	3a01      	subs	r2, #1
 8008c18:	2300      	movs	r3, #0
 8008c1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c1e:	f7ff fe9d 	bl	800895c <__multadd>
 8008c22:	4607      	mov	r7, r0
 8008c24:	10ad      	asrs	r5, r5, #2
 8008c26:	d03d      	beq.n	8008ca4 <__pow5mult+0xa0>
 8008c28:	69f4      	ldr	r4, [r6, #28]
 8008c2a:	b97c      	cbnz	r4, 8008c4c <__pow5mult+0x48>
 8008c2c:	2010      	movs	r0, #16
 8008c2e:	f7ff fcd1 	bl	80085d4 <malloc>
 8008c32:	4602      	mov	r2, r0
 8008c34:	61f0      	str	r0, [r6, #28]
 8008c36:	b928      	cbnz	r0, 8008c44 <__pow5mult+0x40>
 8008c38:	4b1d      	ldr	r3, [pc, #116]	; (8008cb0 <__pow5mult+0xac>)
 8008c3a:	481e      	ldr	r0, [pc, #120]	; (8008cb4 <__pow5mult+0xb0>)
 8008c3c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008c40:	f000 fb66 	bl	8009310 <__assert_func>
 8008c44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c48:	6004      	str	r4, [r0, #0]
 8008c4a:	60c4      	str	r4, [r0, #12]
 8008c4c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008c50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c54:	b94c      	cbnz	r4, 8008c6a <__pow5mult+0x66>
 8008c56:	f240 2171 	movw	r1, #625	; 0x271
 8008c5a:	4630      	mov	r0, r6
 8008c5c:	f7ff ff12 	bl	8008a84 <__i2b>
 8008c60:	2300      	movs	r3, #0
 8008c62:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c66:	4604      	mov	r4, r0
 8008c68:	6003      	str	r3, [r0, #0]
 8008c6a:	f04f 0900 	mov.w	r9, #0
 8008c6e:	07eb      	lsls	r3, r5, #31
 8008c70:	d50a      	bpl.n	8008c88 <__pow5mult+0x84>
 8008c72:	4639      	mov	r1, r7
 8008c74:	4622      	mov	r2, r4
 8008c76:	4630      	mov	r0, r6
 8008c78:	f7ff ff1a 	bl	8008ab0 <__multiply>
 8008c7c:	4639      	mov	r1, r7
 8008c7e:	4680      	mov	r8, r0
 8008c80:	4630      	mov	r0, r6
 8008c82:	f7ff fe49 	bl	8008918 <_Bfree>
 8008c86:	4647      	mov	r7, r8
 8008c88:	106d      	asrs	r5, r5, #1
 8008c8a:	d00b      	beq.n	8008ca4 <__pow5mult+0xa0>
 8008c8c:	6820      	ldr	r0, [r4, #0]
 8008c8e:	b938      	cbnz	r0, 8008ca0 <__pow5mult+0x9c>
 8008c90:	4622      	mov	r2, r4
 8008c92:	4621      	mov	r1, r4
 8008c94:	4630      	mov	r0, r6
 8008c96:	f7ff ff0b 	bl	8008ab0 <__multiply>
 8008c9a:	6020      	str	r0, [r4, #0]
 8008c9c:	f8c0 9000 	str.w	r9, [r0]
 8008ca0:	4604      	mov	r4, r0
 8008ca2:	e7e4      	b.n	8008c6e <__pow5mult+0x6a>
 8008ca4:	4638      	mov	r0, r7
 8008ca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008caa:	bf00      	nop
 8008cac:	08009af8 	.word	0x08009af8
 8008cb0:	08009919 	.word	0x08009919
 8008cb4:	080099aa 	.word	0x080099aa

08008cb8 <__lshift>:
 8008cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cbc:	460c      	mov	r4, r1
 8008cbe:	6849      	ldr	r1, [r1, #4]
 8008cc0:	6923      	ldr	r3, [r4, #16]
 8008cc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008cc6:	68a3      	ldr	r3, [r4, #8]
 8008cc8:	4607      	mov	r7, r0
 8008cca:	4691      	mov	r9, r2
 8008ccc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008cd0:	f108 0601 	add.w	r6, r8, #1
 8008cd4:	42b3      	cmp	r3, r6
 8008cd6:	db0b      	blt.n	8008cf0 <__lshift+0x38>
 8008cd8:	4638      	mov	r0, r7
 8008cda:	f7ff fddd 	bl	8008898 <_Balloc>
 8008cde:	4605      	mov	r5, r0
 8008ce0:	b948      	cbnz	r0, 8008cf6 <__lshift+0x3e>
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	4b28      	ldr	r3, [pc, #160]	; (8008d88 <__lshift+0xd0>)
 8008ce6:	4829      	ldr	r0, [pc, #164]	; (8008d8c <__lshift+0xd4>)
 8008ce8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008cec:	f000 fb10 	bl	8009310 <__assert_func>
 8008cf0:	3101      	adds	r1, #1
 8008cf2:	005b      	lsls	r3, r3, #1
 8008cf4:	e7ee      	b.n	8008cd4 <__lshift+0x1c>
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	f100 0114 	add.w	r1, r0, #20
 8008cfc:	f100 0210 	add.w	r2, r0, #16
 8008d00:	4618      	mov	r0, r3
 8008d02:	4553      	cmp	r3, sl
 8008d04:	db33      	blt.n	8008d6e <__lshift+0xb6>
 8008d06:	6920      	ldr	r0, [r4, #16]
 8008d08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d0c:	f104 0314 	add.w	r3, r4, #20
 8008d10:	f019 091f 	ands.w	r9, r9, #31
 8008d14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008d18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008d1c:	d02b      	beq.n	8008d76 <__lshift+0xbe>
 8008d1e:	f1c9 0e20 	rsb	lr, r9, #32
 8008d22:	468a      	mov	sl, r1
 8008d24:	2200      	movs	r2, #0
 8008d26:	6818      	ldr	r0, [r3, #0]
 8008d28:	fa00 f009 	lsl.w	r0, r0, r9
 8008d2c:	4310      	orrs	r0, r2
 8008d2e:	f84a 0b04 	str.w	r0, [sl], #4
 8008d32:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d36:	459c      	cmp	ip, r3
 8008d38:	fa22 f20e 	lsr.w	r2, r2, lr
 8008d3c:	d8f3      	bhi.n	8008d26 <__lshift+0x6e>
 8008d3e:	ebac 0304 	sub.w	r3, ip, r4
 8008d42:	3b15      	subs	r3, #21
 8008d44:	f023 0303 	bic.w	r3, r3, #3
 8008d48:	3304      	adds	r3, #4
 8008d4a:	f104 0015 	add.w	r0, r4, #21
 8008d4e:	4584      	cmp	ip, r0
 8008d50:	bf38      	it	cc
 8008d52:	2304      	movcc	r3, #4
 8008d54:	50ca      	str	r2, [r1, r3]
 8008d56:	b10a      	cbz	r2, 8008d5c <__lshift+0xa4>
 8008d58:	f108 0602 	add.w	r6, r8, #2
 8008d5c:	3e01      	subs	r6, #1
 8008d5e:	4638      	mov	r0, r7
 8008d60:	612e      	str	r6, [r5, #16]
 8008d62:	4621      	mov	r1, r4
 8008d64:	f7ff fdd8 	bl	8008918 <_Bfree>
 8008d68:	4628      	mov	r0, r5
 8008d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d6e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d72:	3301      	adds	r3, #1
 8008d74:	e7c5      	b.n	8008d02 <__lshift+0x4a>
 8008d76:	3904      	subs	r1, #4
 8008d78:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d7c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d80:	459c      	cmp	ip, r3
 8008d82:	d8f9      	bhi.n	8008d78 <__lshift+0xc0>
 8008d84:	e7ea      	b.n	8008d5c <__lshift+0xa4>
 8008d86:	bf00      	nop
 8008d88:	08009988 	.word	0x08009988
 8008d8c:	080099aa 	.word	0x080099aa

08008d90 <__mcmp>:
 8008d90:	b530      	push	{r4, r5, lr}
 8008d92:	6902      	ldr	r2, [r0, #16]
 8008d94:	690c      	ldr	r4, [r1, #16]
 8008d96:	1b12      	subs	r2, r2, r4
 8008d98:	d10e      	bne.n	8008db8 <__mcmp+0x28>
 8008d9a:	f100 0314 	add.w	r3, r0, #20
 8008d9e:	3114      	adds	r1, #20
 8008da0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008da4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008da8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008dac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008db0:	42a5      	cmp	r5, r4
 8008db2:	d003      	beq.n	8008dbc <__mcmp+0x2c>
 8008db4:	d305      	bcc.n	8008dc2 <__mcmp+0x32>
 8008db6:	2201      	movs	r2, #1
 8008db8:	4610      	mov	r0, r2
 8008dba:	bd30      	pop	{r4, r5, pc}
 8008dbc:	4283      	cmp	r3, r0
 8008dbe:	d3f3      	bcc.n	8008da8 <__mcmp+0x18>
 8008dc0:	e7fa      	b.n	8008db8 <__mcmp+0x28>
 8008dc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008dc6:	e7f7      	b.n	8008db8 <__mcmp+0x28>

08008dc8 <__mdiff>:
 8008dc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dcc:	460c      	mov	r4, r1
 8008dce:	4606      	mov	r6, r0
 8008dd0:	4611      	mov	r1, r2
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	4690      	mov	r8, r2
 8008dd6:	f7ff ffdb 	bl	8008d90 <__mcmp>
 8008dda:	1e05      	subs	r5, r0, #0
 8008ddc:	d110      	bne.n	8008e00 <__mdiff+0x38>
 8008dde:	4629      	mov	r1, r5
 8008de0:	4630      	mov	r0, r6
 8008de2:	f7ff fd59 	bl	8008898 <_Balloc>
 8008de6:	b930      	cbnz	r0, 8008df6 <__mdiff+0x2e>
 8008de8:	4b3a      	ldr	r3, [pc, #232]	; (8008ed4 <__mdiff+0x10c>)
 8008dea:	4602      	mov	r2, r0
 8008dec:	f240 2137 	movw	r1, #567	; 0x237
 8008df0:	4839      	ldr	r0, [pc, #228]	; (8008ed8 <__mdiff+0x110>)
 8008df2:	f000 fa8d 	bl	8009310 <__assert_func>
 8008df6:	2301      	movs	r3, #1
 8008df8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008dfc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e00:	bfa4      	itt	ge
 8008e02:	4643      	movge	r3, r8
 8008e04:	46a0      	movge	r8, r4
 8008e06:	4630      	mov	r0, r6
 8008e08:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008e0c:	bfa6      	itte	ge
 8008e0e:	461c      	movge	r4, r3
 8008e10:	2500      	movge	r5, #0
 8008e12:	2501      	movlt	r5, #1
 8008e14:	f7ff fd40 	bl	8008898 <_Balloc>
 8008e18:	b920      	cbnz	r0, 8008e24 <__mdiff+0x5c>
 8008e1a:	4b2e      	ldr	r3, [pc, #184]	; (8008ed4 <__mdiff+0x10c>)
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	f240 2145 	movw	r1, #581	; 0x245
 8008e22:	e7e5      	b.n	8008df0 <__mdiff+0x28>
 8008e24:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008e28:	6926      	ldr	r6, [r4, #16]
 8008e2a:	60c5      	str	r5, [r0, #12]
 8008e2c:	f104 0914 	add.w	r9, r4, #20
 8008e30:	f108 0514 	add.w	r5, r8, #20
 8008e34:	f100 0e14 	add.w	lr, r0, #20
 8008e38:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008e3c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008e40:	f108 0210 	add.w	r2, r8, #16
 8008e44:	46f2      	mov	sl, lr
 8008e46:	2100      	movs	r1, #0
 8008e48:	f859 3b04 	ldr.w	r3, [r9], #4
 8008e4c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008e50:	fa11 f88b 	uxtah	r8, r1, fp
 8008e54:	b299      	uxth	r1, r3
 8008e56:	0c1b      	lsrs	r3, r3, #16
 8008e58:	eba8 0801 	sub.w	r8, r8, r1
 8008e5c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008e60:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008e64:	fa1f f888 	uxth.w	r8, r8
 8008e68:	1419      	asrs	r1, r3, #16
 8008e6a:	454e      	cmp	r6, r9
 8008e6c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008e70:	f84a 3b04 	str.w	r3, [sl], #4
 8008e74:	d8e8      	bhi.n	8008e48 <__mdiff+0x80>
 8008e76:	1b33      	subs	r3, r6, r4
 8008e78:	3b15      	subs	r3, #21
 8008e7a:	f023 0303 	bic.w	r3, r3, #3
 8008e7e:	3304      	adds	r3, #4
 8008e80:	3415      	adds	r4, #21
 8008e82:	42a6      	cmp	r6, r4
 8008e84:	bf38      	it	cc
 8008e86:	2304      	movcc	r3, #4
 8008e88:	441d      	add	r5, r3
 8008e8a:	4473      	add	r3, lr
 8008e8c:	469e      	mov	lr, r3
 8008e8e:	462e      	mov	r6, r5
 8008e90:	4566      	cmp	r6, ip
 8008e92:	d30e      	bcc.n	8008eb2 <__mdiff+0xea>
 8008e94:	f10c 0203 	add.w	r2, ip, #3
 8008e98:	1b52      	subs	r2, r2, r5
 8008e9a:	f022 0203 	bic.w	r2, r2, #3
 8008e9e:	3d03      	subs	r5, #3
 8008ea0:	45ac      	cmp	ip, r5
 8008ea2:	bf38      	it	cc
 8008ea4:	2200      	movcc	r2, #0
 8008ea6:	4413      	add	r3, r2
 8008ea8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008eac:	b17a      	cbz	r2, 8008ece <__mdiff+0x106>
 8008eae:	6107      	str	r7, [r0, #16]
 8008eb0:	e7a4      	b.n	8008dfc <__mdiff+0x34>
 8008eb2:	f856 8b04 	ldr.w	r8, [r6], #4
 8008eb6:	fa11 f288 	uxtah	r2, r1, r8
 8008eba:	1414      	asrs	r4, r2, #16
 8008ebc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008ec0:	b292      	uxth	r2, r2
 8008ec2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008ec6:	f84e 2b04 	str.w	r2, [lr], #4
 8008eca:	1421      	asrs	r1, r4, #16
 8008ecc:	e7e0      	b.n	8008e90 <__mdiff+0xc8>
 8008ece:	3f01      	subs	r7, #1
 8008ed0:	e7ea      	b.n	8008ea8 <__mdiff+0xe0>
 8008ed2:	bf00      	nop
 8008ed4:	08009988 	.word	0x08009988
 8008ed8:	080099aa 	.word	0x080099aa

08008edc <__d2b>:
 8008edc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ee0:	460f      	mov	r7, r1
 8008ee2:	2101      	movs	r1, #1
 8008ee4:	ec59 8b10 	vmov	r8, r9, d0
 8008ee8:	4616      	mov	r6, r2
 8008eea:	f7ff fcd5 	bl	8008898 <_Balloc>
 8008eee:	4604      	mov	r4, r0
 8008ef0:	b930      	cbnz	r0, 8008f00 <__d2b+0x24>
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	4b24      	ldr	r3, [pc, #144]	; (8008f88 <__d2b+0xac>)
 8008ef6:	4825      	ldr	r0, [pc, #148]	; (8008f8c <__d2b+0xb0>)
 8008ef8:	f240 310f 	movw	r1, #783	; 0x30f
 8008efc:	f000 fa08 	bl	8009310 <__assert_func>
 8008f00:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008f04:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f08:	bb2d      	cbnz	r5, 8008f56 <__d2b+0x7a>
 8008f0a:	9301      	str	r3, [sp, #4]
 8008f0c:	f1b8 0300 	subs.w	r3, r8, #0
 8008f10:	d026      	beq.n	8008f60 <__d2b+0x84>
 8008f12:	4668      	mov	r0, sp
 8008f14:	9300      	str	r3, [sp, #0]
 8008f16:	f7ff fd87 	bl	8008a28 <__lo0bits>
 8008f1a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008f1e:	b1e8      	cbz	r0, 8008f5c <__d2b+0x80>
 8008f20:	f1c0 0320 	rsb	r3, r0, #32
 8008f24:	fa02 f303 	lsl.w	r3, r2, r3
 8008f28:	430b      	orrs	r3, r1
 8008f2a:	40c2      	lsrs	r2, r0
 8008f2c:	6163      	str	r3, [r4, #20]
 8008f2e:	9201      	str	r2, [sp, #4]
 8008f30:	9b01      	ldr	r3, [sp, #4]
 8008f32:	61a3      	str	r3, [r4, #24]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	bf14      	ite	ne
 8008f38:	2202      	movne	r2, #2
 8008f3a:	2201      	moveq	r2, #1
 8008f3c:	6122      	str	r2, [r4, #16]
 8008f3e:	b1bd      	cbz	r5, 8008f70 <__d2b+0x94>
 8008f40:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008f44:	4405      	add	r5, r0
 8008f46:	603d      	str	r5, [r7, #0]
 8008f48:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008f4c:	6030      	str	r0, [r6, #0]
 8008f4e:	4620      	mov	r0, r4
 8008f50:	b003      	add	sp, #12
 8008f52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f5a:	e7d6      	b.n	8008f0a <__d2b+0x2e>
 8008f5c:	6161      	str	r1, [r4, #20]
 8008f5e:	e7e7      	b.n	8008f30 <__d2b+0x54>
 8008f60:	a801      	add	r0, sp, #4
 8008f62:	f7ff fd61 	bl	8008a28 <__lo0bits>
 8008f66:	9b01      	ldr	r3, [sp, #4]
 8008f68:	6163      	str	r3, [r4, #20]
 8008f6a:	3020      	adds	r0, #32
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	e7e5      	b.n	8008f3c <__d2b+0x60>
 8008f70:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008f74:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008f78:	6038      	str	r0, [r7, #0]
 8008f7a:	6918      	ldr	r0, [r3, #16]
 8008f7c:	f7ff fd34 	bl	80089e8 <__hi0bits>
 8008f80:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008f84:	e7e2      	b.n	8008f4c <__d2b+0x70>
 8008f86:	bf00      	nop
 8008f88:	08009988 	.word	0x08009988
 8008f8c:	080099aa 	.word	0x080099aa

08008f90 <__sread>:
 8008f90:	b510      	push	{r4, lr}
 8008f92:	460c      	mov	r4, r1
 8008f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f98:	f000 f978 	bl	800928c <_read_r>
 8008f9c:	2800      	cmp	r0, #0
 8008f9e:	bfab      	itete	ge
 8008fa0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008fa2:	89a3      	ldrhlt	r3, [r4, #12]
 8008fa4:	181b      	addge	r3, r3, r0
 8008fa6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008faa:	bfac      	ite	ge
 8008fac:	6563      	strge	r3, [r4, #84]	; 0x54
 8008fae:	81a3      	strhlt	r3, [r4, #12]
 8008fb0:	bd10      	pop	{r4, pc}

08008fb2 <__swrite>:
 8008fb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fb6:	461f      	mov	r7, r3
 8008fb8:	898b      	ldrh	r3, [r1, #12]
 8008fba:	05db      	lsls	r3, r3, #23
 8008fbc:	4605      	mov	r5, r0
 8008fbe:	460c      	mov	r4, r1
 8008fc0:	4616      	mov	r6, r2
 8008fc2:	d505      	bpl.n	8008fd0 <__swrite+0x1e>
 8008fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fc8:	2302      	movs	r3, #2
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f000 f94c 	bl	8009268 <_lseek_r>
 8008fd0:	89a3      	ldrh	r3, [r4, #12]
 8008fd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fda:	81a3      	strh	r3, [r4, #12]
 8008fdc:	4632      	mov	r2, r6
 8008fde:	463b      	mov	r3, r7
 8008fe0:	4628      	mov	r0, r5
 8008fe2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fe6:	f000 b973 	b.w	80092d0 <_write_r>

08008fea <__sseek>:
 8008fea:	b510      	push	{r4, lr}
 8008fec:	460c      	mov	r4, r1
 8008fee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ff2:	f000 f939 	bl	8009268 <_lseek_r>
 8008ff6:	1c43      	adds	r3, r0, #1
 8008ff8:	89a3      	ldrh	r3, [r4, #12]
 8008ffa:	bf15      	itete	ne
 8008ffc:	6560      	strne	r0, [r4, #84]	; 0x54
 8008ffe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009002:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009006:	81a3      	strheq	r3, [r4, #12]
 8009008:	bf18      	it	ne
 800900a:	81a3      	strhne	r3, [r4, #12]
 800900c:	bd10      	pop	{r4, pc}

0800900e <__sclose>:
 800900e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009012:	f000 b8f7 	b.w	8009204 <_close_r>

08009016 <__swbuf_r>:
 8009016:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009018:	460e      	mov	r6, r1
 800901a:	4614      	mov	r4, r2
 800901c:	4605      	mov	r5, r0
 800901e:	b118      	cbz	r0, 8009028 <__swbuf_r+0x12>
 8009020:	6a03      	ldr	r3, [r0, #32]
 8009022:	b90b      	cbnz	r3, 8009028 <__swbuf_r+0x12>
 8009024:	f7fe fa96 	bl	8007554 <__sinit>
 8009028:	69a3      	ldr	r3, [r4, #24]
 800902a:	60a3      	str	r3, [r4, #8]
 800902c:	89a3      	ldrh	r3, [r4, #12]
 800902e:	071a      	lsls	r2, r3, #28
 8009030:	d525      	bpl.n	800907e <__swbuf_r+0x68>
 8009032:	6923      	ldr	r3, [r4, #16]
 8009034:	b31b      	cbz	r3, 800907e <__swbuf_r+0x68>
 8009036:	6823      	ldr	r3, [r4, #0]
 8009038:	6922      	ldr	r2, [r4, #16]
 800903a:	1a98      	subs	r0, r3, r2
 800903c:	6963      	ldr	r3, [r4, #20]
 800903e:	b2f6      	uxtb	r6, r6
 8009040:	4283      	cmp	r3, r0
 8009042:	4637      	mov	r7, r6
 8009044:	dc04      	bgt.n	8009050 <__swbuf_r+0x3a>
 8009046:	4621      	mov	r1, r4
 8009048:	4628      	mov	r0, r5
 800904a:	f7ff fbf1 	bl	8008830 <_fflush_r>
 800904e:	b9e0      	cbnz	r0, 800908a <__swbuf_r+0x74>
 8009050:	68a3      	ldr	r3, [r4, #8]
 8009052:	3b01      	subs	r3, #1
 8009054:	60a3      	str	r3, [r4, #8]
 8009056:	6823      	ldr	r3, [r4, #0]
 8009058:	1c5a      	adds	r2, r3, #1
 800905a:	6022      	str	r2, [r4, #0]
 800905c:	701e      	strb	r6, [r3, #0]
 800905e:	6962      	ldr	r2, [r4, #20]
 8009060:	1c43      	adds	r3, r0, #1
 8009062:	429a      	cmp	r2, r3
 8009064:	d004      	beq.n	8009070 <__swbuf_r+0x5a>
 8009066:	89a3      	ldrh	r3, [r4, #12]
 8009068:	07db      	lsls	r3, r3, #31
 800906a:	d506      	bpl.n	800907a <__swbuf_r+0x64>
 800906c:	2e0a      	cmp	r6, #10
 800906e:	d104      	bne.n	800907a <__swbuf_r+0x64>
 8009070:	4621      	mov	r1, r4
 8009072:	4628      	mov	r0, r5
 8009074:	f7ff fbdc 	bl	8008830 <_fflush_r>
 8009078:	b938      	cbnz	r0, 800908a <__swbuf_r+0x74>
 800907a:	4638      	mov	r0, r7
 800907c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800907e:	4621      	mov	r1, r4
 8009080:	4628      	mov	r0, r5
 8009082:	f000 f805 	bl	8009090 <__swsetup_r>
 8009086:	2800      	cmp	r0, #0
 8009088:	d0d5      	beq.n	8009036 <__swbuf_r+0x20>
 800908a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800908e:	e7f4      	b.n	800907a <__swbuf_r+0x64>

08009090 <__swsetup_r>:
 8009090:	b538      	push	{r3, r4, r5, lr}
 8009092:	4b2a      	ldr	r3, [pc, #168]	; (800913c <__swsetup_r+0xac>)
 8009094:	4605      	mov	r5, r0
 8009096:	6818      	ldr	r0, [r3, #0]
 8009098:	460c      	mov	r4, r1
 800909a:	b118      	cbz	r0, 80090a4 <__swsetup_r+0x14>
 800909c:	6a03      	ldr	r3, [r0, #32]
 800909e:	b90b      	cbnz	r3, 80090a4 <__swsetup_r+0x14>
 80090a0:	f7fe fa58 	bl	8007554 <__sinit>
 80090a4:	89a3      	ldrh	r3, [r4, #12]
 80090a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090aa:	0718      	lsls	r0, r3, #28
 80090ac:	d422      	bmi.n	80090f4 <__swsetup_r+0x64>
 80090ae:	06d9      	lsls	r1, r3, #27
 80090b0:	d407      	bmi.n	80090c2 <__swsetup_r+0x32>
 80090b2:	2309      	movs	r3, #9
 80090b4:	602b      	str	r3, [r5, #0]
 80090b6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80090ba:	81a3      	strh	r3, [r4, #12]
 80090bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090c0:	e034      	b.n	800912c <__swsetup_r+0x9c>
 80090c2:	0758      	lsls	r0, r3, #29
 80090c4:	d512      	bpl.n	80090ec <__swsetup_r+0x5c>
 80090c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090c8:	b141      	cbz	r1, 80090dc <__swsetup_r+0x4c>
 80090ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090ce:	4299      	cmp	r1, r3
 80090d0:	d002      	beq.n	80090d8 <__swsetup_r+0x48>
 80090d2:	4628      	mov	r0, r5
 80090d4:	f000 f950 	bl	8009378 <_free_r>
 80090d8:	2300      	movs	r3, #0
 80090da:	6363      	str	r3, [r4, #52]	; 0x34
 80090dc:	89a3      	ldrh	r3, [r4, #12]
 80090de:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80090e2:	81a3      	strh	r3, [r4, #12]
 80090e4:	2300      	movs	r3, #0
 80090e6:	6063      	str	r3, [r4, #4]
 80090e8:	6923      	ldr	r3, [r4, #16]
 80090ea:	6023      	str	r3, [r4, #0]
 80090ec:	89a3      	ldrh	r3, [r4, #12]
 80090ee:	f043 0308 	orr.w	r3, r3, #8
 80090f2:	81a3      	strh	r3, [r4, #12]
 80090f4:	6923      	ldr	r3, [r4, #16]
 80090f6:	b94b      	cbnz	r3, 800910c <__swsetup_r+0x7c>
 80090f8:	89a3      	ldrh	r3, [r4, #12]
 80090fa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80090fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009102:	d003      	beq.n	800910c <__swsetup_r+0x7c>
 8009104:	4621      	mov	r1, r4
 8009106:	4628      	mov	r0, r5
 8009108:	f000 f840 	bl	800918c <__smakebuf_r>
 800910c:	89a0      	ldrh	r0, [r4, #12]
 800910e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009112:	f010 0301 	ands.w	r3, r0, #1
 8009116:	d00a      	beq.n	800912e <__swsetup_r+0x9e>
 8009118:	2300      	movs	r3, #0
 800911a:	60a3      	str	r3, [r4, #8]
 800911c:	6963      	ldr	r3, [r4, #20]
 800911e:	425b      	negs	r3, r3
 8009120:	61a3      	str	r3, [r4, #24]
 8009122:	6923      	ldr	r3, [r4, #16]
 8009124:	b943      	cbnz	r3, 8009138 <__swsetup_r+0xa8>
 8009126:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800912a:	d1c4      	bne.n	80090b6 <__swsetup_r+0x26>
 800912c:	bd38      	pop	{r3, r4, r5, pc}
 800912e:	0781      	lsls	r1, r0, #30
 8009130:	bf58      	it	pl
 8009132:	6963      	ldrpl	r3, [r4, #20]
 8009134:	60a3      	str	r3, [r4, #8]
 8009136:	e7f4      	b.n	8009122 <__swsetup_r+0x92>
 8009138:	2000      	movs	r0, #0
 800913a:	e7f7      	b.n	800912c <__swsetup_r+0x9c>
 800913c:	20000068 	.word	0x20000068

08009140 <__swhatbuf_r>:
 8009140:	b570      	push	{r4, r5, r6, lr}
 8009142:	460c      	mov	r4, r1
 8009144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009148:	2900      	cmp	r1, #0
 800914a:	b096      	sub	sp, #88	; 0x58
 800914c:	4615      	mov	r5, r2
 800914e:	461e      	mov	r6, r3
 8009150:	da0d      	bge.n	800916e <__swhatbuf_r+0x2e>
 8009152:	89a3      	ldrh	r3, [r4, #12]
 8009154:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009158:	f04f 0100 	mov.w	r1, #0
 800915c:	bf0c      	ite	eq
 800915e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009162:	2340      	movne	r3, #64	; 0x40
 8009164:	2000      	movs	r0, #0
 8009166:	6031      	str	r1, [r6, #0]
 8009168:	602b      	str	r3, [r5, #0]
 800916a:	b016      	add	sp, #88	; 0x58
 800916c:	bd70      	pop	{r4, r5, r6, pc}
 800916e:	466a      	mov	r2, sp
 8009170:	f000 f858 	bl	8009224 <_fstat_r>
 8009174:	2800      	cmp	r0, #0
 8009176:	dbec      	blt.n	8009152 <__swhatbuf_r+0x12>
 8009178:	9901      	ldr	r1, [sp, #4]
 800917a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800917e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009182:	4259      	negs	r1, r3
 8009184:	4159      	adcs	r1, r3
 8009186:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800918a:	e7eb      	b.n	8009164 <__swhatbuf_r+0x24>

0800918c <__smakebuf_r>:
 800918c:	898b      	ldrh	r3, [r1, #12]
 800918e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009190:	079d      	lsls	r5, r3, #30
 8009192:	4606      	mov	r6, r0
 8009194:	460c      	mov	r4, r1
 8009196:	d507      	bpl.n	80091a8 <__smakebuf_r+0x1c>
 8009198:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800919c:	6023      	str	r3, [r4, #0]
 800919e:	6123      	str	r3, [r4, #16]
 80091a0:	2301      	movs	r3, #1
 80091a2:	6163      	str	r3, [r4, #20]
 80091a4:	b002      	add	sp, #8
 80091a6:	bd70      	pop	{r4, r5, r6, pc}
 80091a8:	ab01      	add	r3, sp, #4
 80091aa:	466a      	mov	r2, sp
 80091ac:	f7ff ffc8 	bl	8009140 <__swhatbuf_r>
 80091b0:	9900      	ldr	r1, [sp, #0]
 80091b2:	4605      	mov	r5, r0
 80091b4:	4630      	mov	r0, r6
 80091b6:	f7ff fa35 	bl	8008624 <_malloc_r>
 80091ba:	b948      	cbnz	r0, 80091d0 <__smakebuf_r+0x44>
 80091bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091c0:	059a      	lsls	r2, r3, #22
 80091c2:	d4ef      	bmi.n	80091a4 <__smakebuf_r+0x18>
 80091c4:	f023 0303 	bic.w	r3, r3, #3
 80091c8:	f043 0302 	orr.w	r3, r3, #2
 80091cc:	81a3      	strh	r3, [r4, #12]
 80091ce:	e7e3      	b.n	8009198 <__smakebuf_r+0xc>
 80091d0:	89a3      	ldrh	r3, [r4, #12]
 80091d2:	6020      	str	r0, [r4, #0]
 80091d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091d8:	81a3      	strh	r3, [r4, #12]
 80091da:	9b00      	ldr	r3, [sp, #0]
 80091dc:	6163      	str	r3, [r4, #20]
 80091de:	9b01      	ldr	r3, [sp, #4]
 80091e0:	6120      	str	r0, [r4, #16]
 80091e2:	b15b      	cbz	r3, 80091fc <__smakebuf_r+0x70>
 80091e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091e8:	4630      	mov	r0, r6
 80091ea:	f000 f82d 	bl	8009248 <_isatty_r>
 80091ee:	b128      	cbz	r0, 80091fc <__smakebuf_r+0x70>
 80091f0:	89a3      	ldrh	r3, [r4, #12]
 80091f2:	f023 0303 	bic.w	r3, r3, #3
 80091f6:	f043 0301 	orr.w	r3, r3, #1
 80091fa:	81a3      	strh	r3, [r4, #12]
 80091fc:	89a3      	ldrh	r3, [r4, #12]
 80091fe:	431d      	orrs	r5, r3
 8009200:	81a5      	strh	r5, [r4, #12]
 8009202:	e7cf      	b.n	80091a4 <__smakebuf_r+0x18>

08009204 <_close_r>:
 8009204:	b538      	push	{r3, r4, r5, lr}
 8009206:	4d06      	ldr	r5, [pc, #24]	; (8009220 <_close_r+0x1c>)
 8009208:	2300      	movs	r3, #0
 800920a:	4604      	mov	r4, r0
 800920c:	4608      	mov	r0, r1
 800920e:	602b      	str	r3, [r5, #0]
 8009210:	f7f8 ff1d 	bl	800204e <_close>
 8009214:	1c43      	adds	r3, r0, #1
 8009216:	d102      	bne.n	800921e <_close_r+0x1a>
 8009218:	682b      	ldr	r3, [r5, #0]
 800921a:	b103      	cbz	r3, 800921e <_close_r+0x1a>
 800921c:	6023      	str	r3, [r4, #0]
 800921e:	bd38      	pop	{r3, r4, r5, pc}
 8009220:	20000640 	.word	0x20000640

08009224 <_fstat_r>:
 8009224:	b538      	push	{r3, r4, r5, lr}
 8009226:	4d07      	ldr	r5, [pc, #28]	; (8009244 <_fstat_r+0x20>)
 8009228:	2300      	movs	r3, #0
 800922a:	4604      	mov	r4, r0
 800922c:	4608      	mov	r0, r1
 800922e:	4611      	mov	r1, r2
 8009230:	602b      	str	r3, [r5, #0]
 8009232:	f7f8 ff18 	bl	8002066 <_fstat>
 8009236:	1c43      	adds	r3, r0, #1
 8009238:	d102      	bne.n	8009240 <_fstat_r+0x1c>
 800923a:	682b      	ldr	r3, [r5, #0]
 800923c:	b103      	cbz	r3, 8009240 <_fstat_r+0x1c>
 800923e:	6023      	str	r3, [r4, #0]
 8009240:	bd38      	pop	{r3, r4, r5, pc}
 8009242:	bf00      	nop
 8009244:	20000640 	.word	0x20000640

08009248 <_isatty_r>:
 8009248:	b538      	push	{r3, r4, r5, lr}
 800924a:	4d06      	ldr	r5, [pc, #24]	; (8009264 <_isatty_r+0x1c>)
 800924c:	2300      	movs	r3, #0
 800924e:	4604      	mov	r4, r0
 8009250:	4608      	mov	r0, r1
 8009252:	602b      	str	r3, [r5, #0]
 8009254:	f7f8 ff17 	bl	8002086 <_isatty>
 8009258:	1c43      	adds	r3, r0, #1
 800925a:	d102      	bne.n	8009262 <_isatty_r+0x1a>
 800925c:	682b      	ldr	r3, [r5, #0]
 800925e:	b103      	cbz	r3, 8009262 <_isatty_r+0x1a>
 8009260:	6023      	str	r3, [r4, #0]
 8009262:	bd38      	pop	{r3, r4, r5, pc}
 8009264:	20000640 	.word	0x20000640

08009268 <_lseek_r>:
 8009268:	b538      	push	{r3, r4, r5, lr}
 800926a:	4d07      	ldr	r5, [pc, #28]	; (8009288 <_lseek_r+0x20>)
 800926c:	4604      	mov	r4, r0
 800926e:	4608      	mov	r0, r1
 8009270:	4611      	mov	r1, r2
 8009272:	2200      	movs	r2, #0
 8009274:	602a      	str	r2, [r5, #0]
 8009276:	461a      	mov	r2, r3
 8009278:	f7f8 ff10 	bl	800209c <_lseek>
 800927c:	1c43      	adds	r3, r0, #1
 800927e:	d102      	bne.n	8009286 <_lseek_r+0x1e>
 8009280:	682b      	ldr	r3, [r5, #0]
 8009282:	b103      	cbz	r3, 8009286 <_lseek_r+0x1e>
 8009284:	6023      	str	r3, [r4, #0]
 8009286:	bd38      	pop	{r3, r4, r5, pc}
 8009288:	20000640 	.word	0x20000640

0800928c <_read_r>:
 800928c:	b538      	push	{r3, r4, r5, lr}
 800928e:	4d07      	ldr	r5, [pc, #28]	; (80092ac <_read_r+0x20>)
 8009290:	4604      	mov	r4, r0
 8009292:	4608      	mov	r0, r1
 8009294:	4611      	mov	r1, r2
 8009296:	2200      	movs	r2, #0
 8009298:	602a      	str	r2, [r5, #0]
 800929a:	461a      	mov	r2, r3
 800929c:	f7f8 fe9e 	bl	8001fdc <_read>
 80092a0:	1c43      	adds	r3, r0, #1
 80092a2:	d102      	bne.n	80092aa <_read_r+0x1e>
 80092a4:	682b      	ldr	r3, [r5, #0]
 80092a6:	b103      	cbz	r3, 80092aa <_read_r+0x1e>
 80092a8:	6023      	str	r3, [r4, #0]
 80092aa:	bd38      	pop	{r3, r4, r5, pc}
 80092ac:	20000640 	.word	0x20000640

080092b0 <_sbrk_r>:
 80092b0:	b538      	push	{r3, r4, r5, lr}
 80092b2:	4d06      	ldr	r5, [pc, #24]	; (80092cc <_sbrk_r+0x1c>)
 80092b4:	2300      	movs	r3, #0
 80092b6:	4604      	mov	r4, r0
 80092b8:	4608      	mov	r0, r1
 80092ba:	602b      	str	r3, [r5, #0]
 80092bc:	f7f8 fefc 	bl	80020b8 <_sbrk>
 80092c0:	1c43      	adds	r3, r0, #1
 80092c2:	d102      	bne.n	80092ca <_sbrk_r+0x1a>
 80092c4:	682b      	ldr	r3, [r5, #0]
 80092c6:	b103      	cbz	r3, 80092ca <_sbrk_r+0x1a>
 80092c8:	6023      	str	r3, [r4, #0]
 80092ca:	bd38      	pop	{r3, r4, r5, pc}
 80092cc:	20000640 	.word	0x20000640

080092d0 <_write_r>:
 80092d0:	b538      	push	{r3, r4, r5, lr}
 80092d2:	4d07      	ldr	r5, [pc, #28]	; (80092f0 <_write_r+0x20>)
 80092d4:	4604      	mov	r4, r0
 80092d6:	4608      	mov	r0, r1
 80092d8:	4611      	mov	r1, r2
 80092da:	2200      	movs	r2, #0
 80092dc:	602a      	str	r2, [r5, #0]
 80092de:	461a      	mov	r2, r3
 80092e0:	f7f8 fe99 	bl	8002016 <_write>
 80092e4:	1c43      	adds	r3, r0, #1
 80092e6:	d102      	bne.n	80092ee <_write_r+0x1e>
 80092e8:	682b      	ldr	r3, [r5, #0]
 80092ea:	b103      	cbz	r3, 80092ee <_write_r+0x1e>
 80092ec:	6023      	str	r3, [r4, #0]
 80092ee:	bd38      	pop	{r3, r4, r5, pc}
 80092f0:	20000640 	.word	0x20000640

080092f4 <memcpy>:
 80092f4:	440a      	add	r2, r1
 80092f6:	4291      	cmp	r1, r2
 80092f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80092fc:	d100      	bne.n	8009300 <memcpy+0xc>
 80092fe:	4770      	bx	lr
 8009300:	b510      	push	{r4, lr}
 8009302:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009306:	f803 4f01 	strb.w	r4, [r3, #1]!
 800930a:	4291      	cmp	r1, r2
 800930c:	d1f9      	bne.n	8009302 <memcpy+0xe>
 800930e:	bd10      	pop	{r4, pc}

08009310 <__assert_func>:
 8009310:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009312:	4614      	mov	r4, r2
 8009314:	461a      	mov	r2, r3
 8009316:	4b09      	ldr	r3, [pc, #36]	; (800933c <__assert_func+0x2c>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4605      	mov	r5, r0
 800931c:	68d8      	ldr	r0, [r3, #12]
 800931e:	b14c      	cbz	r4, 8009334 <__assert_func+0x24>
 8009320:	4b07      	ldr	r3, [pc, #28]	; (8009340 <__assert_func+0x30>)
 8009322:	9100      	str	r1, [sp, #0]
 8009324:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009328:	4906      	ldr	r1, [pc, #24]	; (8009344 <__assert_func+0x34>)
 800932a:	462b      	mov	r3, r5
 800932c:	f000 f882 	bl	8009434 <fiprintf>
 8009330:	f000 f89f 	bl	8009472 <abort>
 8009334:	4b04      	ldr	r3, [pc, #16]	; (8009348 <__assert_func+0x38>)
 8009336:	461c      	mov	r4, r3
 8009338:	e7f3      	b.n	8009322 <__assert_func+0x12>
 800933a:	bf00      	nop
 800933c:	20000068 	.word	0x20000068
 8009340:	08009c0f 	.word	0x08009c0f
 8009344:	08009c1c 	.word	0x08009c1c
 8009348:	08009c4a 	.word	0x08009c4a

0800934c <_calloc_r>:
 800934c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800934e:	fba1 2402 	umull	r2, r4, r1, r2
 8009352:	b94c      	cbnz	r4, 8009368 <_calloc_r+0x1c>
 8009354:	4611      	mov	r1, r2
 8009356:	9201      	str	r2, [sp, #4]
 8009358:	f7ff f964 	bl	8008624 <_malloc_r>
 800935c:	9a01      	ldr	r2, [sp, #4]
 800935e:	4605      	mov	r5, r0
 8009360:	b930      	cbnz	r0, 8009370 <_calloc_r+0x24>
 8009362:	4628      	mov	r0, r5
 8009364:	b003      	add	sp, #12
 8009366:	bd30      	pop	{r4, r5, pc}
 8009368:	220c      	movs	r2, #12
 800936a:	6002      	str	r2, [r0, #0]
 800936c:	2500      	movs	r5, #0
 800936e:	e7f8      	b.n	8009362 <_calloc_r+0x16>
 8009370:	4621      	mov	r1, r4
 8009372:	f7fe f937 	bl	80075e4 <memset>
 8009376:	e7f4      	b.n	8009362 <_calloc_r+0x16>

08009378 <_free_r>:
 8009378:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800937a:	2900      	cmp	r1, #0
 800937c:	d044      	beq.n	8009408 <_free_r+0x90>
 800937e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009382:	9001      	str	r0, [sp, #4]
 8009384:	2b00      	cmp	r3, #0
 8009386:	f1a1 0404 	sub.w	r4, r1, #4
 800938a:	bfb8      	it	lt
 800938c:	18e4      	addlt	r4, r4, r3
 800938e:	f7ff fa77 	bl	8008880 <__malloc_lock>
 8009392:	4a1e      	ldr	r2, [pc, #120]	; (800940c <_free_r+0x94>)
 8009394:	9801      	ldr	r0, [sp, #4]
 8009396:	6813      	ldr	r3, [r2, #0]
 8009398:	b933      	cbnz	r3, 80093a8 <_free_r+0x30>
 800939a:	6063      	str	r3, [r4, #4]
 800939c:	6014      	str	r4, [r2, #0]
 800939e:	b003      	add	sp, #12
 80093a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80093a4:	f7ff ba72 	b.w	800888c <__malloc_unlock>
 80093a8:	42a3      	cmp	r3, r4
 80093aa:	d908      	bls.n	80093be <_free_r+0x46>
 80093ac:	6825      	ldr	r5, [r4, #0]
 80093ae:	1961      	adds	r1, r4, r5
 80093b0:	428b      	cmp	r3, r1
 80093b2:	bf01      	itttt	eq
 80093b4:	6819      	ldreq	r1, [r3, #0]
 80093b6:	685b      	ldreq	r3, [r3, #4]
 80093b8:	1949      	addeq	r1, r1, r5
 80093ba:	6021      	streq	r1, [r4, #0]
 80093bc:	e7ed      	b.n	800939a <_free_r+0x22>
 80093be:	461a      	mov	r2, r3
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	b10b      	cbz	r3, 80093c8 <_free_r+0x50>
 80093c4:	42a3      	cmp	r3, r4
 80093c6:	d9fa      	bls.n	80093be <_free_r+0x46>
 80093c8:	6811      	ldr	r1, [r2, #0]
 80093ca:	1855      	adds	r5, r2, r1
 80093cc:	42a5      	cmp	r5, r4
 80093ce:	d10b      	bne.n	80093e8 <_free_r+0x70>
 80093d0:	6824      	ldr	r4, [r4, #0]
 80093d2:	4421      	add	r1, r4
 80093d4:	1854      	adds	r4, r2, r1
 80093d6:	42a3      	cmp	r3, r4
 80093d8:	6011      	str	r1, [r2, #0]
 80093da:	d1e0      	bne.n	800939e <_free_r+0x26>
 80093dc:	681c      	ldr	r4, [r3, #0]
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	6053      	str	r3, [r2, #4]
 80093e2:	440c      	add	r4, r1
 80093e4:	6014      	str	r4, [r2, #0]
 80093e6:	e7da      	b.n	800939e <_free_r+0x26>
 80093e8:	d902      	bls.n	80093f0 <_free_r+0x78>
 80093ea:	230c      	movs	r3, #12
 80093ec:	6003      	str	r3, [r0, #0]
 80093ee:	e7d6      	b.n	800939e <_free_r+0x26>
 80093f0:	6825      	ldr	r5, [r4, #0]
 80093f2:	1961      	adds	r1, r4, r5
 80093f4:	428b      	cmp	r3, r1
 80093f6:	bf04      	itt	eq
 80093f8:	6819      	ldreq	r1, [r3, #0]
 80093fa:	685b      	ldreq	r3, [r3, #4]
 80093fc:	6063      	str	r3, [r4, #4]
 80093fe:	bf04      	itt	eq
 8009400:	1949      	addeq	r1, r1, r5
 8009402:	6021      	streq	r1, [r4, #0]
 8009404:	6054      	str	r4, [r2, #4]
 8009406:	e7ca      	b.n	800939e <_free_r+0x26>
 8009408:	b003      	add	sp, #12
 800940a:	bd30      	pop	{r4, r5, pc}
 800940c:	20000638 	.word	0x20000638

08009410 <__ascii_mbtowc>:
 8009410:	b082      	sub	sp, #8
 8009412:	b901      	cbnz	r1, 8009416 <__ascii_mbtowc+0x6>
 8009414:	a901      	add	r1, sp, #4
 8009416:	b142      	cbz	r2, 800942a <__ascii_mbtowc+0x1a>
 8009418:	b14b      	cbz	r3, 800942e <__ascii_mbtowc+0x1e>
 800941a:	7813      	ldrb	r3, [r2, #0]
 800941c:	600b      	str	r3, [r1, #0]
 800941e:	7812      	ldrb	r2, [r2, #0]
 8009420:	1e10      	subs	r0, r2, #0
 8009422:	bf18      	it	ne
 8009424:	2001      	movne	r0, #1
 8009426:	b002      	add	sp, #8
 8009428:	4770      	bx	lr
 800942a:	4610      	mov	r0, r2
 800942c:	e7fb      	b.n	8009426 <__ascii_mbtowc+0x16>
 800942e:	f06f 0001 	mvn.w	r0, #1
 8009432:	e7f8      	b.n	8009426 <__ascii_mbtowc+0x16>

08009434 <fiprintf>:
 8009434:	b40e      	push	{r1, r2, r3}
 8009436:	b503      	push	{r0, r1, lr}
 8009438:	4601      	mov	r1, r0
 800943a:	ab03      	add	r3, sp, #12
 800943c:	4805      	ldr	r0, [pc, #20]	; (8009454 <fiprintf+0x20>)
 800943e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009442:	6800      	ldr	r0, [r0, #0]
 8009444:	9301      	str	r3, [sp, #4]
 8009446:	f7fe ffab 	bl	80083a0 <_vfiprintf_r>
 800944a:	b002      	add	sp, #8
 800944c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009450:	b003      	add	sp, #12
 8009452:	4770      	bx	lr
 8009454:	20000068 	.word	0x20000068

08009458 <__ascii_wctomb>:
 8009458:	b149      	cbz	r1, 800946e <__ascii_wctomb+0x16>
 800945a:	2aff      	cmp	r2, #255	; 0xff
 800945c:	bf85      	ittet	hi
 800945e:	238a      	movhi	r3, #138	; 0x8a
 8009460:	6003      	strhi	r3, [r0, #0]
 8009462:	700a      	strbls	r2, [r1, #0]
 8009464:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009468:	bf98      	it	ls
 800946a:	2001      	movls	r0, #1
 800946c:	4770      	bx	lr
 800946e:	4608      	mov	r0, r1
 8009470:	4770      	bx	lr

08009472 <abort>:
 8009472:	b508      	push	{r3, lr}
 8009474:	2006      	movs	r0, #6
 8009476:	f000 f82b 	bl	80094d0 <raise>
 800947a:	2001      	movs	r0, #1
 800947c:	f7f8 fda4 	bl	8001fc8 <_exit>

08009480 <_raise_r>:
 8009480:	291f      	cmp	r1, #31
 8009482:	b538      	push	{r3, r4, r5, lr}
 8009484:	4604      	mov	r4, r0
 8009486:	460d      	mov	r5, r1
 8009488:	d904      	bls.n	8009494 <_raise_r+0x14>
 800948a:	2316      	movs	r3, #22
 800948c:	6003      	str	r3, [r0, #0]
 800948e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009492:	bd38      	pop	{r3, r4, r5, pc}
 8009494:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009496:	b112      	cbz	r2, 800949e <_raise_r+0x1e>
 8009498:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800949c:	b94b      	cbnz	r3, 80094b2 <_raise_r+0x32>
 800949e:	4620      	mov	r0, r4
 80094a0:	f000 f830 	bl	8009504 <_getpid_r>
 80094a4:	462a      	mov	r2, r5
 80094a6:	4601      	mov	r1, r0
 80094a8:	4620      	mov	r0, r4
 80094aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094ae:	f000 b817 	b.w	80094e0 <_kill_r>
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	d00a      	beq.n	80094cc <_raise_r+0x4c>
 80094b6:	1c59      	adds	r1, r3, #1
 80094b8:	d103      	bne.n	80094c2 <_raise_r+0x42>
 80094ba:	2316      	movs	r3, #22
 80094bc:	6003      	str	r3, [r0, #0]
 80094be:	2001      	movs	r0, #1
 80094c0:	e7e7      	b.n	8009492 <_raise_r+0x12>
 80094c2:	2400      	movs	r4, #0
 80094c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80094c8:	4628      	mov	r0, r5
 80094ca:	4798      	blx	r3
 80094cc:	2000      	movs	r0, #0
 80094ce:	e7e0      	b.n	8009492 <_raise_r+0x12>

080094d0 <raise>:
 80094d0:	4b02      	ldr	r3, [pc, #8]	; (80094dc <raise+0xc>)
 80094d2:	4601      	mov	r1, r0
 80094d4:	6818      	ldr	r0, [r3, #0]
 80094d6:	f7ff bfd3 	b.w	8009480 <_raise_r>
 80094da:	bf00      	nop
 80094dc:	20000068 	.word	0x20000068

080094e0 <_kill_r>:
 80094e0:	b538      	push	{r3, r4, r5, lr}
 80094e2:	4d07      	ldr	r5, [pc, #28]	; (8009500 <_kill_r+0x20>)
 80094e4:	2300      	movs	r3, #0
 80094e6:	4604      	mov	r4, r0
 80094e8:	4608      	mov	r0, r1
 80094ea:	4611      	mov	r1, r2
 80094ec:	602b      	str	r3, [r5, #0]
 80094ee:	f7f8 fd5b 	bl	8001fa8 <_kill>
 80094f2:	1c43      	adds	r3, r0, #1
 80094f4:	d102      	bne.n	80094fc <_kill_r+0x1c>
 80094f6:	682b      	ldr	r3, [r5, #0]
 80094f8:	b103      	cbz	r3, 80094fc <_kill_r+0x1c>
 80094fa:	6023      	str	r3, [r4, #0]
 80094fc:	bd38      	pop	{r3, r4, r5, pc}
 80094fe:	bf00      	nop
 8009500:	20000640 	.word	0x20000640

08009504 <_getpid_r>:
 8009504:	f7f8 bd48 	b.w	8001f98 <_getpid>

08009508 <_init>:
 8009508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800950a:	bf00      	nop
 800950c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800950e:	bc08      	pop	{r3}
 8009510:	469e      	mov	lr, r3
 8009512:	4770      	bx	lr

08009514 <_fini>:
 8009514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009516:	bf00      	nop
 8009518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800951a:	bc08      	pop	{r3}
 800951c:	469e      	mov	lr, r3
 800951e:	4770      	bx	lr
